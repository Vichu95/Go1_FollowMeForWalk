/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-02-29 13:28:09.822712
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((1.0)*x2);
x11=((0.126)*x4);
x12=((1.0)*x4);
x13=((0.282)*x0);
x14=((0.282)*x4);
x15=((1.0)*x7);
x16=((1.0)*x5);
x17=((0.282)*x2);
x18=((0.126)*x2);
x19=(x1*x6);
x20=(x1*x2);
x21=(x0*x1);
x22=(x3*x6);
x23=(x0*x3);
x24=(x3*x4);
IkReal x25=((1.0)*x23);
eetrans[0]=((((-1.0)*x13*x24))+(((0.179)*x23))+((x7*((((x18*x21))+(((-1.0)*x11*x25))))))+((x5*(((((-1.0)*x11*x21))+(((-1.0)*x18*x25))))))+((x13*x20))+(((0.0265)*x21)));
IkReal x26=((1.0)*x11);
IkReal x27=((1.0)*x22);
eetrans[1]=(((x5*(((((-1.0)*x19*x26))+(((-1.0)*x18*x27))))))+(((0.179)*x22))+((x7*((((x18*x19))+(((-1.0)*x22*x26))))))+(((-1.0)*x14*x27))+((x17*x19))+(((0.0265)*x19)));
IkReal x28=((1.0)*x3);
IkReal x29=((1.0)*x1);
eetrans[2]=((0.0595)+(((-1.0)*x17*x28))+((x7*(((((-1.0)*x18*x28))+(((-1.0)*x11*x29))))))+(((-1.0)*x14*x29))+(((-0.0265)*x3))+((x5*(((((-1.0)*x18*x29))+((x11*x3))))))+(((0.179)*x1)));
IkReal x30=((1.0)*x10);
eerot[0]=(((x6*x9))+(((-1.0)*x8*((((x16*(((((-1.0)*x21*x30))+((x12*x23))))))+((x15*(((((-1.0)*x23*x30))+(((-1.0)*x12*x21)))))))))));
IkReal x31=((1.0)*x10);
eerot[1]=((((-1.0)*x0*x9))+(((-1.0)*x8*((((x15*(((((-1.0)*x22*x31))+(((-1.0)*x12*x19))))))+((x16*(((((-1.0)*x19*x31))+((x12*x22)))))))))));
eerot[2]=((-1.0)*x8*((((x15*(((((-1.0)*x1*x10))+x24))))+((x16*((((x1*x12))+((x10*x3)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j17,cj17,sj17,htj17,j17mul,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij17[2], _nj17,_ij18[2], _nj18;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1;  _ij18[0] = -1; _ij18[1] = -1; _nj18 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j18=pfree[0]; cj18=cos(pfree[0]); sj18=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.0595)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j12eval[1];
j12eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
IkReal x32=x33.value;
j12array[0]=((-1.0)*x32);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x32)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

IkReal op[8+1], zeror[8];
int numroots;
IkReal x34=(px*r00);
IkReal x35=(pz*r02);
IkReal x36=(py*r01);
IkReal x37=((0.179)*r02);
IkReal x38=((0.045108)*pz);
IkReal x39=(r01*sj12);
IkReal x40=(cj12*r00);
IkReal x41=(cj12*px);
IkReal x42=(py*sj12);
IkReal x43=((0.126)*(px*px));
IkReal x44=((0.126)*(pz*pz));
IkReal x45=((0.126)*(py*py));
IkReal x46=((0.358)*x39);
IkReal x47=((0.358)*x40);
IkReal x48=((0.090216)*x42);
IkReal x49=((0.090216)*x41);
IkReal x50=((0.3085)*x39);
IkReal x51=((0.3085)*x40);
IkReal x52=((0.2555)*x40);
IkReal x53=((0.2555)*x39);
IkReal x54=((0.077742)*x42);
IkReal x55=((0.077742)*x41);
IkReal x56=((0.064386)*x41);
IkReal x57=((0.064386)*x42);
IkReal x58=((((1.128)*x39))+(((1.128)*x40)));
IkReal x59=((((0.284256)*x42))+(((0.284256)*x41)));
IkReal x60=(x57+x56);
IkReal x61=(x46+x47);
IkReal x62=(x48+x49);
IkReal x63=(x53+x52);
IkReal x64=(x36+x35+x34);
IkReal x65=((((0.617)*r02))+(((-1.0)*x61)));
IkReal x66=((((-1.0)*x62))+(((0.155484)*pz)));
IkReal x67=((((-0.511)*r02))+(((-1.0)*x61)));
IkReal x68=((((-0.128772)*pz))+(((-1.0)*x62)));
IkReal x69=(x38+x55+x54);
IkReal x70=(x37+x51+x50);
IkReal x71=(x44+x45+x43);
IkReal x72=((((-1.0)*x70))+x64);
IkReal x73=((((-1.0)*x37))+x63+x64);
IkReal x74=(x37+x64+(((-1.0)*x63)));
IkReal x75=(x70+x64);
IkReal x76=((0.0140284935)+x71+(((-1.0)*x69)));
IkReal x77=((0.0102621015)+(((-1.0)*x38))+x71+x60);
IkReal x78=((0.0102621015)+x71+x38+(((-1.0)*x60)));
IkReal x79=((0.0140284935)+x71+x69);
IkReal gconst0=x72;
IkReal gconst1=x73;
IkReal gconst2=x76;
IkReal gconst3=x77;
IkReal gconst4=x72;
IkReal gconst5=x73;
IkReal gconst6=x76;
IkReal gconst7=x77;
IkReal gconst8=x65;
IkReal gconst9=x58;
IkReal gconst10=x67;
IkReal gconst11=x66;
IkReal gconst12=x59;
IkReal gconst13=x68;
IkReal gconst14=x65;
IkReal gconst15=x58;
IkReal gconst16=x67;
IkReal gconst17=x66;
IkReal gconst18=x59;
IkReal gconst19=x68;
IkReal gconst20=x75;
IkReal gconst21=x74;
IkReal gconst22=x79;
IkReal gconst23=x78;
IkReal gconst24=x75;
IkReal gconst25=x74;
IkReal gconst26=x79;
IkReal gconst27=x78;
IkReal x80=r02*r02;
IkReal x81=pz*pz;
IkReal x82=(gconst21*gconst24);
IkReal x83=(gconst16*gconst26);
IkReal x84=((1.0)*gconst21);
IkReal x85=((0.000647240003391744)*gconst10);
IkReal x86=(gconst1*gconst4);
IkReal x87=((0.014348674368)*r02);
IkReal x88=(gconst10*gconst6);
IkReal x89=(gconst20*gconst23);
IkReal x90=(gconst14*gconst21);
IkReal x91=(gconst14*gconst3);
IkReal x92=((0.142128)*pz);
IkReal x93=(gconst23*gconst24);
IkReal x94=(gconst14*gconst23);
IkReal x95=(gconst15*gconst26);
IkReal x96=((0.564)*r02);
IkReal x97=(gconst4*pz);
IkReal x98=((0.007231731881472)*gconst10);
IkReal x99=(gconst25*gconst26);
IkReal x100=(gconst1*gconst6);
IkReal x101=((0.080160192)*r02);
IkReal x102=(gconst17*gconst21);
IkReal x103=(gconst22*gconst27);
IkReal x104=((0.025440912)*gconst18);
IkReal x105=(gconst13*gconst4);
IkReal x106=(gconst3*gconst4);
IkReal x107=(gconst3*gconst6);
IkReal x108=(gconst1*gconst17);
IkReal x109=(gconst13*gconst20);
IkReal x110=((1.0)*gconst24);
IkReal x111=(gconst21*gconst26);
IkReal x112=(gconst1*gconst14);
IkReal x113=(gconst13*gconst6);
IkReal x114=((0.025440912)*gconst9);
IkReal x115=(gconst10*gconst4);
IkReal x116=(gconst0*gconst5);
IkReal x117=((0.025440912)*gconst12);
IkReal x118=((0.007231731881472)*pz);
IkReal x119=(gconst13*gconst24);
IkReal x120=(gconst10*gconst26);
IkReal x121=(gconst17*gconst3);
IkReal x122=(gconst2*gconst7);
IkReal x123=(gconst10*gconst24);
IkReal x124=(gconst17*gconst25);
IkReal x125=((0.020200368384)*x81);
IkReal x126=(gconst12*x92);
IkReal x127=((1.0)*gconst0*gconst7);
IkReal x128=((1.0)*gconst2*gconst5);
IkReal x129=((0.318096)*x80);
IkReal x130=((1.0)*gconst5*x100);
IkReal x131=((1.0)*gconst0*x106);
IkReal x132=((1.0)*gconst27*x93);
IkReal x133=(gconst26*x129);
op[0]=((((-1.0)*x125*x82))+((pz*x101*x93))+((x87*x93))+(((-0.000647240003391744)*x82))+((x89*x99))+((x103*x82))+(((-1.0)*x118*x82))+(((-1.0)*gconst27*x110*x89))+(((-1.0)*gconst23*x133))+(((-1.0)*gconst22*x84*x99))+((x111*x87))+((pz*x101*x111)));
op[1]=((((-1.0)*x114*x93))+((pz*x101*x102))+((pz*x101*x94))+(((-1.0)*gconst9*x92*x93))+((x87*x94))+((gconst23*x95*x96))+(((-1.0)*gconst14*gconst27*x89))+(((-1.0)*x123*x125))+(((-1.0)*x125*x90))+((x117*x82))+(((-1.0)*gconst10*gconst22*x99))+((pz*x101*x120))+((x102*x87))+((gconst18*x82*x92))+(((-0.000647240003391744)*x90))+((x124*x89))+((gconst19*gconst22*x82))+((x103*x90))+(((-1.0)*gconst21*x92*x95))+((x103*x123))+(((-1.0)*x118*x90))+((gconst11*gconst27*x82))+(((-1.0)*gconst19*x110*x89))+((gconst23*gconst8*x99))+(((-1.0)*gconst13*x133))+(((-1.0)*gconst22*x124*x84))+(((-1.0)*gconst12*x111*x96))+(((-0.025440912)*gconst21*x95))+(((-1.0)*gconst18*x93*x96))+((x119*x87))+(((-1.0)*gconst17*gconst23*x129))+(((-1.0)*gconst8*x132))+((x83*x89))+(((-1.0)*gconst24*x85))+(((-1.0)*gconst11*x84*x99))+((x109*x99))+((gconst23*gconst26*gconst9*x96))+(((-1.0)*gconst24*pz*x98))+(((-1.0)*gconst27*x109*x110))+((x104*x82))+((x120*x87))+(((-1.0)*gconst22*x83*x84))+((pz*x101*x119))+((x126*x82)));
op[2]=((((0.025440912)*gconst12*gconst14*gconst21))+(((0.025440912)*gconst10*gconst18*gconst24))+((gconst13*gconst17*gconst20*gconst25))+((gconst0*gconst23*gconst25*gconst26))+(((-1.0)*gconst2*gconst21*gconst25*gconst26))+(((-0.00129448000678349)*gconst21*gconst24))+(((0.014348674368)*gconst21*gconst6*r02))+(((-0.007231731881472)*gconst10*gconst14*pz))+((gconst18*gconst23*gconst24*gconst9))+(((-0.564)*gconst10*gconst12*gconst26*r02))+(((0.142128)*gconst14*gconst18*gconst21*pz))+(((0.025440912)*gconst10*gconst12*gconst24))+(((-1.0)*gconst0*gconst23*gconst24*gconst27))+(((-1.0)*gconst13*gconst24*gconst27*gconst8))+(((-0.160320384)*gconst21*gconst26*pz*r02))+(((-0.020200368384)*gconst21*gconst4*(pz*pz)))+(((-1.0)*gconst1*gconst22*gconst25*gconst26))+(((0.080160192)*gconst10*gconst17*pz*r02))+(((0.014348674368)*gconst13*gconst14*r02))+(((-0.564)*gconst13*gconst18*gconst24*r02))+(((-0.025440912)*gconst14*gconst23*gconst9))+((gconst14*gconst19*gconst21*gconst22))+(((-0.160320384)*gconst23*gconst24*pz*r02))+(((-1.0)*gconst11*gconst16*gconst21*gconst26))+((gconst10*gconst19*gconst22*gconst24))+((gconst21*gconst22*gconst27*gconst4))+((gconst2*gconst21*gconst24*gconst27))+((gconst20*gconst23*gconst25*gconst6))+(((-0.142128)*gconst13*gconst24*gconst9*pz))+(((-0.318096)*gconst13*gconst17*(r02*r02)))+(((0.142128)*gconst10*gconst12*gconst24*pz))+(((-1.0)*gconst20*gconst23*gconst27*gconst4))+(((0.080160192)*gconst1*gconst26*pz*r02))+(((0.080160192)*gconst23*gconst4*pz*r02))+(((0.014348674368)*gconst23*gconst4*r02))+((gconst16*gconst17*gconst20*gconst23))+(((-1.0)*gconst19*gconst23*gconst24*gconst8))+(((0.080160192)*gconst24*gconst3*pz*r02))+(((0.014348674368)*gconst24*gconst3*r02))+(((-0.025440912)*gconst10*gconst15*gconst26))+(((-0.318096)*gconst23*gconst6*(r02*r02)))+(((-1.0)*gconst15*gconst23*gconst26*gconst9))+(((-0.007231731881472)*gconst21*gconst4*pz))+((gconst20*gconst25*gconst26*gconst3))+(((0.636192)*gconst23*gconst26*(r02*r02)))+(((0.564)*gconst17*gconst23*gconst9*r02))+(((-0.318096)*gconst26*gconst3*(r02*r02)))+(((-1.0)*gconst13*gconst19*gconst20*gconst24))+(((-1.0)*gconst20*gconst24*gconst27*gconst3))+(((-0.025440912)*gconst13*gconst24*gconst9))+((gconst16*gconst23*gconst26*gconst8))+((gconst20*gconst23*gconst26*gconst5))+(((0.014348674368)*gconst10*gconst17*r02))+(((-0.142128)*gconst14*gconst23*gconst9*pz))+(((-0.000647240003391744)*gconst10*gconst14))+(((-1.0)*gconst10*gconst16*gconst22*gconst26))+(((-0.000647240003391744)*gconst1*gconst24))+((gconst11*gconst19*gconst21*gconst24))+(((0.564)*gconst13*gconst15*gconst26*r02))+((gconst17*gconst23*gconst25*gconst8))+(((0.142128)*gconst12*gconst14*gconst21*pz))+(((-1.0)*gconst16*gconst17*gconst21*gconst22))+(((-1.0)*gconst21*gconst22*gconst25*gconst6))+(((0.564)*gconst13*gconst26*gconst9*r02))+(((-0.025440912)*gconst15*gconst17*gconst21))+(((-1.0)*gconst21*gconst22*gconst26*gconst5))+(((-1.0)*gconst10*gconst11*gconst25*gconst26))+(((-0.142128)*gconst15*gconst17*gconst21*pz))+(((-0.020200368384)*gconst10*gconst14*(pz*pz)))+(((-0.564)*gconst12*gconst17*gconst21*r02))+((gconst11*gconst14*gconst21*gconst27))+(((0.080160192)*gconst21*gconst6*pz*r02))+(((-0.564)*gconst14*gconst18*gconst23*r02))+(((-0.000647240003391744)*gconst21*gconst4))+(((-1.0)*gconst10*gconst17*gconst22*gconst25))+(((0.040400736768)*gconst21*gconst24*(pz*pz)))+((gconst10*gconst14*gconst22*gconst27))+(((-1.0)*gconst11*gconst17*gconst21*gconst25))+(((0.025440912)*gconst14*gconst18*gconst21))+((gconst12*gconst15*gconst21*gconst26))+(((-0.020200368384)*gconst1*gconst24*(pz*pz)))+((gconst21*gconst22*gconst24*gconst7))+(((-0.142128)*gconst10*gconst15*gconst26*pz))+(((-1.0)*gconst14*gconst19*gconst20*gconst23))+(((-1.0)*gconst20*gconst23*gconst24*gconst7))+(((-1.0)*gconst14*gconst23*gconst27*gconst8))+((gconst13*gconst25*gconst26*gconst8))+(((-1.0)*gconst12*gconst18*gconst21*gconst24))+(((-0.007231731881472)*gconst1*gconst24*pz))+((gconst1*gconst22*gconst24*gconst27))+((gconst13*gconst16*gconst20*gconst26))+(((0.014348674368)*gconst1*gconst26*r02))+(((0.080160192)*gconst13*gconst14*pz*r02))+(((0.564)*gconst15*gconst17*gconst23*r02))+((gconst10*gconst11*gconst24*gconst27))+(((0.142128)*gconst10*gconst18*gconst24*pz))+(((-1.0)*gconst13*gconst14*gconst20*gconst27)));
op[3]=((((-0.318096)*gconst17*gconst3*(r02*r02)))+(((-1.0)*gconst17*gconst2*gconst21*gconst25))+(((-0.564)*gconst12*gconst21*gconst6*r02))+(((-0.160320384)*gconst17*gconst21*pz*r02))+(((0.142128)*gconst10*gconst14*gconst18*pz))+(((0.040400736768)*gconst14*gconst21*(pz*pz)))+(((-0.025440912)*gconst15*gconst21*gconst26))+(((0.025440912)*gconst12*gconst21*gconst24))+(((0.564)*gconst13*gconst15*gconst17*r02))+(((-0.160320384)*gconst14*gconst23*pz*r02))+(((-1.0)*gconst0*gconst14*gconst23*gconst27))+(((-0.025440912)*gconst23*gconst24*gconst9))+((gconst13*gconst17*gconst25*gconst8))+(((0.564)*gconst13*gconst17*gconst9*r02))+(((-1.0)*gconst0*gconst19*gconst23*gconst24))+(((0.564)*gconst15*gconst26*gconst3*r02))+(((-1.0)*gconst13*gconst15*gconst26*gconst9))+(((-1.0)*gconst13*gconst20*gconst24*gconst7))+(((0.025440912)*gconst10*gconst12*gconst14))+((gconst10*gconst12*gconst15*gconst26))+((gconst16*gconst20*gconst23*gconst6))+(((-0.020200368384)*gconst10*gconst4*(pz*pz)))+(((0.025440912)*gconst18*gconst21*gconst24))+((gconst10*gconst14*gconst19*gconst22))+(((-0.020200368384)*gconst1*gconst14*(pz*pz)))+((gconst17*gconst20*gconst25*gconst3))+((gconst14*gconst2*gconst21*gconst27))+(((0.636192)*gconst17*gconst23*(r02*r02)))+(((-1.0)*gconst14*gconst20*gconst23*gconst7))+(((-1.0)*gconst16*gconst2*gconst21*gconst26))+(((0.142128)*gconst12*gconst21*gconst4*pz))+((gconst13*gconst16*gconst17*gconst20))+(((-0.160320384)*gconst10*gconst26*pz*r02))+(((-0.025440912)*gconst24*gconst3*gconst9))+((gconst10*gconst2*gconst24*gconst27))+(((-1.0)*gconst24*gconst27*gconst3*gconst8))+(((-1.0)*gconst10*gconst11*gconst16*gconst26))+(((-0.564)*gconst10*gconst12*gconst17*r02))+((gconst23*gconst25*gconst6*gconst8))+((gconst14*gconst21*gconst22*gconst7))+(((-1.0)*gconst23*gconst27*gconst4*gconst8))+(((-1.0)*gconst10*gconst12*gconst18*gconst24))+(((0.142128)*gconst15*gconst21*gconst26*pz))+((gconst10*gconst11*gconst14*gconst27))+((gconst19*gconst2*gconst21*gconst24))+(((0.014348674368)*gconst14*gconst3*r02))+(((-1.0)*gconst23*gconst24*gconst7*gconst8))+(((-0.025440912)*gconst1*gconst15*gconst26))+(((-0.025440912)*gconst10*gconst15*gconst17))+(((0.014348674368)*gconst13*gconst4*r02))+(((-0.142128)*gconst12*gconst21*gconst24*pz))+(((-0.564)*gconst13*gconst14*gconst18*r02))+(((-1.0)*gconst0*gconst13*gconst24*gconst27))+(((-1.0)*gconst14*gconst19*gconst23*gconst8))+(((-1.0)*gconst10*gconst11*gconst17*gconst25))+(((0.564)*gconst18*gconst23*gconst24*r02))+(((-0.025440912)*gconst13*gconst14*gconst9))+(((-0.564)*gconst18*gconst24*gconst3*r02))+(((-0.564)*gconst18*gconst23*gconst4*r02))+(((-1.0)*gconst10*gconst16*gconst17*gconst22))+(((0.080160192)*gconst13*gconst4*pz*r02))+((gconst10*gconst22*gconst27*gconst4))+(((-0.142128)*gconst15*gconst21*gconst6*pz))+(((0.142128)*gconst10*gconst12*gconst14*pz))+(((-0.007231731881472)*gconst10*gconst4*pz))+(((0.636192)*gconst13*gconst26*(r02*r02)))+(((-0.142128)*gconst18*gconst21*gconst24*pz))+((gconst13*gconst16*gconst26*gconst8))+(((0.080160192)*gconst10*gconst6*pz*r02))+(((-0.564)*gconst1*gconst12*gconst26*r02))+(((-1.0)*gconst19*gconst20*gconst23*gconst4))+(((0.080160192)*gconst1*gconst17*pz*r02))+((gconst11*gconst14*gconst19*gconst21))+(((-1.0)*gconst11*gconst21*gconst26*gconst5))+(((-1.0)*gconst10*gconst22*gconst26*gconst5))+(((-0.000647240003391744)*gconst1*gconst14))+(((-1.0)*gconst13*gconst14*gconst19*gconst20))+(((0.564)*gconst26*gconst3*gconst9*r02))+(((0.142128)*gconst18*gconst21*gconst4*pz))+(((-1.0)*gconst11*gconst16*gconst17*gconst21))+(((0.040400736768)*gconst10*gconst24*(pz*pz)))+((gconst13*gconst20*gconst25*gconst6))+(((-0.564)*gconst23*gconst26*gconst9*r02))+((gconst0*gconst16*gconst23*gconst26))+(((0.564)*gconst12*gconst21*gconst26*r02))+(((0.014348674368)*gconst1*gconst17*r02))+(((-1.0)*gconst1*gconst11*gconst25*gconst26))+(((-1.0)*gconst14*gconst20*gconst27*gconst3))+(((-1.0)*gconst13*gconst19*gconst24*gconst8))+(((0.025440912)*gconst1*gconst12*gconst24))+(((-0.142128)*gconst1*gconst15*gconst26*pz))+((gconst1*gconst11*gconst24*gconst27))+(((-0.142128)*gconst13*gconst14*gconst9*pz))+(((0.014348674368)*gconst10*gconst6*r02))+(((-0.142128)*gconst23*gconst4*gconst9*pz))+(((-0.564)*gconst15*gconst23*gconst26*r02))+((gconst17*gconst20*gconst23*gconst5))+(((0.025440912)*gconst1*gconst18*gconst24))+(((0.564)*gconst15*gconst23*gconst6*r02))+((gconst19*gconst21*gconst22*gconst4))+(((-0.318096)*gconst13*gconst6*(r02*r02)))+(((-1.0)*gconst19*gconst20*gconst24*gconst3))+(((-1.0)*gconst12*gconst14*gconst18*gconst21))+(((0.142128)*gconst1*gconst18*gconst24*pz))+(((0.025440912)*gconst10*gconst14*gconst18))+(((-1.0)*gconst13*gconst20*gconst27*gconst4))+((gconst1*gconst14*gconst22*gconst27))+(((-1.0)*gconst17*gconst21*gconst22*gconst5))+(((-1.0)*gconst1*gconst16*gconst22*gconst26))+((gconst10*gconst11*gconst19*gconst24))+(((0.564)*gconst23*gconst6*gconst9*r02))+(((-0.025440912)*gconst23*gconst4*gconst9))+((gconst11*gconst21*gconst27*gconst4))+(((-0.160320384)*gconst13*gconst24*pz*r02))+((gconst13*gconst20*gconst26*gconst5))+((gconst11*gconst21*gconst24*gconst7))+(((0.025440912)*gconst18*gconst21*gconst4))+(((-1.0)*gconst10*gconst22*gconst25*gconst6))+(((-1.0)*gconst1*gconst17*gconst22*gconst25))+(((0.025440912)*gconst12*gconst21*gconst4))+((gconst23*gconst26*gconst5*gconst8))+(((-0.000647240003391744)*gconst10*gconst4))+((gconst16*gconst20*gconst26*gconst3))+((gconst0*gconst13*gconst25*gconst26))+(((0.080160192)*gconst14*gconst3*pz*r02))+((gconst0*gconst17*gconst23*gconst25))+(((0.142128)*gconst1*gconst12*gconst24*pz))+(((-1.0)*gconst15*gconst17*gconst23*gconst9))+(((-0.00129448000678349)*gconst10*gconst24))+(((-0.142128)*gconst24*gconst3*gconst9*pz))+((gconst10*gconst22*gconst24*gconst7))+((gconst12*gconst15*gconst17*gconst21))+(((-1.0)*gconst11*gconst21*gconst25*gconst6))+(((-0.00129448000678349)*gconst14*gconst21))+(((-1.0)*gconst13*gconst14*gconst27*gconst8))+((gconst25*gconst26*gconst3*gconst8))+(((-1.0)*gconst16*gconst21*gconst22*gconst6))+(((0.142128)*gconst23*gconst24*gconst9*pz))+(((-1.0)*gconst10*gconst2*gconst25*gconst26))+(((-0.025440912)*gconst15*gconst21*gconst6))+((gconst16*gconst17*gconst23*gconst8))+((gconst1*gconst19*gconst22*gconst24))+((gconst13*gconst18*gconst24*gconst9))+((gconst14*gconst18*gconst23*gconst9))+(((-0.142128)*gconst10*gconst15*gconst17*pz))+(((-0.007231731881472)*gconst1*gconst14*pz)));
op[4]=((((0.025440912)*gconst12*gconst14*gconst21))+(((0.080160192)*gconst23*gconst24*pz*r02))+((gconst1*gconst11*gconst19*gconst24))+(((0.142128)*gconst10*gconst15*gconst26*pz))+(((0.025440912)*gconst10*gconst18*gconst24))+(((-1.0)*gconst12*gconst18*gconst21*gconst4))+((gconst17*gconst25*gconst3*gconst8))+(((0.040400736768)*gconst21*gconst4*(pz*pz)))+(((-0.160320384)*gconst23*gconst4*pz*r02))+(((0.025440912)*gconst1*gconst14*gconst18))+((gconst13*gconst16*gconst20*gconst6))+((gconst16*gconst17*gconst20*gconst3))+(((0.564)*gconst13*gconst15*gconst6*r02))+(((0.142128)*gconst15*gconst17*gconst21*pz))+(((0.142128)*gconst14*gconst23*gconst9*pz))+((gconst13*gconst25*gconst6*gconst8))+((gconst16*gconst23*gconst6*gconst8))+(((0.025440912)*gconst10*gconst18*gconst4))+(((-1.0)*gconst19*gconst24*gconst3*gconst8))+(((-0.564)*gconst15*gconst17*gconst23*r02))+(((-1.0)*gconst0*gconst23*gconst24*gconst7))+(((0.564)*gconst10*gconst12*gconst26*r02))+(((-1.0)*gconst10*gconst16*gconst2*gconst26))+(((-1.0)*gconst2*gconst21*gconst25*gconst6))+(((-0.160320384)*gconst13*gconst14*pz*r02))+(((0.025440912)*gconst10*gconst12*gconst24))+(((-1.0)*gconst1*gconst11*gconst16*gconst26))+((gconst20*gconst23*gconst5*gconst6))+(((-0.160320384)*gconst1*gconst26*pz*r02))+(((-0.142128)*gconst14*gconst18*gconst21*pz))+(((-0.025440912)*gconst13*gconst4*gconst9))+(((-1.0)*gconst2*gconst21*gconst26*gconst5))+(((0.007231731881472)*gconst21*gconst24*pz))+(((-1.0)*gconst14*gconst27*gconst3*gconst8))+((gconst10*gconst14*gconst2*gconst27))+(((0.142128)*gconst1*gconst14*gconst18*pz))+(((-1.0)*gconst14*gconst19*gconst20*gconst3))+((gconst10*gconst12*gconst15*gconst17))+((gconst1*gconst14*gconst19*gconst22))+(((-0.025440912)*gconst14*gconst23*gconst9))+(((-0.564)*gconst13*gconst18*gconst4*r02))+(((-1.0)*gconst0*gconst13*gconst14*gconst27))+(((0.142128)*gconst1*gconst12*gconst14*pz))+((gconst1*gconst12*gconst15*gconst26))+(((-0.142128)*gconst10*gconst12*gconst24*pz))+(((-1.0)*gconst15*gconst26*gconst3*gconst9))+((gconst13*gconst16*gconst17*gconst8))+(((-0.564)*gconst1*gconst12*gconst17*r02))+(((0.142128)*gconst10*gconst12*gconst4*pz))+(((-0.142128)*gconst14*gconst3*gconst9*pz))+((gconst13*gconst14*gconst18*gconst9))+(((-1.0)*gconst11*gconst17*gconst21*gconst5))+(((-0.020200368384)*gconst21*gconst24*(pz*pz)))+(((0.142128)*gconst10*gconst18*gconst4*pz))+((gconst18*gconst23*gconst4*gconst9))+(((-0.014348674368)*gconst21*gconst26*r02))+(((0.564)*gconst13*gconst18*gconst24*r02))+((gconst0*gconst23*gconst25*gconst6))+((gconst10*gconst11*gconst14*gconst19))+((gconst12*gconst15*gconst21*gconst6))+((gconst0*gconst13*gconst16*gconst26))+(((-0.025440912)*gconst1*gconst15*gconst17))+(((-0.00129448000678349)*gconst1*gconst24))+(((-1.0)*gconst10*gconst11*gconst16*gconst17))+(((-1.0)*gconst13*gconst14*gconst19*gconst8))+(((-0.160320384)*gconst24*gconst3*pz*r02))+((gconst1*gconst22*gconst27*gconst4))+(((-0.000647240003391744)*gconst21*gconst24))+(((-0.318096)*gconst23*gconst26*(r02*r02)))+(((0.040400736768)*gconst1*gconst24*(pz*pz)))+(((-0.025440912)*gconst10*gconst15*gconst26))+(((-1.0)*gconst10*gconst11*gconst25*gconst6))+(((0.564)*gconst12*gconst17*gconst21*r02))+(((-1.0)*gconst15*gconst23*gconst6*gconst9))+((gconst18*gconst24*gconst3*gconst9))+(((-1.0)*gconst20*gconst24*gconst3*gconst7))+(((-0.160320384)*gconst21*gconst6*pz*r02))+(((-0.007231731881472)*gconst1*gconst4*pz))+(((-0.160320384)*gconst10*gconst17*pz*r02))+(((0.080160192)*gconst1*gconst6*pz*r02))+(((0.564)*gconst15*gconst17*gconst3*r02))+((gconst0*gconst13*gconst17*gconst25))+((gconst14*gconst19*gconst2*gconst21))+(((-0.025440912)*gconst13*gconst24*gconst9))+(((-0.564)*gconst13*gconst26*gconst9*r02))+(((-1.0)*gconst19*gconst23*gconst4*gconst8))+(((0.636192)*gconst26*gconst3*(r02*r02)))+(((-1.0)*gconst1*gconst16*gconst17*gconst22))+(((-0.564)*gconst10*gconst12*gconst6*r02))+(((-1.0)*gconst1*gconst12*gconst18*gconst24))+(((0.040400736768)*gconst10*gconst14*(pz*pz)))+((gconst10*gconst19*gconst22*gconst4))+(((-1.0)*gconst10*gconst11*gconst26*gconst5))+(((-0.142128)*gconst10*gconst15*gconst6*pz))+(((-1.0)*gconst21*gconst22*gconst5*gconst6))+((gconst0*gconst23*gconst26*gconst5))+((gconst13*gconst17*gconst20*gconst5))+(((-0.142128)*gconst12*gconst14*gconst21*pz))+(((-1.0)*gconst0*gconst13*gconst19*gconst24))+((gconst10*gconst11*gconst27*gconst4))+(((-0.142128)*gconst13*gconst4*gconst9*pz))+(((-0.025440912)*gconst15*gconst17*gconst21))+(((0.080160192)*gconst3*gconst4*pz*r02))+(((-1.0)*gconst13*gconst27*gconst4*gconst8))+(((-1.0)*gconst13*gconst19*gconst20*gconst4))+((gconst2*gconst21*gconst27*gconst4))+(((0.025440912)*gconst1*gconst12*gconst14))+((gconst20*gconst25*gconst3*gconst6))+(((-1.0)*gconst13*gconst24*gconst7*gconst8))+(((-0.025440912)*gconst14*gconst3*gconst9))+(((-1.0)*gconst16*gconst17*gconst2*gconst21))+(((-1.0)*gconst0*gconst23*gconst27*gconst4))+((gconst2*gconst21*gconst24*gconst7))+(((-0.564)*gconst14*gconst18*gconst3*r02))+((gconst1*gconst2*gconst24*gconst27))+(((-1.0)*gconst20*gconst27*gconst3*gconst4))+(((-1.0)*gconst14*gconst23*gconst7*gconst8))+(((-0.142128)*gconst1*gconst15*gconst17*pz))+(((-0.00129448000678349)*gconst21*gconst4))+(((-1.0)*gconst1*gconst11*gconst17*gconst25))+(((0.142128)*gconst13*gconst24*gconst9*pz))+(((-1.0)*gconst0*gconst24*gconst27*gconst3))+(((-1.0)*gconst1*gconst22*gconst26*gconst5))+(((0.025440912)*gconst14*gconst18*gconst21))+((gconst10*gconst11*gconst24*gconst7))+(((-0.564)*gconst13*gconst15*gconst26*r02))+(((-1.0)*gconst10*gconst17*gconst22*gconst5))+(((-0.564)*gconst17*gconst23*gconst9*r02))+(((-1.0)*gconst10*gconst12*gconst14*gconst18))+((gconst17*gconst23*gconst5*gconst8))+(((0.564)*gconst13*gconst6*gconst9*r02))+(((0.636192)*gconst23*gconst6*(r02*r02)))+(((-1.0)*gconst11*gconst16*gconst21*gconst6))+(((-1.0)*gconst20*gconst23*gconst4*gconst7))+((gconst0*gconst25*gconst26*gconst3))+((gconst21*gconst22*gconst4*gconst7))+(((-1.0)*gconst10*gconst16*gconst22*gconst6))+((gconst0*gconst16*gconst17*gconst23))+(((-0.000647240003391744)*gconst1*gconst4))+(((-1.0)*gconst1*gconst2*gconst25*gconst26))+(((0.014348674368)*gconst3*gconst4*r02))+((gconst20*gconst26*gconst3*gconst5))+((gconst16*gconst26*gconst3*gconst8))+((gconst1*gconst22*gconst24*gconst7))+((gconst11*gconst14*gconst21*gconst7))+(((0.080160192)*gconst21*gconst26*pz*r02))+(((-1.0)*gconst1*gconst22*gconst25*gconst6))+(((-1.0)*gconst0*gconst14*gconst19*gconst23))+(((0.564)*gconst14*gconst18*gconst23*r02))+(((0.014348674368)*gconst1*gconst6*r02))+(((-0.00129448000678349)*gconst10*gconst14))+((gconst10*gconst19*gconst2*gconst24))+((gconst10*gconst14*gconst22*gconst7))+(((-1.0)*gconst13*gconst15*gconst17*gconst9))+(((-1.0)*gconst13*gconst14*gconst20*gconst7))+((gconst1*gconst11*gconst14*gconst27))+(((-0.020200368384)*gconst1*gconst4*(pz*pz)))+(((-0.025440912)*gconst10*gconst15*gconst6))+(((0.636192)*gconst13*gconst17*(r02*r02)))+(((-1.0)*gconst10*gconst17*gconst2*gconst25))+(((-0.318096)*gconst3*gconst6*(r02*r02)))+(((-0.014348674368)*gconst23*gconst24*r02))+(((0.564)*gconst17*gconst3*gconst9*r02))+(((0.025440912)*gconst10*gconst12*gconst4))+((gconst11*gconst19*gconst21*gconst4))+((gconst13*gconst26*gconst5*gconst8))+(((-0.142128)*gconst10*gconst18*gconst24*pz)));
op[5]=(((gconst0*gconst13*gconst26*gconst5))+(((0.142128)*gconst15*gconst21*gconst6*pz))+(((-1.0)*gconst0*gconst19*gconst23*gconst4))+(((-0.564)*gconst26*gconst3*gconst9*r02))+(((-1.0)*gconst17*gconst2*gconst21*gconst5))+(((-0.160320384)*gconst10*gconst6*pz*r02))+(((0.040400736768)*gconst1*gconst14*(pz*pz)))+(((-0.00129448000678349)*gconst10*gconst4))+(((-0.160320384)*gconst1*gconst17*pz*r02))+(((-0.160320384)*gconst13*gconst4*pz*r02))+((gconst17*gconst20*gconst3*gconst5))+(((0.564)*gconst18*gconst23*gconst4*r02))+(((-1.0)*gconst0*gconst14*gconst27*gconst3))+((gconst1*gconst11*gconst27*gconst4))+(((-1.0)*gconst1*gconst11*gconst16*gconst17))+(((-1.0)*gconst13*gconst15*gconst6*gconst9))+(((0.636192)*gconst17*gconst3*(r02*r02)))+(((-0.160320384)*gconst14*gconst3*pz*r02))+(((0.025440912)*gconst10*gconst12*gconst14))+((gconst14*gconst18*gconst3*gconst9))+(((0.564)*gconst12*gconst21*gconst6*r02))+((gconst10*gconst22*gconst4*gconst7))+(((-1.0)*gconst15*gconst17*gconst3*gconst9))+(((-0.564)*gconst13*gconst15*gconst17*r02))+(((-0.020200368384)*gconst10*gconst24*(pz*pz)))+(((0.636192)*gconst13*gconst6*(r02*r02)))+((gconst25*gconst3*gconst6*gconst8))+(((0.040400736768)*gconst10*gconst4*(pz*pz)))+(((-0.564)*gconst23*gconst6*gconst9*r02))+(((-0.142128)*gconst18*gconst21*gconst4*pz))+(((-1.0)*gconst10*gconst16*gconst17*gconst2))+(((-1.0)*gconst1*gconst16*gconst2*gconst26))+((gconst1*gconst12*gconst15*gconst17))+(((-0.025440912)*gconst24*gconst3*gconst9))+((gconst10*gconst12*gconst15*gconst6))+(((-1.0)*gconst13*gconst14*gconst7*gconst8))+(((-0.564)*gconst15*gconst26*gconst3*r02))+(((-1.0)*gconst0*gconst13*gconst14*gconst19))+(((-1.0)*gconst13*gconst20*gconst4*gconst7))+((gconst1*gconst11*gconst24*gconst7))+((gconst0*gconst16*gconst26*gconst3))+((gconst1*gconst19*gconst22*gconst4))+(((-0.142128)*gconst10*gconst14*gconst18*pz))+(((0.007231731881472)*gconst14*gconst21*pz))+((gconst13*gconst20*gconst5*gconst6))+(((-0.564)*gconst13*gconst17*gconst9*r02))+(((-1.0)*gconst1*gconst16*gconst22*gconst6))+((gconst0*gconst13*gconst16*gconst17))+(((-1.0)*gconst10*gconst11*gconst17*gconst5))+(((-0.025440912)*gconst1*gconst15*gconst26))+(((-1.0)*gconst14*gconst19*gconst3*gconst8))+(((-0.025440912)*gconst10*gconst15*gconst17))+(((-1.0)*gconst1*gconst11*gconst26*gconst5))+(((0.564)*gconst18*gconst24*gconst3*r02))+(((-1.0)*gconst19*gconst20*gconst3*gconst4))+((gconst13*gconst18*gconst4*gconst9))+(((0.080160192)*gconst14*gconst23*pz*r02))+(((-0.142128)*gconst10*gconst12*gconst14*pz))+(((-1.0)*gconst0*gconst19*gconst24*gconst3))+(((-1.0)*gconst10*gconst2*gconst26*gconst5))+(((-0.025440912)*gconst13*gconst14*gconst9))+(((-0.00129448000678349)*gconst1*gconst14))+((gconst10*gconst2*gconst24*gconst7))+(((0.080160192)*gconst13*gconst24*pz*r02))+(((-0.014348674368)*gconst10*gconst26*r02))+(((-1.0)*gconst13*gconst19*gconst4*gconst8))+(((0.142128)*gconst1*gconst18*gconst4*pz))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst10*gconst2*gconst25*gconst6))+(((-1.0)*gconst1*gconst11*gconst25*gconst6))+(((-0.564)*gconst15*gconst23*gconst6*r02))+(((-0.142128)*gconst1*gconst12*gconst24*pz))+(((-0.142128)*gconst3*gconst4*gconst9*pz))+(((-1.0)*gconst0*gconst14*gconst23*gconst7))+((gconst14*gconst2*gconst21*gconst7))+(((-0.000647240003391744)*gconst14*gconst21))+(((0.080160192)*gconst17*gconst21*pz*r02))+(((-1.0)*gconst0*gconst13*gconst27*gconst4))+(((0.142128)*gconst10*gconst15*gconst17*pz))+((gconst10*gconst14*gconst19*gconst2))+((gconst10*gconst11*gconst14*gconst7))+((gconst13*gconst16*gconst6*gconst8))+((gconst26*gconst3*gconst5*gconst8))+(((-1.0)*gconst16*gconst2*gconst21*gconst6))+((gconst23*gconst5*gconst6*gconst8))+(((0.142128)*gconst1*gconst12*gconst4*pz))+(((0.564)*gconst13*gconst14*gconst18*r02))+(((-0.000647240003391744)*gconst10*gconst24))+(((-0.014348674368)*gconst14*gconst23*r02))+(((-1.0)*gconst10*gconst11*gconst16*gconst6))+((gconst13*gconst17*gconst5*gconst8))+(((-0.142128)*gconst1*gconst18*gconst24*pz))+(((-1.0)*gconst1*gconst17*gconst2*gconst25))+(((-0.014348674368)*gconst17*gconst21*r02))+((gconst16*gconst20*gconst3*gconst6))+(((-1.0)*gconst10*gconst12*gconst18*gconst4))+(((0.142128)*gconst24*gconst3*gconst9*pz))+(((0.564)*gconst15*gconst3*gconst6*r02))+(((-1.0)*gconst1*gconst17*gconst22*gconst5))+(((0.142128)*gconst23*gconst4*gconst9*pz))+(((-1.0)*gconst24*gconst3*gconst7*gconst8))+(((-0.025440912)*gconst3*gconst4*gconst9))+(((0.025440912)*gconst1*gconst12*gconst24))+(((-0.020200368384)*gconst14*gconst21*(pz*pz)))+(((0.564)*gconst1*gconst12*gconst26*r02))+(((-1.0)*gconst1*gconst12*gconst14*gconst18))+(((-0.564)*gconst18*gconst3*gconst4*r02))+(((-0.142128)*gconst12*gconst21*gconst4*pz))+(((0.025440912)*gconst1*gconst12*gconst4))+(((0.025440912)*gconst1*gconst18*gconst24))+(((0.080160192)*gconst10*gconst26*pz*r02))+(((-0.142128)*gconst1*gconst15*gconst6*pz))+(((-0.564)*gconst1*gconst12*gconst6*r02))+(((0.025440912)*gconst10*gconst14*gconst18))+((gconst1*gconst14*gconst2*gconst27))+(((-1.0)*gconst23*gconst4*gconst7*gconst8))+((gconst0*gconst17*gconst23*gconst5))+(((-1.0)*gconst0*gconst13*gconst24*gconst7))+(((0.564)*gconst10*gconst12*gconst17*r02))+(((-0.025440912)*gconst23*gconst4*gconst9))+(((0.007231731881472)*gconst10*gconst24*pz))+(((0.025440912)*gconst1*gconst18*gconst4))+((gconst11*gconst21*gconst4*gconst7))+(((0.025440912)*gconst18*gconst21*gconst4))+((gconst16*gconst17*gconst3*gconst8))+(((-1.0)*gconst10*gconst22*gconst5*gconst6))+((gconst0*gconst16*gconst23*gconst6))+(((0.025440912)*gconst12*gconst21*gconst4))+(((0.142128)*gconst13*gconst14*gconst9*pz))+((gconst1*gconst11*gconst14*gconst19))+(((-0.318096)*gconst13*gconst26*(r02*r02)))+(((-0.025440912)*gconst1*gconst15*gconst6))+((gconst0*gconst13*gconst25*gconst6))+((gconst10*gconst11*gconst19*gconst4))+(((-1.0)*gconst11*gconst21*gconst5*gconst6))+(((-0.014348674368)*gconst13*gconst24*r02))+(((0.142128)*gconst1*gconst15*gconst26*pz))+((gconst10*gconst2*gconst27*gconst4))+((gconst1*gconst19*gconst2*gconst24))+(((0.564)*gconst3*gconst6*gconst9*r02))+((gconst1*gconst14*gconst22*gconst7))+(((-0.318096)*gconst17*gconst23*(r02*r02)))+((gconst0*gconst17*gconst25*gconst3))+(((-1.0)*gconst14*gconst20*gconst3*gconst7))+(((-0.025440912)*gconst15*gconst21*gconst6))+(((-1.0)*gconst27*gconst3*gconst4*gconst8)));
op[6]=(((gconst0*gconst23*gconst5*gconst6))+(((0.025440912)*gconst1*gconst14*gconst18))+(((-1.0)*gconst10*gconst17*gconst2*gconst5))+(((-1.0)*gconst1*gconst16*gconst17*gconst2))+(((-0.160320384)*gconst3*gconst4*pz*r02))+((gconst1*gconst2*gconst27*gconst4))+(((0.025440912)*gconst10*gconst18*gconst4))+(((0.142128)*gconst14*gconst3*gconst9*pz))+(((-0.00129448000678349)*gconst1*gconst4))+((gconst1*gconst14*gconst19*gconst2))+((gconst1*gconst2*gconst24*gconst7))+((gconst13*gconst5*gconst6*gconst8))+(((-0.020200368384)*gconst21*gconst4*(pz*pz)))+(((-0.025440912)*gconst13*gconst4*gconst9))+(((0.080160192)*gconst10*gconst17*pz*r02))+(((0.142128)*gconst10*gconst15*gconst6*pz))+((gconst0*gconst25*gconst3*gconst6))+(((-0.014348674368)*gconst1*gconst26*r02))+((gconst20*gconst3*gconst5*gconst6))+(((-0.160320384)*gconst1*gconst6*pz*r02))+(((0.564)*gconst13*gconst18*gconst4*r02))+(((-1.0)*gconst1*gconst22*gconst5*gconst6))+(((-0.142128)*gconst1*gconst14*gconst18*pz))+((gconst10*gconst14*gconst2*gconst7))+(((-0.318096)*gconst13*gconst17*(r02*r02)))+(((-0.025440912)*gconst1*gconst15*gconst17))+(((0.080160192)*gconst1*gconst26*pz*r02))+(((0.080160192)*gconst23*gconst4*pz*r02))+((gconst1*gconst22*gconst4*gconst7))+(((-1.0)*gconst2*gconst21*gconst5*gconst6))+((gconst10*gconst11*gconst4*gconst7))+(((0.080160192)*gconst24*gconst3*pz*r02))+(((-0.318096)*gconst23*gconst6*(r02*r02)))+(((-1.0)*gconst19*gconst3*gconst4*gconst8))+(((-0.142128)*gconst1*gconst12*gconst14*pz))+((gconst16*gconst3*gconst6*gconst8))+((gconst1*gconst11*gconst14*gconst7))+(((0.564)*gconst14*gconst18*gconst3*r02))+(((-0.318096)*gconst26*gconst3*(r02*r02)))+(((0.040400736768)*gconst1*gconst4*(pz*pz)))+((gconst0*gconst13*gconst16*gconst6))+(((-0.014348674368)*gconst23*gconst4*r02))+((gconst2*gconst21*gconst4*gconst7))+((gconst0*gconst13*gconst17*gconst5))+(((-0.000647240003391744)*gconst10*gconst14))+(((-1.0)*gconst13*gconst4*gconst7*gconst8))+(((-0.000647240003391744)*gconst1*gconst24))+(((0.564)*gconst1*gconst12*gconst17*r02))+((gconst17*gconst3*gconst5*gconst8))+(((-0.014348674368)*gconst24*gconst3*r02))+(((-0.564)*gconst13*gconst15*gconst6*r02))+(((0.025440912)*gconst1*gconst12*gconst14))+(((-1.0)*gconst0*gconst27*gconst3*gconst4))+(((-0.020200368384)*gconst10*gconst14*(pz*pz)))+(((-0.025440912)*gconst14*gconst3*gconst9))+(((-0.142128)*gconst10*gconst18*gconst4*pz))+(((0.080160192)*gconst21*gconst6*pz*r02))+(((0.564)*gconst10*gconst12*gconst6*r02))+(((-1.0)*gconst10*gconst16*gconst2*gconst6))+(((-0.000647240003391744)*gconst21*gconst4))+(((-1.0)*gconst20*gconst3*gconst4*gconst7))+(((0.142128)*gconst1*gconst15*gconst17*pz))+(((-0.020200368384)*gconst1*gconst24*(pz*pz)))+((gconst0*gconst26*gconst3*gconst5))+(((0.636192)*gconst3*gconst6*(r02*r02)))+(((-0.014348674368)*gconst21*gconst6*r02))+((gconst1*gconst12*gconst15*gconst6))+(((-0.014348674368)*gconst10*gconst17*r02))+(((-1.0)*gconst1*gconst2*gconst26*gconst5))+(((0.007231731881472)*gconst1*gconst24*pz))+(((-1.0)*gconst1*gconst12*gconst18*gconst4))+(((-1.0)*gconst0*gconst14*gconst19*gconst3))+(((0.007231731881472)*gconst10*gconst14*pz))+(((0.007231731881472)*gconst21*gconst4*pz))+(((-1.0)*gconst10*gconst11*gconst5*gconst6))+((gconst1*gconst11*gconst19*gconst4))+((gconst0*gconst16*gconst17*gconst3))+(((-0.564)*gconst17*gconst3*gconst9*r02))+(((-1.0)*gconst1*gconst2*gconst25*gconst6))+(((-0.564)*gconst15*gconst17*gconst3*r02))+(((-1.0)*gconst14*gconst3*gconst7*gconst8))+(((-1.0)*gconst0*gconst13*gconst19*gconst4))+(((-1.0)*gconst1*gconst11*gconst16*gconst6))+(((-1.0)*gconst0*gconst24*gconst3*gconst7))+(((0.142128)*gconst13*gconst4*gconst9*pz))+(((-0.142128)*gconst10*gconst12*gconst4*pz))+(((-1.0)*gconst0*gconst13*gconst14*gconst7))+(((-0.564)*gconst13*gconst6*gconst9*r02))+(((0.080160192)*gconst13*gconst14*pz*r02))+(((-0.025440912)*gconst10*gconst15*gconst6))+(((-1.0)*gconst1*gconst11*gconst17*gconst5))+(((-0.014348674368)*gconst13*gconst14*r02))+(((-1.0)*gconst15*gconst3*gconst6*gconst9))+(((-1.0)*gconst0*gconst23*gconst4*gconst7))+(((0.025440912)*gconst10*gconst12*gconst4))+((gconst10*gconst19*gconst2*gconst4))+((gconst18*gconst3*gconst4*gconst9)));
op[7]=((((-1.0)*gconst4*x85))+(((-1.0)*x128*x88))+((pz*x101*x108))+(((-1.0)*x113*x129))+((gconst12*x100*x96))+((pz*x101*x91))+(((-1.0)*gconst11*x130))+((x112*x122))+((x112*x118))+((x117*x86))+(((-1.0)*gconst18*x86*x92))+(((-1.0)*x127*x91))+(((-1.0)*x112*x125))+(((-1.0)*x115*x125))+((x113*x116))+((x97*x98))+(((-0.025440912)*gconst15*x100))+(((-1.0)*x105*x87))+((gconst18*x106*x96))+(((-1.0)*gconst15*x107*x96))+(((-1.0)*x106*x114))+(((-1.0)*x87*x91))+((gconst11*gconst7*x86))+((gconst9*x106*x92))+(((-1.0)*gconst9*x107*x96))+(((-1.0)*x87*x88))+((gconst5*gconst8*x107))+((gconst13*x101*x97))+(((-1.0)*x121*x129))+((x115*x122))+(((-0.000647240003391744)*x112))+(((-1.0)*gconst19*x131))+((x116*x121))+(((-1.0)*x108*x87))+(((-1.0)*x108*x128))+((gconst15*x100*x92))+(((-1.0)*gconst16*gconst2*x100))+(((-1.0)*x105*x127))+((gconst0*gconst16*x107))+(((-1.0)*x126*x86))+(((-1.0)*gconst7*gconst8*x106))+((x104*x86))+((pz*x101*x88))+((gconst19*gconst2*x86)));
op[8]=((((-1.0)*x125*x86))+(((-1.0)*x100*x128))+((pz*x100*x101))+(((-0.000647240003391744)*x86))+(((-1.0)*x106*x127))+((gconst3*x101*x97))+(((-1.0)*x107*x129))+((x118*x86))+(((-1.0)*x100*x87))+((x122*x86))+(((-1.0)*x106*x87))+((x107*x116)));
polyroots8(op,zeror,numroots);
IkReal j13array[8], cj13array[8], sj13array[8], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[8]={true,true,true,true,true,true,true,true};
_nj13 = 8;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
sj17array[0]=((((-1.0)*cj12*r01))+((r00*sj12)));
if( sj17array[0] >= -1-IKFAST_SINCOS_THRESH && sj17array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j17valid[0] = j17valid[1] = true;
    j17array[0] = IKasin(sj17array[0]);
    cj17array[0] = IKcos(j17array[0]);
    sj17array[1] = sj17array[0];
    j17array[1] = j17array[0] > 0 ? (IKPI-j17array[0]) : (-IKPI-j17array[0]);
    cj17array[1] = -cj17array[0];
}
else if( isnan(sj17array[0]) )
{
    // probably any value will work
    j17valid[0] = true;
    cj17array[0] = 1; sj17array[0] = 0; j17array[0] = 0;
}
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal j15eval[2];
j15eval[0]=cj17;
j15eval[1]=IKsign(cj17);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
j15eval[0]=cj17;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=cj17;
j15eval[1]=sj17;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
IkReal x134=(cj12*px);
IkReal x135=((0.745806596870427)*cj13);
IkReal x136=((5.03771248452099)*sj13);
IkReal x137=(py*sj12);
cj15array[0]=((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((-1.0)*x135*x137))+(((-1.0)*x134*x135))+(((-1.0)*x134*x136))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x136*x137))+(((14.0718225824609)*(py*py)))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz))));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
IkReal x138=py*py;
IkReal x139=px*px;
IkReal x140=pz*pz;
IkReal x141=((0.358)*r01);
IkReal x142=(px*sj13);
IkReal x143=(r00*sj12);
IkReal x144=((0.053)*sj13);
IkReal x145=(cj12*cj13);
IkReal x146=(py*r02);
IkReal x147=(cj12*r01);
IkReal x148=((2.0)*pz);
IkReal x149=(r02*sj12);
IkReal x150=((0.358)*cj13);
IkReal x151=(py*r00);
IkReal x152=((0.053)*cj13);
IkReal x153=((2.0)*px*py);
IkReal x154=((1.0)*x139);
evalcond[0]=((-0.0954)+((x140*x143))+(((2.0)*cj12*px*x151))+((px*r01*x152))+(((-1.0)*x143*x154))+(((0.03274325)*x143))+(((-1.0)*x151*x152))+(((-1.0)*r01*sj12*x153))+((x138*x143))+((x138*x147))+(((-0.053)*x142*x149))+(((-0.358)*x145*x146))+((x141*x142))+((cj12*x146*x148))+(((-1.0)*x147*x154))+(((-1.0)*pz*x144*x147))+((pz*x143*x144))+(((-0.03274325)*x147))+((px*x149*x150))+(((-1.0)*px*x148*x149))+(((-0.071064)*(IKcos(j15))))+(((-1.0)*pz*x143*x150))+(((-0.358)*sj13*x151))+(((-1.0)*x140*x147))+((cj12*x144*x146))+((pz*x141*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj17=1.0;
cj17=0;
j17=1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x155=(cj12*px);
IkReal x156=((70500.0)*cj13);
IkReal x157=((31500.0)*cj15);
IkReal x158=(py*sj12);
IkReal x159=((31500.0)*sj15);
IkReal x160=(cj13*pz);
IkReal x161=(pz*sj13);
IkReal x162=((70500.0)*sj13);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*x157*x160))+(((-1.0)*x158*x162))+(((-1.0)*pz*x156))+(((-1.0)*cj13*x158*x159))+(((5638.5)*cj15))+(((-1.0)*cj13*x155*x159))+(((-1.0)*x155*x162))+((x159*x161))+(((-1.0)*sj13*x155*x157))+(((-1.0)*sj13*x157*x158))+(((834.75)*sj15)))),IkReal(((-1868.25)+(((-1.0)*x157*x161))+(((-1.0)*x159*x160))+(((5638.5)*sj15))+(((-1.0)*sj13*x158*x159))+((cj13*x157*x158))+((x155*x156))+(((-834.75)*cj15))+((x156*x158))+(((-70500.0)*x161))+(((-1.0)*sj13*x155*x159))+((cj13*x155*x157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x163.value)))+(x164.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x165=IKsin(j14);
IkReal x166=IKcos(j14);
IkReal x167=(sj12*sj13);
IkReal x168=(px*r02);
IkReal x169=((1.0)*px);
IkReal x170=(cj12*cj13);
IkReal x171=((0.126)*cj15);
IkReal x172=(cj13*r00);
IkReal x173=(r01*sj13);
IkReal x174=((0.126)*sj15);
IkReal x175=(cj12*r01);
IkReal x176=(py*r02);
IkReal x177=(r00*sj12);
IkReal x178=(cj12*sj13);
IkReal x179=((1.0)*pz);
IkReal x180=((0.282)*x165);
IkReal x181=((0.282)*x166);
IkReal x182=((1.0)*cj13*sj12);
IkReal x183=(x165*x171);
IkReal x184=(x166*x174);
IkReal x185=(x165*x174);
IkReal x186=(x166*x171);
IkReal x187=(x186+x181);
IkReal x188=(x184+x180+x183);
evalcond[0]=((-0.179)+((py*x167))+((cj13*pz))+x188+((px*x178)));
evalcond[1]=((0.0265)+(((-1.0)*py*x182))+(((-1.0)*x185))+((pz*sj13))+x187+(((-1.0)*x169*x170)));
evalcond[2]=((((-1.0)*r01*x170*x179))+((pz*sj12*x172))+(((-0.179)*x177))+(((-1.0)*x168*x182))+x188+((py*r00*sj13))+((x170*x176))+(((0.179)*x175))+(((-1.0)*x169*x173)));
evalcond[3]=((((-1.0)*cj13*r01*x169))+((py*x172))+((cj12*pz*x173))+(((-1.0)*r00*x167*x179))+(((-1.0)*x187))+(((-0.0265)*x177))+x185+((x167*x168))+(((0.0265)*x175))+(((-1.0)*x176*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
IkReal x189=(cj12*px);
IkReal x190=((0.745806596870427)*cj13);
IkReal x191=((5.03771248452099)*sj13);
IkReal x192=(py*sj12);
cj15array[0]=((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((-1.0)*x191*x192))+(((-1.0)*x189*x191))+(((-1.0)*x189*x190))+(((-1.0)*x190*x192))+(((0.745806596870427)*pz*sj13))+(((14.0718225824609)*(py*py)))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz))));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
IkReal x193=py*py;
IkReal x194=px*px;
IkReal x195=pz*pz;
IkReal x196=((0.358)*r01);
IkReal x197=(px*sj13);
IkReal x198=(r00*sj12);
IkReal x199=((0.053)*sj13);
IkReal x200=(cj12*cj13);
IkReal x201=(py*r02);
IkReal x202=(cj12*r01);
IkReal x203=((2.0)*pz);
IkReal x204=(r02*sj12);
IkReal x205=((0.358)*cj13);
IkReal x206=(py*r00);
IkReal x207=((0.053)*cj13);
IkReal x208=((2.0)*px*py);
IkReal x209=((1.0)*x194);
evalcond[0]=((0.0954)+(((-1.0)*pz*x199*x202))+(((-0.358)*sj13*x206))+((cj12*x201*x203))+((x193*x198))+(((-1.0)*x202*x209))+(((-1.0)*r01*sj12*x208))+((pz*x198*x199))+((x196*x197))+(((-1.0)*x206*x207))+((pz*x196*x200))+((x195*x198))+(((0.03274325)*x198))+(((-1.0)*x198*x209))+(((-0.053)*x197*x204))+(((-1.0)*px*x203*x204))+(((0.071064)*(IKcos(j15))))+(((2.0)*cj12*px*x206))+((cj12*x199*x201))+(((-1.0)*x195*x202))+(((-0.358)*x200*x201))+(((-1.0)*pz*x198*x205))+((px*r01*x207))+((x193*x202))+(((-0.03274325)*x202))+((px*x204*x205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x210=(cj12*px);
IkReal x211=((70500.0)*cj13);
IkReal x212=((31500.0)*cj15);
IkReal x213=(py*sj12);
IkReal x214=((31500.0)*sj15);
IkReal x215=(cj13*pz);
IkReal x216=(pz*sj13);
IkReal x217=((70500.0)*sj13);
CheckValue<IkReal> x218=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x218.valid){
continue;
}
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*pz*x211))+((x214*x216))+(((-1.0)*cj13*x210*x214))+(((-1.0)*cj13*x213*x214))+(((-1.0)*x210*x217))+(((5638.5)*cj15))+(((-1.0)*x213*x217))+(((-1.0)*sj13*x212*x213))+(((-1.0)*sj13*x210*x212))+(((-1.0)*x212*x215))+(((834.75)*sj15)))),IkReal(((-1868.25)+((x210*x211))+(((5638.5)*sj15))+((x211*x213))+((cj13*x210*x212))+((cj13*x212*x213))+(((-1.0)*sj13*x213*x214))+(((-834.75)*cj15))+(((-70500.0)*x216))+(((-1.0)*sj13*x210*x214))+(((-1.0)*x214*x215))+(((-1.0)*x212*x216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x218.value)))+(x219.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x220=IKsin(j14);
IkReal x221=IKcos(j14);
IkReal x222=(sj12*sj13);
IkReal x223=(px*r02);
IkReal x224=((1.0)*px);
IkReal x225=(cj12*cj13);
IkReal x226=((0.126)*cj15);
IkReal x227=(cj13*r00);
IkReal x228=(r01*sj13);
IkReal x229=((0.126)*sj15);
IkReal x230=(cj12*r01);
IkReal x231=(py*r02);
IkReal x232=(r00*sj12);
IkReal x233=(cj12*sj13);
IkReal x234=((1.0)*pz);
IkReal x235=((0.282)*x220);
IkReal x236=((0.282)*x221);
IkReal x237=((1.0)*cj13*sj12);
IkReal x238=(x220*x226);
IkReal x239=(x221*x229);
IkReal x240=(x221*x226);
IkReal x241=(x220*x229);
IkReal x242=(x236+x240);
IkReal x243=(x238+x239+x235);
evalcond[0]=((-0.179)+((cj13*pz))+((px*x233))+((py*x222))+x243);
evalcond[1]=((0.0265)+(((-1.0)*x224*x225))+(((-1.0)*py*x237))+((pz*sj13))+x242+(((-1.0)*x241)));
evalcond[2]=((((-1.0)*x224*x228))+((py*r00*sj13))+(((-1.0)*r01*x225*x234))+((x225*x231))+(((-0.179)*x232))+(((-1.0)*x223*x237))+(((-1.0)*x243))+((pz*sj12*x227))+(((0.179)*x230)));
evalcond[3]=(((x222*x223))+(((-0.0265)*x232))+((py*x227))+(((-1.0)*r00*x222*x234))+((cj12*pz*x228))+(((-1.0)*cj13*r01*x224))+x242+(((-1.0)*x231*x233))+(((0.0265)*x230))+(((-1.0)*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x244=((5.03771248452099)*sj13);
IkReal x245=(py*sj12);
IkReal x246=(cj12*px);
IkReal x247=(cj12*r00);
IkReal x248=((0.0939716312056738)*cj13);
IkReal x249=((0.745806596870427)*cj13);
IkReal x250=((0.634751773049645)*sj13);
IkReal x251=(r01*sj12);
if( IKabs(((((-0.634751773049645)*cj13*r02))+(((3.54609929078014)*pz*r02))+(((-1.0)*x250*x251))+(((0.0939716312056738)*r02*sj13))+(((3.54609929078014)*py*r01))+(((3.54609929078014)*px*r00))+(((-1.0)*x247*x250))+(((-1.0)*x248*x251))+(((-1.0)*x247*x248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((14.0718225824609)*(py*py)))+(((-1.0)*x245*x249))+(((-5.03771248452099)*cj13*pz))+(((-1.0)*x246*x249))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x244*x246))+(((-1.0)*x244*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.634751773049645)*cj13*r02))+(((3.54609929078014)*pz*r02))+(((-1.0)*x250*x251))+(((0.0939716312056738)*r02*sj13))+(((3.54609929078014)*py*r01))+(((3.54609929078014)*px*r00))+(((-1.0)*x247*x250))+(((-1.0)*x248*x251))+(((-1.0)*x247*x248))))+IKsqr(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((14.0718225824609)*(py*py)))+(((-1.0)*x245*x249))+(((-5.03771248452099)*cj13*pz))+(((-1.0)*x246*x249))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x244*x246))+(((-1.0)*x244*x245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-0.634751773049645)*cj13*r02))+(((3.54609929078014)*pz*r02))+(((-1.0)*x250*x251))+(((0.0939716312056738)*r02*sj13))+(((3.54609929078014)*py*r01))+(((3.54609929078014)*px*r00))+(((-1.0)*x247*x250))+(((-1.0)*x248*x251))+(((-1.0)*x247*x248))), ((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((14.0718225824609)*(py*py)))+(((-1.0)*x245*x249))+(((-5.03771248452099)*cj13*pz))+(((-1.0)*x246*x249))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x244*x246))+(((-1.0)*x244*x245))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x252=IKcos(j15);
IkReal x253=(cj13*r02);
IkReal x254=(r01*sj12);
IkReal x255=((0.179)*cj13);
IkReal x256=(cj12*px);
IkReal x257=((0.053)*cj13);
IkReal x258=((1.0)*r02);
IkReal x259=(py*sj12);
IkReal x260=((0.0265)*sj13);
IkReal x261=((0.179)*sj13);
IkReal x262=(cj12*r00);
IkReal x263=((0.358)*sj13);
IkReal x264=((0.0265)*cj13);
evalcond[0]=((((0.282)*(IKsin(j15))))+(((-1.0)*px*r00))+((x262*x264))+((x254*x264))+((x254*x261))+(((-1.0)*pz*x258))+(((-1.0)*r02*x260))+(((-1.0)*py*r01))+((x261*x262))+(((0.179)*x253)));
evalcond[1]=((0.06265675)+(((-1.0)*(px*px)))+(((0.071064)*x252))+(((-0.053)*pz*sj13))+((x259*x263))+((x256*x257))+((x257*x259))+(((-1.0)*(pz*pz)))+((x256*x263))+(((0.358)*cj13*pz))+(((-1.0)*(py*py))));
evalcond[2]=((0.126)+(((-1.0)*x255*x262))+((x260*x262))+((pz*x254))+(((0.0265)*x253))+((r02*x261))+(((-1.0)*x256*x258))+((x254*x260))+(((-1.0)*x254*x255))+(((0.282)*x252))+((pz*x262))+(((-1.0)*x258*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x265=(cj15*sj13);
IkReal x266=(cj12*r00);
IkReal x267=(r01*sj12);
IkReal x268=(cj13*cj15);
IkReal x269=(cj13*sj15);
IkReal x270=((1.0)*r02);
IkReal x271=((1.0)*sj13*sj15);
if( IKabs((((x267*x268))+((x266*x268))+(((-1.0)*x269*x270))+(((-1.0)*x265*x270))+(((-1.0)*x266*x271))+(((-1.0)*x267*x271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x267*x269))+((x266*x269))+((r02*x268))+((x265*x266))+((x265*x267))+(((-1.0)*sj13*sj15*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x267*x268))+((x266*x268))+(((-1.0)*x269*x270))+(((-1.0)*x265*x270))+(((-1.0)*x266*x271))+(((-1.0)*x267*x271))))+IKsqr((((x267*x269))+((x266*x269))+((r02*x268))+((x265*x266))+((x265*x267))+(((-1.0)*sj13*sj15*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((x267*x268))+((x266*x268))+(((-1.0)*x269*x270))+(((-1.0)*x265*x270))+(((-1.0)*x266*x271))+(((-1.0)*x267*x271))), (((x267*x269))+((x266*x269))+((r02*x268))+((x265*x266))+((x265*x267))+(((-1.0)*sj13*sj15*x270))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x272=IKsin(j14);
IkReal x273=IKcos(j14);
IkReal x274=px*px;
IkReal x275=py*py;
IkReal x276=pz*pz;
IkReal x277=(r01*sj13);
IkReal x278=((0.063648)*sj15);
IkReal x279=(cj12*px);
IkReal x280=((2.0)*py);
IkReal x281=((1.0)*cj13);
IkReal x282=(r01*sj12);
IkReal x283=(sj12*sj13);
IkReal x284=(px*r00);
IkReal x285=(cj13*pz);
IkReal x286=(pz*r02);
IkReal x287=((0.053)*py);
IkReal x288=(r02*sj12);
IkReal x289=(cj12*r00);
IkReal x290=((0.009487)*r02);
IkReal x291=((0.358)*pz);
IkReal x292=((0.03133875)*sj13);
IkReal x293=((0.358)*py);
IkReal x294=((0.053)*pz);
IkReal x295=(r02*sj13);
IkReal x296=((0.03133875)*cj13);
IkReal x297=((0.009487)*cj13);
IkReal x298=(sj12*x274);
IkReal x299=(cj15*x272);
IkReal x300=(cj13*x275);
IkReal x301=(sj15*x273);
IkReal x302=(sj13*x274);
IkReal x303=(sj13*x275);
IkReal x304=(sj15*x272);
IkReal x305=(cj15*x273);
IkReal x306=(cj13*x274);
IkReal x307=((2.0)*pz*x284);
evalcond[0]=((((-1.0)*x305))+x304+((sj12*x277))+((sj13*x289))+((cj13*r02)));
evalcond[1]=((((-1.0)*x281*x282))+(((-1.0)*x281*x289))+x301+x299+x295);
evalcond[2]=((-0.179)+(((0.282)*x272))+(((0.126)*x299))+(((0.126)*x301))+x285+((sj13*x279))+((py*x283)));
evalcond[3]=((0.0265)+(((0.282)*x273))+((pz*sj13))+(((-0.126)*x304))+(((0.126)*x305))+(((-1.0)*py*sj12*x281))+(((-1.0)*x279*x281)));
evalcond[4]=((((-1.0)*x272*x278))+((x289*x294))+(((-1.0)*sj12*x275*x277))+(((-1.0)*x289*x302))+(((-1.0)*x287*x288))+(((-1.0)*x289*x292))+(((-1.0)*x289*x297))+((sj13*x290))+((x277*x298))+(((-1.0)*x280*x283*x286))+(((-1.0)*x280*x283*x284))+((x282*x294))+(((-0.071064)*x273))+(((-2.0)*sj13*x279*x286))+((r02*x306))+((r02*x300))+((sj13*x276*x289))+(((-1.0)*r02*x296))+(((-0.053)*r02*x279))+(((0.358)*x286))+(((0.358)*x284))+(((-0.03133875)*sj12*x277))+((r01*x293))+(((-1.0)*x277*x279*x280))+((x289*x303))+(((-1.0)*r02*x276*x281))+(((-1.0)*r01*x280*x285))+((sj12*x276*x277))+(((-0.0954)*x305))+(((-1.0)*x282*x297))+(((-2.0)*x284*x285)));
evalcond[5]=((((-1.0)*x273*x278))+((x289*x291))+((x280*x285*x288))+(((-1.0)*pz*x277*x280))+(((-1.0)*x276*x295))+((x275*x295))+(((-1.0)*x289*x296))+((cj13*sj12*x280*x284))+(((-0.358)*r02*x279))+(((-0.053)*x284))+(((-0.053)*x286))+((x282*x291))+(((-1.0)*x274*x281*x282))+((cj13*r01*x279*x280))+((x282*x300))+((cj13*x290))+(((0.071064)*x272))+(((-1.0)*r01*x287))+(((-1.0)*sj13*x307))+(((2.0)*r02*x279*x285))+((x289*x306))+(((-1.0)*x288*x293))+((x274*x295))+(((-1.0)*x275*x281*x289))+((r02*x292))+(((-1.0)*x276*x281*x289))+(((-1.0)*x276*x281*x282))+(((-1.0)*x282*x296))+(((0.009487)*sj13*x289))+(((0.0954)*x299))+(((0.009487)*sj12*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x308=((5.03771248452099)*sj13);
IkReal x309=(py*sj12);
IkReal x310=(cj12*px);
IkReal x311=(cj12*r00);
IkReal x312=((0.0939716312056738)*cj13);
IkReal x313=((0.745806596870427)*cj13);
IkReal x314=((0.634751773049645)*sj13);
IkReal x315=(r01*sj12);
if( IKabs((((x312*x315))+(((-3.54609929078014)*px*r00))+(((-3.54609929078014)*pz*r02))+(((-3.54609929078014)*py*r01))+(((0.634751773049645)*cj13*r02))+(((-0.0939716312056738)*r02*sj13))+((x311*x312))+((x311*x314))+((x314*x315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((-1.0)*x310*x313))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x308*x309))+(((-1.0)*x308*x310))+(((14.0718225824609)*(py*py)))+(((-1.0)*x309*x313))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x312*x315))+(((-3.54609929078014)*px*r00))+(((-3.54609929078014)*pz*r02))+(((-3.54609929078014)*py*r01))+(((0.634751773049645)*cj13*r02))+(((-0.0939716312056738)*r02*sj13))+((x311*x312))+((x311*x314))+((x314*x315))))+IKsqr(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((-1.0)*x310*x313))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x308*x309))+(((-1.0)*x308*x310))+(((14.0718225824609)*(py*py)))+(((-1.0)*x309*x313))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((((x312*x315))+(((-3.54609929078014)*px*r00))+(((-3.54609929078014)*pz*r02))+(((-3.54609929078014)*py*r01))+(((0.634751773049645)*cj13*r02))+(((-0.0939716312056738)*r02*sj13))+((x311*x312))+((x311*x314))+((x314*x315))), ((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((-1.0)*x310*x313))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x308*x309))+(((-1.0)*x308*x310))+(((14.0718225824609)*(py*py)))+(((-1.0)*x309*x313))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x316=IKcos(j15);
IkReal x317=(cj13*r02);
IkReal x318=(r01*sj12);
IkReal x319=((0.179)*cj13);
IkReal x320=(cj12*px);
IkReal x321=((0.053)*cj13);
IkReal x322=((1.0)*r02);
IkReal x323=(py*sj12);
IkReal x324=((0.0265)*sj13);
IkReal x325=((0.179)*sj13);
IkReal x326=(cj12*r00);
IkReal x327=((0.358)*sj13);
IkReal x328=((0.0265)*cj13);
evalcond[0]=(((x318*x325))+((x318*x328))+((x326*x328))+((x325*x326))+(((0.179)*x317))+(((-1.0)*px*r00))+(((-1.0)*py*r01))+(((-1.0)*r02*x324))+(((-1.0)*pz*x322))+(((-0.282)*(IKsin(j15)))));
evalcond[1]=((0.06265675)+(((-1.0)*(px*px)))+(((-0.053)*pz*sj13))+((x323*x327))+(((0.071064)*x316))+((x320*x321))+((x320*x327))+(((-1.0)*(pz*pz)))+(((0.358)*cj13*pz))+(((-1.0)*(py*py)))+((x321*x323)));
evalcond[2]=((-0.126)+((x318*x324))+((r02*x325))+(((-1.0)*x318*x319))+((pz*x326))+(((-1.0)*x322*x323))+(((-1.0)*x320*x322))+(((0.0265)*x317))+((x324*x326))+(((-1.0)*x319*x326))+((pz*x318))+(((-0.282)*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x329=(cj12*r00);
IkReal x330=(r02*sj13);
IkReal x331=((1.0)*cj15);
IkReal x332=(cj13*sj15);
IkReal x333=(cj13*x331);
IkReal x334=(r01*sj12*sj13);
IkReal x335=((1.0)*cj13*r01*sj12);
if( IKabs((((sj13*sj15*x329))+(((-1.0)*r01*sj12*x333))+(((-1.0)*x329*x333))+((sj15*x334))+((r02*x332))+((cj15*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj12*x332))+(((-1.0)*x329*x332))+((sj15*x330))+(((-1.0)*r02*x333))+(((-1.0)*x331*x334))+(((-1.0)*sj13*x329*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj13*sj15*x329))+(((-1.0)*r01*sj12*x333))+(((-1.0)*x329*x333))+((sj15*x334))+((r02*x332))+((cj15*x330))))+IKsqr(((((-1.0)*r01*sj12*x332))+(((-1.0)*x329*x332))+((sj15*x330))+(((-1.0)*r02*x333))+(((-1.0)*x331*x334))+(((-1.0)*sj13*x329*x331))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((sj13*sj15*x329))+(((-1.0)*r01*sj12*x333))+(((-1.0)*x329*x333))+((sj15*x334))+((r02*x332))+((cj15*x330))), ((((-1.0)*r01*sj12*x332))+(((-1.0)*x329*x332))+((sj15*x330))+(((-1.0)*r02*x333))+(((-1.0)*x331*x334))+(((-1.0)*sj13*x329*x331))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x336=IKsin(j14);
IkReal x337=IKcos(j14);
IkReal x338=px*px;
IkReal x339=py*py;
IkReal x340=pz*pz;
IkReal x341=(cj12*px);
IkReal x342=((1.0)*cj13);
IkReal x343=((0.126)*cj15);
IkReal x344=(r01*sj12);
IkReal x345=(py*sj12);
IkReal x346=(px*r00);
IkReal x347=(cj12*r00);
IkReal x348=((0.358)*pz);
IkReal x349=((0.009487)*r02);
IkReal x350=(py*r01);
IkReal x351=((0.053)*r02);
IkReal x352=((2.0)*cj13);
IkReal x353=((0.03133875)*sj13);
IkReal x354=((0.358)*r02);
IkReal x355=((0.053)*pz);
IkReal x356=(r02*sj13);
IkReal x357=((0.03133875)*cj13);
IkReal x358=((0.009487)*cj13);
IkReal x359=(sj13*x344);
IkReal x360=(sj15*x336);
IkReal x361=(cj13*x339);
IkReal x362=(sj15*x337);
IkReal x363=(cj15*x337);
IkReal x364=((2.0)*pz*r02);
IkReal x365=(sj13*x338);
IkReal x366=(sj13*x339);
IkReal x367=(cj15*x336);
IkReal x368=(cj13*x338);
IkReal x369=((2.0)*sj13*x350);
IkReal x370=((2.0)*pz*x346);
evalcond[0]=(((sj13*x347))+(((-1.0)*x360))+x359+x363+((cj13*r02)));
evalcond[1]=((((-1.0)*x362))+(((-1.0)*x367))+x356+(((-1.0)*x342*x347))+(((-1.0)*x342*x344)));
evalcond[2]=((-0.179)+((sj13*x341))+((sj13*x345))+((cj13*pz))+((x336*x343))+(((0.282)*x336))+(((0.126)*x362)));
evalcond[3]=((0.0265)+(((-0.126)*x360))+((x337*x343))+((pz*sj13))+(((-1.0)*x341*x342))+(((0.282)*x337))+(((-1.0)*x342*x345)));
evalcond[4]=((((-1.0)*pz*x350*x352))+((sj13*x349))+((x338*x359))+(((-1.0)*r02*x340*x342))+(((0.358)*x346))+(((-1.0)*x345*x351))+(((0.358)*x350))+(((-1.0)*x347*x365))+(((0.0954)*x363))+((x344*x355))+(((-1.0)*x341*x351))+(((0.063648)*x360))+((x347*x366))+(((-2.0)*pz*x341*x356))+(((-1.0)*x339*x359))+(((-1.0)*x344*x358))+(((-1.0)*x344*x353))+((x347*x355))+((r02*x348))+((sj13*x340*x347))+((x340*x359))+(((0.071064)*x337))+(((-1.0)*x347*x358))+(((-1.0)*x347*x353))+(((-1.0)*pz*x346*x352))+(((-2.0)*pz*x345*x356))+(((-1.0)*r02*x357))+(((-1.0)*x341*x369))+(((-2.0)*sj13*x345*x346))+((r02*x368))+((r02*x361)));
evalcond[5]=((((-1.0)*x338*x342*x344))+(((0.009487)*x359))+((pz*r02*x345*x352))+((x338*x356))+(((0.009487)*sj13*x347))+(((-1.0)*x345*x354))+(((-0.071064)*x336))+((x345*x346*x352))+((cj13*x349))+(((-0.0954)*x367))+(((-0.053)*x350))+((x344*x361))+(((-1.0)*x341*x354))+(((0.063648)*x362))+((x347*x368))+((x344*x348))+((pz*r02*x341*x352))+(((-0.053)*x346))+(((-1.0)*x344*x357))+(((-1.0)*x340*x342*x347))+(((-1.0)*x340*x342*x344))+(((-1.0)*x339*x342*x347))+((x347*x348))+(((-1.0)*x340*x356))+(((-1.0)*x347*x357))+((x341*x350*x352))+(((-1.0)*pz*x369))+(((-1.0)*sj13*x370))+((x339*x356))+((r02*x353))+(((-1.0)*pz*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x371=py*py;
IkReal x372=pz*pz;
IkReal x373=px*px;
IkReal x374=(cj12*sj13);
IkReal x375=(py*r02);
IkReal x376=(px*r00);
IkReal x377=(cj13*r00);
IkReal x378=((250000.0)*cj12);
IkReal x379=(pz*r02);
IkReal x380=(px*r01);
IkReal x381=((250000.0)*sj12);
IkReal x382=(r00*sj12);
IkReal x383=((44750.0)*pz);
IkReal x384=(r01*sj12);
IkReal x385=((6625.0)*pz);
IkReal x386=(cj13*r02);
IkReal x387=(r02*sj13);
IkReal x388=(px*sj12);
IkReal x389=(cj12*r01);
IkReal x390=((44750.0)*sj13);
IkReal x391=((125000.0)*x382);
IkReal x392=((125000.0)*x389);
CheckValue<IkReal> x393=IKPowWithIntegerCheck(cj17,-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394=IKPowWithIntegerCheck(sj17,-1);
if(!x394.valid){
continue;
}
if( IKabs(((0.00709219858156028)*(x393.value)*(((((-13.25)*cj13*x384))+(((-89.5)*r00*x374))+(((500.0)*py*r01))+(((-89.5)*x386))+(((500.0)*x379))+(((500.0)*x376))+(((13.25)*x387))+(((-89.5)*sj13*x384))+(((-13.25)*cj12*x377)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000112574580659687)*(x394.value)*((((x371*x392))+((x371*x391))+((py*x376*x378))+(((6625.0)*x374*x375))+(((-4092.90625)*x389))+((cj13*x383*x389))+(((6625.0)*cj13*x380))+((x380*x390))+(((-1.0)*py*x380*x381))+(((-1.0)*x372*x392))+((sj13*x382*x385))+(((-1.0)*px*x379*x381))+(((-1.0)*r01*x374*x385))+((pz*x375*x378))+(((-11925.0)*sj17))+(((-1.0)*x373*x392))+(((-1.0)*x373*x391))+(((4092.90625)*x382))+((x372*x391))+(((-1.0)*sj12*x377*x383))+(((-6625.0)*py*x377))+(((44750.0)*x386*x388))+(((-6625.0)*x387*x388))+(((-44750.0)*cj12*cj13*x375))+(((-1.0)*py*r00*x390)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00709219858156028)*(x393.value)*(((((-13.25)*cj13*x384))+(((-89.5)*r00*x374))+(((500.0)*py*r01))+(((-89.5)*x386))+(((500.0)*x379))+(((500.0)*x376))+(((13.25)*x387))+(((-89.5)*sj13*x384))+(((-13.25)*cj12*x377))))))+IKsqr(((0.000112574580659687)*(x394.value)*((((x371*x392))+((x371*x391))+((py*x376*x378))+(((6625.0)*x374*x375))+(((-4092.90625)*x389))+((cj13*x383*x389))+(((6625.0)*cj13*x380))+((x380*x390))+(((-1.0)*py*x380*x381))+(((-1.0)*x372*x392))+((sj13*x382*x385))+(((-1.0)*px*x379*x381))+(((-1.0)*r01*x374*x385))+((pz*x375*x378))+(((-11925.0)*sj17))+(((-1.0)*x373*x392))+(((-1.0)*x373*x391))+(((4092.90625)*x382))+((x372*x391))+(((-1.0)*sj12*x377*x383))+(((-6625.0)*py*x377))+(((44750.0)*x386*x388))+(((-6625.0)*x387*x388))+(((-44750.0)*cj12*cj13*x375))+(((-1.0)*py*r00*x390))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((0.00709219858156028)*(x393.value)*(((((-13.25)*cj13*x384))+(((-89.5)*r00*x374))+(((500.0)*py*r01))+(((-89.5)*x386))+(((500.0)*x379))+(((500.0)*x376))+(((13.25)*x387))+(((-89.5)*sj13*x384))+(((-13.25)*cj12*x377))))), ((0.000112574580659687)*(x394.value)*((((x371*x392))+((x371*x391))+((py*x376*x378))+(((6625.0)*x374*x375))+(((-4092.90625)*x389))+((cj13*x383*x389))+(((6625.0)*cj13*x380))+((x380*x390))+(((-1.0)*py*x380*x381))+(((-1.0)*x372*x392))+((sj13*x382*x385))+(((-1.0)*px*x379*x381))+(((-1.0)*r01*x374*x385))+((pz*x375*x378))+(((-11925.0)*sj17))+(((-1.0)*x373*x392))+(((-1.0)*x373*x391))+(((4092.90625)*x382))+((x372*x391))+(((-1.0)*sj12*x377*x383))+(((-6625.0)*py*x377))+(((44750.0)*x386*x388))+(((-6625.0)*x387*x388))+(((-44750.0)*cj12*cj13*x375))+(((-1.0)*py*r00*x390))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x395=IKcos(j15);
IkReal x396=pz*pz;
IkReal x397=py*py;
IkReal x398=px*px;
IkReal x399=(cj13*r02);
IkReal x400=(px*r00);
IkReal x401=(pz*r02);
IkReal x402=(px*r01);
IkReal x403=(py*sj12);
IkReal x404=(cj13*sj12);
IkReal x405=(pz*r00);
IkReal x406=((0.358)*sj13);
IkReal x407=((0.179)*r01);
IkReal x408=(pz*r01);
IkReal x409=(cj12*cj13);
IkReal x410=((0.053)*px);
IkReal x411=((0.053)*sj13);
IkReal x412=(cj12*py);
IkReal x413=(cj12*r01);
IkReal x414=((1.0)*r02);
IkReal x415=(cj12*px);
IkReal x416=((0.053)*cj13);
IkReal x417=(py*r00);
IkReal x418=((0.0265)*sj13);
IkReal x419=(sj12*sj13);
IkReal x420=((0.179)*r00);
IkReal x421=(px*sj12);
IkReal x422=(r00*sj12);
IkReal x423=((0.282)*cj17);
IkReal x424=((2.0)*x412);
IkReal x425=((1.0)*x396);
IkReal x426=((1.0)*x398);
IkReal x427=((0.071064)*x395);
evalcond[0]=(((cj12*sj13*x420))+((x407*x419))+(((0.0265)*r01*x404))+(((0.0265)*r00*x409))+(((-1.0)*r02*x418))+(((0.179)*x399))+(((-1.0)*py*r01))+(((-1.0)*x401))+(((-1.0)*x400))+((x423*(IKsin(j15)))));
evalcond[1]=((0.06265675)+(((-1.0)*x397))+(((-1.0)*x425))+(((-1.0)*x426))+((x409*x410))+((x406*x415))+x427+(((0.358)*cj13*pz))+((x403*x416))+(((-1.0)*pz*x411))+((x403*x406)));
evalcond[2]=(((r01*sj12*x418))+((sj12*x408))+((x395*x423))+(((-1.0)*x403*x414))+(((0.126)*cj17))+((cj12*r00*x418))+(((-1.0)*x404*x407))+(((0.179)*r02*sj13))+(((-1.0)*x409*x420))+(((0.0265)*x399))+((cj12*x405))+(((-1.0)*x414*x415)));
evalcond[3]=((((-1.0)*x422*x426))+(((0.358)*x399*x421))+(((-2.0)*x401*x421))+(((-0.358)*x399*x412))+(((-1.0)*x406*x417))+((sj12*x405*x411))+(((-1.0)*cj12*x408*x411))+((r02*x411*x412))+(((-0.0954)*sj17))+(((-0.03274325)*x413))+(((-1.0)*sj17*x427))+(((-1.0)*x416*x417))+(((0.358)*x408*x409))+(((-2.0)*x402*x403))+(((0.03274325)*x422))+((x401*x424))+(((-1.0)*x413*x426))+(((-1.0)*x413*x425))+((x402*x416))+(((-0.358)*x404*x405))+((x402*x406))+((x396*x422))+(((-1.0)*r02*x410*x419))+((x397*x413))+((x400*x424))+((x397*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=IKsign(cj17);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x428=(cj15*cj17);
j14eval[0]=(cj17+(((2.23809523809524)*x428)));
j14eval[1]=IKsign(((((63.0)*cj17))+(((141.0)*x428))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=sj15;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=1.0;
cj17=0;
j17=1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x429=(cj12*px);
IkReal x430=((70500.0)*cj13);
IkReal x431=((31500.0)*cj15);
IkReal x432=(py*sj12);
IkReal x433=((31500.0)*sj15);
IkReal x434=(cj13*pz);
IkReal x435=(pz*sj13);
IkReal x436=((70500.0)*sj13);
CheckValue<IkReal> x437=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x437.valid){
continue;
}
CheckValue<IkReal> x438 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*cj13*x432*x433))+(((-1.0)*x431*x434))+(((-1.0)*x432*x436))+(((-1.0)*sj13*x429*x431))+(((-1.0)*x429*x436))+(((5638.5)*cj15))+(((-1.0)*pz*x430))+((x433*x435))+(((-1.0)*sj13*x431*x432))+(((-1.0)*cj13*x429*x433))+(((834.75)*sj15)))),IkReal(((-1868.25)+((x429*x430))+(((-70500.0)*x435))+(((-1.0)*x433*x434))+((cj13*x431*x432))+(((-1.0)*x431*x435))+(((5638.5)*sj15))+((cj13*x429*x431))+(((-1.0)*sj13*x429*x433))+(((-834.75)*cj15))+((x430*x432))+(((-1.0)*sj13*x432*x433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x438.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x437.value)))+(x438.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x439=IKsin(j14);
IkReal x440=IKcos(j14);
IkReal x441=(sj12*sj13);
IkReal x442=(px*r02);
IkReal x443=((1.0)*px);
IkReal x444=(cj12*cj13);
IkReal x445=((0.126)*cj15);
IkReal x446=(cj13*r00);
IkReal x447=(r01*sj13);
IkReal x448=((0.126)*sj15);
IkReal x449=(cj12*r01);
IkReal x450=(py*r02);
IkReal x451=(r00*sj12);
IkReal x452=(cj12*sj13);
IkReal x453=((1.0)*pz);
IkReal x454=((0.282)*x439);
IkReal x455=((0.282)*x440);
IkReal x456=((1.0)*cj13*sj12);
IkReal x457=(x439*x445);
IkReal x458=(x440*x448);
IkReal x459=(x439*x448);
IkReal x460=(x440*x445);
IkReal x461=(x455+x460);
IkReal x462=(x458+x457+x454);
evalcond[0]=((-0.179)+((cj13*pz))+((py*x441))+x462+((px*x452)));
evalcond[1]=((0.0265)+((pz*sj13))+(((-1.0)*x443*x444))+(((-1.0)*x459))+(((-1.0)*py*x456))+x461);
evalcond[2]=((((0.179)*x449))+((py*r00*sj13))+(((-1.0)*x443*x447))+((pz*sj12*x446))+(((-1.0)*x442*x456))+x462+(((-0.179)*x451))+((x444*x450))+(((-1.0)*r01*x444*x453)));
evalcond[3]=((((-1.0)*cj13*r01*x443))+((py*x446))+(((-1.0)*x461))+(((-1.0)*x450*x452))+((x441*x442))+((cj12*pz*x447))+x459+(((-1.0)*r00*x441*x453))+(((-0.0265)*x451))+(((0.0265)*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x463=(cj12*px);
IkReal x464=((70500.0)*cj13);
IkReal x465=((31500.0)*cj15);
IkReal x466=(py*sj12);
IkReal x467=((31500.0)*sj15);
IkReal x468=(cj13*pz);
IkReal x469=(pz*sj13);
IkReal x470=((70500.0)*sj13);
CheckValue<IkReal> x471=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*x465*x468))+(((-1.0)*sj13*x465*x466))+(((-1.0)*cj13*x466*x467))+(((-1.0)*cj13*x463*x467))+(((-1.0)*pz*x464))+((x467*x469))+(((5638.5)*cj15))+(((-1.0)*x466*x470))+(((-1.0)*sj13*x463*x465))+(((834.75)*sj15))+(((-1.0)*x463*x470)))),IkReal(((-1868.25)+(((-1.0)*x465*x469))+((cj13*x465*x466))+(((5638.5)*sj15))+((x463*x464))+(((-70500.0)*x469))+((cj13*x463*x465))+(((-834.75)*cj15))+(((-1.0)*x467*x468))+((x464*x466))+(((-1.0)*sj13*x466*x467))+(((-1.0)*sj13*x463*x467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x472.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x471.value)))+(x472.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x473=IKsin(j14);
IkReal x474=IKcos(j14);
IkReal x475=(sj12*sj13);
IkReal x476=(px*r02);
IkReal x477=((1.0)*px);
IkReal x478=(cj12*cj13);
IkReal x479=((0.126)*cj15);
IkReal x480=(cj13*r00);
IkReal x481=(r01*sj13);
IkReal x482=((0.126)*sj15);
IkReal x483=(cj12*r01);
IkReal x484=(py*r02);
IkReal x485=(r00*sj12);
IkReal x486=(cj12*sj13);
IkReal x487=((1.0)*pz);
IkReal x488=((0.282)*x473);
IkReal x489=((0.282)*x474);
IkReal x490=((1.0)*cj13*sj12);
IkReal x491=(x473*x479);
IkReal x492=(x474*x482);
IkReal x493=(x474*x479);
IkReal x494=(x473*x482);
IkReal x495=(x489+x493);
IkReal x496=(x488+x492+x491);
evalcond[0]=((-0.179)+((cj13*pz))+((px*x486))+x496+((py*x475)));
evalcond[1]=((0.0265)+(((-1.0)*x494))+(((-1.0)*x477*x478))+((pz*sj13))+x495+(((-1.0)*py*x490)));
evalcond[2]=((((-1.0)*r01*x478*x487))+(((-1.0)*x496))+((py*r00*sj13))+((x478*x484))+(((-0.179)*x485))+(((-1.0)*x477*x481))+((pz*sj12*x480))+(((0.179)*x483))+(((-1.0)*x476*x490)));
evalcond[3]=((((-1.0)*r00*x475*x487))+(((-1.0)*x494))+(((-0.0265)*x485))+((py*x480))+((cj12*pz*x481))+(((0.0265)*x483))+(((-1.0)*x484*x486))+x495+(((-1.0)*cj13*r01*x477))+((x475*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x497=((2.45098039215686)*sj13);
IkReal x498=(py*sj12);
IkReal x499=(cj12*px);
IkReal x500=((2.45098039215686)*cj13);
if( IKabs(((0.438725490196078)+(((-1.0)*pz*x500))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0649509803921569)+((x498*x500))+(((-1.0)*pz*x497))+((x499*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.438725490196078)+(((-1.0)*pz*x500))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499))))+IKsqr(((-0.0649509803921569)+((x498*x500))+(((-1.0)*pz*x497))+((x499*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.438725490196078)+(((-1.0)*pz*x500))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499))), ((-0.0649509803921569)+((x498*x500))+(((-1.0)*pz*x497))+((x499*x500))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x501=IKsin(j14);
IkReal x502=IKcos(j14);
IkReal x503=px*px;
IkReal x504=py*py;
IkReal x505=pz*pz;
IkReal x506=(cj13*px);
IkReal x507=((1.0)*cj12);
IkReal x508=((2.0)*pz);
IkReal x509=(sj12*sj13);
IkReal x510=(px*r02);
IkReal x511=(cj12*sj13);
IkReal x512=(cj13*r02);
IkReal x513=(py*sj12);
IkReal x514=(cj12*py);
IkReal x515=((2.0)*r01);
IkReal x516=(r02*sj13);
IkReal x517=((0.358)*cj12);
IkReal x518=((0.03133875)*r00);
IkReal x519=((0.053)*cj12);
IkReal x520=(r01*sj12);
IkReal x521=((0.009487)*cj13);
IkReal x522=(px*py);
IkReal x523=(pz*r00);
IkReal x524=(py*r01);
IkReal x525=((2.0)*r00);
IkReal x526=(r00*sj13);
IkReal x527=((0.358)*pz);
IkReal x528=(cj12*cj13);
IkReal x529=((0.166464)*cj17);
IkReal x530=(cj12*r01);
IkReal x531=(r00*sj12);
IkReal x532=(cj13*r00);
IkReal x533=((1.0)*cj13);
IkReal x534=(px*r00);
IkReal x535=((1.0)*r01);
IkReal x536=(cj13*pz);
IkReal x537=((0.053)*r02);
IkReal x538=((0.408)*x501);
IkReal x539=((1.0)*x505);
IkReal x540=((0.408)*x502);
evalcond[0]=(((r01*x509))+(((-1.0)*cj17*x502))+x512+((r00*x511)));
evalcond[1]=((-0.179)+((px*x511))+x536+x538+((py*x509)));
evalcond[2]=((((-1.0)*x520*x533))+((cj17*x501))+(((-1.0)*x507*x532))+x516);
evalcond[3]=((0.0265)+(((-1.0)*x506*x507))+((pz*sj13))+x540+(((-1.0)*x513*x533)));
evalcond[4]=((((-1.0)*r02*sj12*x506))+(((-0.179)*x531))+(((-1.0)*r01*x507*x536))+((x512*x514))+(((-1.0)*px*sj13*x535))+((cj13*sj12*x523))+(((0.179)*x530))+((sj17*x538))+((py*x526)));
evalcond[5]=((((-1.0)*sj17*x540))+((pz*r01*x511))+(((0.0265)*x530))+(((-1.0)*x509*x523))+(((-1.0)*x506*x535))+(((-1.0)*py*x507*x516))+((x509*x510))+(((-0.0265)*x531))+((py*x532)));
evalcond[6]=((((-1.0)*x511*x518))+(((-1.0)*cj13*x508*x524))+((r02*x527))+((r01*x503*x509))+((x519*x523))+(((-1.0)*x503*x507*x526))+(((-1.0)*x520*x521))+((r01*x505*x509))+((r00*x504*x511))+(((-0.03133875)*x512))+(((-1.0)*x509*x522*x525))+((r00*x505*x511))+((x503*x512))+(((-1.0)*r00*x506*x508))+(((-1.0)*x508*x510*x511))+((x504*x512))+(((-0.03133875)*r01*x509))+(((0.358)*x524))+(((0.358)*x534))+(((-1.0)*x502*x529))+(((-1.0)*x511*x515*x522))+(((-1.0)*py*r02*x508*x509))+(((0.053)*pz*x520))+(((0.009487)*x516))+(((-1.0)*cj12*r00*x521))+(((-1.0)*x512*x539))+(((-1.0)*x513*x537))+(((-1.0)*x504*x509*x535))+(((-1.0)*x510*x519)));
evalcond[7]=(((x508*x512*x513))+(((-1.0)*x505*x520*x533))+(((-0.358)*r02*x513))+((x503*x516))+((x506*x513*x525))+((cj13*x504*x520))+((x504*x516))+(((-0.03133875)*cj13*x520))+(((-1.0)*sj13*x508*x524))+((r00*x503*x528))+(((0.03133875)*x516))+((x517*x523))+(((-1.0)*px*x508*x526))+(((-1.0)*x504*x507*x532))+(((-1.0)*x518*x528))+(((-1.0)*x503*x520*x533))+(((0.009487)*x512))+(((0.009487)*r01*x509))+((x520*x527))+(((-1.0)*x516*x539))+((x501*x529))+((cj12*r02*x506*x508))+(((-0.053)*x534))+(((-1.0)*pz*x537))+(((-0.053)*x524))+(((-1.0)*x505*x507*x532))+(((-1.0)*x510*x517))+(((0.009487)*r00*x511))+((x506*x514*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x541=((6.41025641025641)*sj13);
IkReal x542=((6.41025641025641)*cj13);
IkReal x543=(py*sj12);
IkReal x544=(cj12*px);
if( IKabs(((1.1474358974359)+(((-1.0)*x541*x543))+(((-1.0)*x541*x544))+(((-1.0)*pz*x542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.169871794871795)+((x542*x543))+((x542*x544))+(((-1.0)*pz*x541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.1474358974359)+(((-1.0)*x541*x543))+(((-1.0)*x541*x544))+(((-1.0)*pz*x542))))+IKsqr(((-0.169871794871795)+((x542*x543))+((x542*x544))+(((-1.0)*pz*x541))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((1.1474358974359)+(((-1.0)*x541*x543))+(((-1.0)*x541*x544))+(((-1.0)*pz*x542))), ((-0.169871794871795)+((x542*x543))+((x542*x544))+(((-1.0)*pz*x541))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x545=IKsin(j14);
IkReal x546=IKcos(j14);
IkReal x547=px*px;
IkReal x548=py*py;
IkReal x549=pz*pz;
IkReal x550=(cj13*px);
IkReal x551=((1.0)*cj12);
IkReal x552=((2.0)*pz);
IkReal x553=(sj12*sj13);
IkReal x554=(px*r02);
IkReal x555=(cj12*sj13);
IkReal x556=(cj13*r02);
IkReal x557=(py*sj12);
IkReal x558=(cj12*py);
IkReal x559=((2.0)*r01);
IkReal x560=(r02*sj13);
IkReal x561=((0.358)*cj12);
IkReal x562=((0.03133875)*r00);
IkReal x563=((0.053)*cj12);
IkReal x564=(r01*sj12);
IkReal x565=((0.009487)*cj13);
IkReal x566=(px*py);
IkReal x567=(pz*r00);
IkReal x568=(py*r01);
IkReal x569=((2.0)*r00);
IkReal x570=(r00*sj13);
IkReal x571=((0.358)*pz);
IkReal x572=(cj12*cj13);
IkReal x573=(cj12*r01);
IkReal x574=(r00*sj12);
IkReal x575=(cj13*r00);
IkReal x576=((0.053)*r02);
IkReal x577=((1.0)*cj13);
IkReal x578=(px*r00);
IkReal x579=((1.0)*r01);
IkReal x580=(cj13*pz);
IkReal x581=((0.156)*x545);
IkReal x582=((1.0)*x549);
IkReal x583=((0.156)*x546);
IkReal x584=(cj17*x545);
IkReal x585=(cj17*x546);
evalcond[0]=(x556+x585+((r01*x553))+((r00*x555)));
evalcond[1]=((-0.179)+((py*x553))+((px*x555))+x580+x581);
evalcond[2]=((((-1.0)*x584))+(((-1.0)*x564*x577))+x560+(((-1.0)*x551*x575)));
evalcond[3]=((0.0265)+(((-1.0)*x557*x577))+(((-1.0)*x550*x551))+((pz*sj13))+x583);
evalcond[4]=(((py*x570))+(((0.179)*x573))+(((-1.0)*r01*x551*x580))+((sj17*x581))+(((-1.0)*r02*sj12*x550))+((x556*x558))+(((-1.0)*px*sj13*x579))+(((-0.179)*x574))+((cj13*sj12*x567)));
evalcond[5]=((((-1.0)*py*x551*x560))+((pz*r01*x555))+(((-1.0)*sj17*x583))+((py*x575))+(((-1.0)*x553*x567))+(((0.0265)*x573))+(((-0.0265)*x574))+(((-1.0)*x550*x579))+((x553*x554)));
evalcond[6]=(((x548*x556))+(((-0.03133875)*x556))+(((-1.0)*x564*x565))+(((-1.0)*x557*x576))+(((0.358)*x568))+((r01*x547*x553))+(((0.053)*pz*x564))+(((-1.0)*cj12*r00*x565))+(((-1.0)*x553*x566*x569))+(((0.358)*x578))+(((-1.0)*x556*x582))+((r02*x571))+((x563*x567))+(((-1.0)*x555*x562))+((r00*x548*x555))+(((-1.0)*x547*x551*x570))+((x547*x556))+(((-1.0)*x555*x559*x566))+(((-1.0)*x552*x554*x555))+(((-1.0)*x554*x563))+(((-1.0)*cj13*x552*x568))+(((-0.03133875)*r01*x553))+(((-1.0)*r00*x550*x552))+(((0.009487)*x560))+(((-1.0)*x548*x553*x579))+((r00*x549*x555))+(((0.024336)*x585))+((r01*x549*x553))+(((-1.0)*py*r02*x552*x553)));
evalcond[7]=((((-0.358)*r02*x557))+((x550*x557*x569))+(((-0.03133875)*cj13*x564))+((x550*x558*x559))+(((-1.0)*x560*x582))+((x552*x556*x557))+(((0.009487)*r01*x553))+(((0.009487)*x556))+((cj12*r02*x550*x552))+(((-1.0)*sj13*x552*x568))+(((-0.053)*x568))+(((0.009487)*r00*x555))+((x561*x567))+(((-1.0)*x549*x551*x575))+(((-1.0)*x549*x564*x577))+(((-0.053)*x578))+((x548*x560))+(((-1.0)*pz*x576))+((x564*x571))+(((-1.0)*x554*x561))+(((0.03133875)*x560))+(((-1.0)*x547*x564*x577))+((cj13*x548*x564))+((r00*x547*x572))+(((-1.0)*px*x552*x570))+(((-0.024336)*x584))+((x547*x560))+(((-1.0)*x562*x572))+(((-1.0)*x548*x551*x575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((0.446808510638298)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x586=((3.54609928841723)*sj13);
IkReal x587=((1.77104279821767)*sj13);
IkReal x588=(cj12*px);
IkReal x589=(py*sj12);
IkReal x590=((1.77104279821767)*cj13);
IkReal x591=((3.54609928841723)*cj13);
if( IKabs(((0.681684406779452)+(((-1.0)*x588*x590))+(((-1.0)*x589*x590))+(((-1.0)*x586*x588))+(((-1.0)*x586*x589))+(((-1.0)*pz*x591))+((pz*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.223045029737906)+(((-1.0)*pz*x586))+(((-1.0)*x587*x589))+(((-1.0)*x587*x588))+(((-1.0)*pz*x590))+((x589*x591))+((x588*x591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.681684406779452)+(((-1.0)*x588*x590))+(((-1.0)*x589*x590))+(((-1.0)*x586*x588))+(((-1.0)*x586*x589))+(((-1.0)*pz*x591))+((pz*x587))))+IKsqr(((0.223045029737906)+(((-1.0)*pz*x586))+(((-1.0)*x587*x589))+(((-1.0)*x587*x588))+(((-1.0)*pz*x590))+((x589*x591))+((x588*x591))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.681684406779452)+(((-1.0)*x588*x590))+(((-1.0)*x589*x590))+(((-1.0)*x586*x588))+(((-1.0)*x586*x589))+(((-1.0)*pz*x591))+((pz*x587))), ((0.223045029737906)+(((-1.0)*pz*x586))+(((-1.0)*x587*x589))+(((-1.0)*x587*x588))+(((-1.0)*pz*x590))+((x589*x591))+((x588*x591))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x592=IKsin(j14);
IkReal x593=IKcos(j14);
IkReal x594=px*px;
IkReal x595=py*py;
IkReal x596=pz*pz;
IkReal x597=(cj13*px);
IkReal x598=((1.0)*cj12);
IkReal x599=((2.0)*pz);
IkReal x600=(sj12*sj13);
IkReal x601=(px*r02);
IkReal x602=(cj12*sj13);
IkReal x603=(cj13*r02);
IkReal x604=(py*sj12);
IkReal x605=(cj12*py);
IkReal x606=((2.0)*r01);
IkReal x607=(r02*sj13);
IkReal x608=((0.358)*cj12);
IkReal x609=((0.03133875)*r00);
IkReal x610=((0.053)*cj12);
IkReal x611=(r01*sj12);
IkReal x612=((0.009487)*cj13);
IkReal x613=(px*py);
IkReal x614=(pz*r00);
IkReal x615=(py*r01);
IkReal x616=((2.0)*r00);
IkReal x617=(r00*sj13);
IkReal x618=((0.358)*pz);
IkReal x619=(cj12*cj13);
IkReal x620=(cj12*r01);
IkReal x621=(r00*sj12);
IkReal x622=(cj13*r00);
IkReal x623=((1.0)*cj13);
IkReal x624=(px*r00);
IkReal x625=((1.0)*r01);
IkReal x626=(cj13*pz);
IkReal x627=((0.053)*r02);
IkReal x628=(cj17*x592);
IkReal x629=((0.11272333212)*x592);
IkReal x630=(cj17*x593);
IkReal x631=((1.0)*x596);
IkReal x632=(sj17*x593);
IkReal x633=((0.225702127707488)*x592);
evalcond[0]=((-0.179)+((px*x602))+(((0.11272333212)*x593))+x626+x633+((py*x600)));
evalcond[1]=(((r00*x602))+(((0.89462962)*x628))+x603+(((0.446808510258035)*x630))+((r01*x600)));
evalcond[2]=((0.0265)+(((-1.0)*x604*x623))+(((-1.0)*x597*x598))+(((0.225702127707488)*x593))+(((-1.0)*x629))+((pz*sj13)));
evalcond[3]=((((0.89462962)*x630))+(((-1.0)*x611*x623))+(((-0.446808510258035)*x628))+x607+(((-1.0)*x598*x622)));
evalcond[4]=((((-1.0)*r01*x598*x626))+((cj13*sj12*x614))+(((-0.179)*x621))+((x603*x605))+(((-1.0)*px*sj13*x625))+((py*x617))+(((0.11272333212)*x632))+(((0.179)*x620))+((sj17*x633))+(((-1.0)*r02*sj12*x597)));
evalcond[5]=(((py*x622))+(((-1.0)*py*x598*x607))+((x600*x601))+(((-0.0265)*x621))+((pz*r01*x602))+(((-1.0)*x597*x625))+((sj17*x629))+(((-0.225702127707488)*x632))+(((0.0265)*x620))+(((-1.0)*x600*x614)));
evalcond[6]=((((-1.0)*x602*x609))+(((-1.0)*x604*x627))+(((0.009487)*x607))+(((-1.0)*x594*x598*x617))+((x594*x603))+((x595*x603))+(((-1.0)*py*r02*x599*x600))+((r01*x596*x600))+(((0.358)*x615))+(((-1.0)*x611*x612))+(((-1.0)*cj12*r00*x612))+((r00*x595*x602))+((r00*x596*x602))+(((-1.0)*r00*x597*x599))+(((-0.03133875)*r01*x600))+(((-0.0284384681213834)*x630))+(((-1.0)*x595*x600*x625))+(((-1.0)*x599*x601*x602))+((r02*x618))+((r01*x594*x600))+(((-1.0)*x603*x631))+(((-1.0)*x602*x606*x613))+(((-1.0)*cj13*x599*x615))+(((0.358)*x624))+(((-0.03133875)*x603))+(((0.053)*pz*x611))+((x610*x614))+(((-1.0)*x600*x613*x616))+(((-0.05694138605376)*x628))+(((-1.0)*x601*x610)));
evalcond[7]=((((-1.0)*pz*x627))+(((0.0284384681213834)*x628))+(((0.009487)*x603))+((x594*x607))+((x597*x605*x606))+((x608*x614))+((x595*x607))+(((-1.0)*x609*x619))+(((0.009487)*r01*x600))+((x597*x604*x616))+(((0.009487)*r00*x602))+(((-0.358)*r02*x604))+(((-0.03133875)*cj13*x611))+(((-1.0)*x607*x631))+((x611*x618))+(((-1.0)*sj13*x599*x615))+((cj12*r02*x597*x599))+((r00*x594*x619))+(((0.03133875)*x607))+((cj13*x595*x611))+(((-0.053)*x624))+(((-1.0)*px*x599*x617))+((x599*x603*x604))+(((-1.0)*x596*x598*x622))+(((-1.0)*x594*x611*x623))+(((-1.0)*x595*x598*x622))+(((-0.05694138605376)*x630))+(((-0.053)*x615))+(((-1.0)*x596*x611*x623))+(((-1.0)*x601*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.446808510638298)+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x634=((3.54609928841723)*sj13);
IkReal x635=((1.77104279821767)*sj13);
IkReal x636=(cj12*px);
IkReal x637=(py*sj12);
IkReal x638=((1.77104279821767)*cj13);
IkReal x639=((3.54609928841723)*cj13);
if( IKabs(((0.587819138473915)+(((-1.0)*pz*x639))+(((-1.0)*pz*x635))+((x636*x638))+(((-1.0)*x634*x637))+(((-1.0)*x634*x636))+((x637*x638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.410988292024019)+(((-1.0)*pz*x634))+((pz*x638))+((x635*x636))+((x635*x637))+((x636*x639))+((x637*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.587819138473915)+(((-1.0)*pz*x639))+(((-1.0)*pz*x635))+((x636*x638))+(((-1.0)*x634*x637))+(((-1.0)*x634*x636))+((x637*x638))))+IKsqr(((-0.410988292024019)+(((-1.0)*pz*x634))+((pz*x638))+((x635*x636))+((x635*x637))+((x636*x639))+((x637*x639))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.587819138473915)+(((-1.0)*pz*x639))+(((-1.0)*pz*x635))+((x636*x638))+(((-1.0)*x634*x637))+(((-1.0)*x634*x636))+((x637*x638))), ((-0.410988292024019)+(((-1.0)*pz*x634))+((pz*x638))+((x635*x636))+((x635*x637))+((x636*x639))+((x637*x639))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x640=IKcos(j14);
IkReal x641=IKsin(j14);
IkReal x642=px*px;
IkReal x643=py*py;
IkReal x644=pz*pz;
IkReal x645=(cj13*px);
IkReal x646=((1.0)*cj12);
IkReal x647=((2.0)*pz);
IkReal x648=(sj12*sj13);
IkReal x649=(px*r02);
IkReal x650=(cj12*sj13);
IkReal x651=(cj13*r02);
IkReal x652=(py*sj12);
IkReal x653=(cj12*py);
IkReal x654=((2.0)*r01);
IkReal x655=(r02*sj13);
IkReal x656=((0.358)*cj12);
IkReal x657=((0.03133875)*r00);
IkReal x658=((0.053)*cj12);
IkReal x659=(r01*sj12);
IkReal x660=((0.009487)*cj13);
IkReal x661=(px*py);
IkReal x662=(pz*r00);
IkReal x663=(py*r01);
IkReal x664=((2.0)*r00);
IkReal x665=(r00*sj13);
IkReal x666=((0.358)*pz);
IkReal x667=(cj12*cj13);
IkReal x668=(cj12*r01);
IkReal x669=(r00*sj12);
IkReal x670=(cj13*r00);
IkReal x671=((1.0)*cj13);
IkReal x672=(px*r00);
IkReal x673=((1.0)*r01);
IkReal x674=(cj13*pz);
IkReal x675=((0.053)*r02);
IkReal x676=(cj17*x641);
IkReal x677=((0.11272333212)*x641);
IkReal x678=(cj17*x640);
IkReal x679=((1.0)*x644);
IkReal x680=(sj17*x640);
IkReal x681=((0.225702127707488)*x641);
evalcond[0]=((-0.179)+(((-0.11272333212)*x640))+((py*x648))+((px*x650))+x674+x681);
evalcond[1]=(x651+((r01*x648))+(((0.446808510258035)*x678))+(((-0.89462962)*x676))+((r00*x650)));
evalcond[2]=((0.0265)+((pz*sj13))+x677+(((0.225702127707488)*x640))+(((-1.0)*x652*x671))+(((-1.0)*x645*x646)));
evalcond[3]=((((-1.0)*x659*x671))+(((-0.446808510258035)*x676))+x655+(((-1.0)*x646*x670))+(((-0.89462962)*x678)));
evalcond[4]=(((sj17*x681))+(((-0.11272333212)*x680))+(((-1.0)*r01*x646*x674))+(((-0.179)*x669))+(((-1.0)*px*sj13*x673))+((cj13*sj12*x662))+((x651*x653))+(((-1.0)*r02*sj12*x645))+((py*x665))+(((0.179)*x668)));
evalcond[5]=(((py*x670))+(((-0.225702127707488)*x680))+((x648*x649))+(((0.0265)*x668))+(((-1.0)*x645*x673))+(((-1.0)*py*x646*x655))+(((-1.0)*x648*x662))+((pz*r01*x650))+(((-0.0265)*x669))+(((-1.0)*sj17*x677)));
evalcond[6]=((((-1.0)*r00*x645*x647))+(((0.358)*x672))+(((0.053)*pz*x659))+(((-1.0)*py*r02*x647*x648))+((r00*x644*x650))+(((-1.0)*cj12*r00*x660))+(((0.009487)*x655))+(((-0.03133875)*r01*x648))+(((0.358)*x663))+((r00*x643*x650))+(((-1.0)*x659*x660))+(((-1.0)*x648*x661*x664))+((r01*x644*x648))+(((-1.0)*x642*x646*x665))+((x643*x651))+(((-1.0)*x651*x679))+(((-1.0)*x650*x654*x661))+((r02*x666))+(((-0.03133875)*x651))+(((-0.0284384681213834)*x678))+((r01*x642*x648))+((x642*x651))+(((-1.0)*x650*x657))+(((-1.0)*x649*x658))+(((-1.0)*x652*x675))+(((-1.0)*x643*x648*x673))+((x658*x662))+(((0.05694138605376)*x676))+(((-1.0)*x647*x649*x650))+(((-1.0)*cj13*x647*x663)));
evalcond[7]=((((0.009487)*x651))+((cj13*x643*x659))+(((-0.358)*r02*x652))+(((0.0284384681213834)*x676))+(((-1.0)*x644*x659*x671))+((x643*x655))+(((0.03133875)*x655))+((x656*x662))+(((-1.0)*pz*x675))+(((-0.03133875)*cj13*x659))+((x645*x653*x654))+((x645*x652*x664))+(((-1.0)*x657*x667))+(((-1.0)*x642*x659*x671))+(((0.009487)*r01*x648))+(((0.009487)*r00*x650))+((r00*x642*x667))+((x642*x655))+(((-1.0)*px*x647*x665))+((cj12*r02*x645*x647))+((x659*x666))+(((-1.0)*x649*x656))+((x647*x651*x652))+(((-1.0)*x644*x646*x670))+(((-0.053)*x672))+(((0.05694138605376)*x678))+(((-1.0)*x655*x679))+(((-1.0)*x643*x646*x670))+(((-1.0)*sj13*x647*x663))+(((-0.053)*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x693=IKPowWithIntegerCheck(cj17,-1);
if(!x693.valid){
continue;
}
IkReal x682=x693.value;
IkReal x683=(cj12*px);
IkReal x684=(r02*sj13);
IkReal x685=((63.0)*cj15);
IkReal x686=(py*sj12);
IkReal x687=((89.5)*cj17);
IkReal x688=((500.0)*cj17*sj13);
IkReal x689=((-0.00709219858156028)*x682);
IkReal x690=(cj12*cj13*r00);
IkReal x691=(cj13*r01*sj12);
IkReal x692=((500.0)*cj13*cj17*pz);
CheckValue<IkReal> x694=IKPowWithIntegerCheck(sj15,-1);
if(!x694.valid){
continue;
}
if( IKabs((x689*((((x686*x688))+(((-1.0)*x687))+((x683*x688))+(((63.0)*x690))+(((63.0)*x691))+(((-63.0)*x684))+x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x689*(x694.value)*(((((-1.0)*cj15*x692))+(((-141.0)*x691))+(((-141.0)*x690))+(((-1.0)*cj15*x686*x688))+(((-1.0)*cj15*x683*x688))+(((-1.0)*x685*x691))+(((-1.0)*x685*x690))+(((141.0)*x684))+((cj15*x687))+((x684*x685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x689*((((x686*x688))+(((-1.0)*x687))+((x683*x688))+(((63.0)*x690))+(((63.0)*x691))+(((-63.0)*x684))+x692))))+IKsqr((x689*(x694.value)*(((((-1.0)*cj15*x692))+(((-141.0)*x691))+(((-141.0)*x690))+(((-1.0)*cj15*x686*x688))+(((-1.0)*cj15*x683*x688))+(((-1.0)*x685*x691))+(((-1.0)*x685*x690))+(((141.0)*x684))+((cj15*x687))+((x684*x685))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x689*((((x686*x688))+(((-1.0)*x687))+((x683*x688))+(((63.0)*x690))+(((63.0)*x691))+(((-63.0)*x684))+x692))), (x689*(x694.value)*(((((-1.0)*cj15*x692))+(((-141.0)*x691))+(((-141.0)*x690))+(((-1.0)*cj15*x686*x688))+(((-1.0)*cj15*x683*x688))+(((-1.0)*x685*x691))+(((-1.0)*x685*x690))+(((141.0)*x684))+((cj15*x687))+((x684*x685))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x695=IKsin(j14);
IkReal x696=IKcos(j14);
IkReal x697=px*px;
IkReal x698=py*py;
IkReal x699=pz*pz;
IkReal x700=(cj13*px);
IkReal x701=((1.0)*cj12);
IkReal x702=((2.0)*pz);
IkReal x703=(sj12*sj13);
IkReal x704=(px*r02);
IkReal x705=(cj12*sj13);
IkReal x706=(cj13*r02);
IkReal x707=(py*sj12);
IkReal x708=(cj12*py);
IkReal x709=((2.0)*r01);
IkReal x710=(r02*sj13);
IkReal x711=((0.358)*cj12);
IkReal x712=((0.03133875)*r00);
IkReal x713=((0.063648)*sj15);
IkReal x714=((0.053)*cj12);
IkReal x715=(r01*sj12);
IkReal x716=((0.009487)*cj13);
IkReal x717=(px*py);
IkReal x718=(pz*r00);
IkReal x719=(py*r01);
IkReal x720=((2.0)*r00);
IkReal x721=(r00*sj13);
IkReal x722=((0.358)*pz);
IkReal x723=((1.0)*r01);
IkReal x724=(cj15*sj17);
IkReal x725=(cj12*r01);
IkReal x726=(r00*sj12);
IkReal x727=((0.0954)*cj15);
IkReal x728=(cj13*r00);
IkReal x729=((1.0)*cj13);
IkReal x730=(sj15*sj17);
IkReal x731=(cj13*pz);
IkReal x732=((0.053)*r02);
IkReal x733=(px*r00);
IkReal x734=(cj17*x696);
IkReal x735=((0.126)*x696);
IkReal x736=((1.0)*x699);
IkReal x737=(cj17*x695);
IkReal x738=((0.126)*x695);
IkReal x739=((0.282)*x695);
IkReal x740=((0.282)*x696);
evalcond[0]=(((r01*x703))+((sj15*x737))+((r00*x705))+x706+(((-1.0)*cj15*x734)));
evalcond[1]=((((-1.0)*x701*x728))+((sj15*x734))+((cj15*x737))+x710+(((-1.0)*x715*x729)));
evalcond[2]=((-0.179)+((sj15*x735))+((px*x705))+((cj15*x738))+x731+x739+((py*x703)));
evalcond[3]=((0.0265)+((pz*sj13))+((cj15*x735))+x740+(((-1.0)*sj15*x738))+(((-1.0)*x707*x729))+(((-1.0)*x700*x701)));
evalcond[4]=(((sj17*x739))+((x706*x708))+(((-1.0)*px*sj13*x723))+(((-1.0)*r02*sj12*x700))+(((-1.0)*r01*x701*x731))+(((-0.179)*x726))+((py*x721))+((x724*x738))+((cj13*sj12*x718))+(((0.179)*x725))+((x730*x735)));
evalcond[5]=((((-1.0)*x703*x718))+(((-1.0)*x700*x723))+(((-1.0)*x724*x735))+((x703*x704))+(((-0.0265)*x726))+((pz*r01*x705))+((py*x728))+(((-1.0)*sj17*x740))+(((0.0265)*x725))+(((-1.0)*py*x701*x710))+((x730*x738)));
evalcond[6]=(((x700*x708*x709))+(((-1.0)*x699*x715*x729))+(((-0.053)*x719))+(((0.03133875)*x710))+(((-1.0)*x710*x736))+((x727*x737))+(((-1.0)*x698*x701*x728))+(((-1.0)*px*x702*x721))+(((-1.0)*sj13*x702*x719))+((cj12*r02*x700*x702))+(((-0.03133875)*cj13*x715))+(((-1.0)*x697*x715*x729))+((x711*x718))+(((-1.0)*cj12*cj13*x712))+((x700*x707*x720))+(((-0.358)*r02*x707))+((cj12*x697*x728))+((x702*x706*x707))+((cj13*x698*x715))+(((0.009487)*r01*x703))+(((-1.0)*x704*x711))+((x697*x710))+(((0.009487)*r00*x705))+((x698*x710))+(((0.071064)*x737))+(((-1.0)*pz*x732))+(((-1.0)*x699*x701*x728))+(((-0.053)*x733))+(((0.009487)*x706))+(((-1.0)*x713*x734))+((x715*x722)));
evalcond[7]=(((x714*x718))+(((0.358)*x733))+(((-1.0)*x703*x717*x720))+(((-1.0)*x727*x734))+(((0.358)*x719))+(((-1.0)*x698*x703*x723))+(((-0.071064)*x734))+((r01*x697*x703))+(((-1.0)*cj12*r00*x716))+(((-1.0)*cj13*x702*x719))+(((0.053)*pz*x715))+(((-1.0)*x702*x704*x705))+((x697*x706))+((r00*x699*x705))+(((-1.0)*x704*x714))+(((-1.0)*x705*x712))+((r02*x722))+(((-1.0)*py*r02*x702*x703))+(((-1.0)*x697*x701*x721))+((x698*x706))+((r01*x699*x703))+(((-1.0)*x707*x732))+((r00*x698*x705))+(((-1.0)*x706*x736))+(((-1.0)*x705*x709*x717))+(((0.009487)*x710))+(((-1.0)*x713*x737))+(((-0.03133875)*x706))+(((-0.03133875)*r01*x703))+(((-1.0)*r00*x700*x702))+(((-1.0)*x715*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x741=(sj12*sj13);
IkReal x742=(cj15*cj17);
IkReal x743=((500.0)*py);
IkReal x744=((63.0)*sj15);
IkReal x745=(cj13*r02);
IkReal x746=((63.0)*cj15);
IkReal x747=(cj17*sj15);
IkReal x748=(cj12*r00*sj13);
IkReal x749=((500.0)*cj13*pz);
IkReal x750=((500.0)*cj12*px*sj13);
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((((-1.0)*x742*x750))+(((89.5)*x742))+(((-1.0)*x742*x749))+(((-1.0)*x744*x745))+(((-1.0)*x744*x748))+(((-1.0)*x741*x742*x743))+(((-1.0)*r01*x741*x744)))),IkReal((((x745*x746))+(((141.0)*r01*x741))+(((89.5)*x747))+(((-1.0)*x741*x743*x747))+(((-1.0)*x747*x749))+((x746*x748))+(((141.0)*x745))+(((141.0)*x748))+((r01*x741*x746))+(((-1.0)*x747*x750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(((((63.0)*cj17))+(((141.0)*x742)))),-1);
if(!x752.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x751.value)+(((1.5707963267949)*(x752.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x753=IKsin(j14);
IkReal x754=IKcos(j14);
IkReal x755=px*px;
IkReal x756=py*py;
IkReal x757=pz*pz;
IkReal x758=(cj13*px);
IkReal x759=((1.0)*cj12);
IkReal x760=((2.0)*pz);
IkReal x761=(sj12*sj13);
IkReal x762=(px*r02);
IkReal x763=(cj12*sj13);
IkReal x764=(cj13*r02);
IkReal x765=(py*sj12);
IkReal x766=(cj12*py);
IkReal x767=((2.0)*r01);
IkReal x768=(r02*sj13);
IkReal x769=((0.358)*cj12);
IkReal x770=((0.03133875)*r00);
IkReal x771=((0.063648)*sj15);
IkReal x772=((0.053)*cj12);
IkReal x773=(r01*sj12);
IkReal x774=((0.009487)*cj13);
IkReal x775=(px*py);
IkReal x776=(pz*r00);
IkReal x777=(py*r01);
IkReal x778=((2.0)*r00);
IkReal x779=(r00*sj13);
IkReal x780=((0.358)*pz);
IkReal x781=((1.0)*r01);
IkReal x782=(cj15*sj17);
IkReal x783=(cj12*r01);
IkReal x784=(r00*sj12);
IkReal x785=((0.0954)*cj15);
IkReal x786=(cj13*r00);
IkReal x787=((1.0)*cj13);
IkReal x788=(sj15*sj17);
IkReal x789=(cj13*pz);
IkReal x790=((0.053)*r02);
IkReal x791=(px*r00);
IkReal x792=(cj17*x754);
IkReal x793=((0.126)*x754);
IkReal x794=((1.0)*x757);
IkReal x795=(cj17*x753);
IkReal x796=((0.126)*x753);
IkReal x797=((0.282)*x753);
IkReal x798=((0.282)*x754);
evalcond[0]=(((sj15*x795))+(((-1.0)*cj15*x792))+x764+((r00*x763))+((r01*x761)));
evalcond[1]=((((-1.0)*x759*x786))+((sj15*x792))+(((-1.0)*x773*x787))+x768+((cj15*x795)));
evalcond[2]=((-0.179)+((sj15*x793))+((px*x763))+((py*x761))+x797+x789+((cj15*x796)));
evalcond[3]=((0.0265)+(((-1.0)*x765*x787))+((pz*sj13))+x798+(((-1.0)*x758*x759))+(((-1.0)*sj15*x796))+((cj15*x793)));
evalcond[4]=(((sj17*x797))+(((-0.179)*x784))+(((-1.0)*r01*x759*x789))+((x782*x796))+(((-1.0)*r02*sj12*x758))+(((-1.0)*px*sj13*x781))+((cj13*sj12*x776))+((x788*x793))+(((0.179)*x783))+((x764*x766))+((py*x779)));
evalcond[5]=((((-1.0)*sj17*x798))+(((-1.0)*py*x759*x768))+(((0.0265)*x783))+(((-1.0)*x761*x776))+((x788*x796))+((x761*x762))+((py*x786))+(((-1.0)*x782*x793))+((pz*r01*x763))+(((-1.0)*x758*x781))+(((-0.0265)*x784)));
evalcond[6]=(((x773*x780))+((cj12*r02*x758*x760))+(((-1.0)*x762*x769))+(((-1.0)*x755*x773*x787))+((x785*x795))+((x758*x766*x767))+(((0.071064)*x795))+((cj13*x756*x773))+(((-1.0)*x771*x792))+(((0.009487)*x764))+((x769*x776))+(((-1.0)*x757*x759*x786))+((x756*x768))+((cj12*x755*x786))+(((-1.0)*px*x760*x779))+(((0.03133875)*x768))+(((-0.053)*x777))+(((-1.0)*sj13*x760*x777))+(((-1.0)*x768*x794))+(((0.009487)*r00*x763))+(((-1.0)*pz*x790))+(((0.009487)*r01*x761))+((x760*x764*x765))+(((-1.0)*cj12*cj13*x770))+(((-0.03133875)*cj13*x773))+(((-0.358)*r02*x765))+((x758*x765*x778))+(((-1.0)*x756*x759*x786))+((x755*x768))+(((-0.053)*x791))+(((-1.0)*x757*x773*x787)));
evalcond[7]=((((0.053)*pz*x773))+(((-1.0)*x765*x790))+((r00*x757*x763))+(((-0.03133875)*x764))+(((-0.071064)*x792))+(((-1.0)*cj13*x760*x777))+(((-1.0)*x756*x761*x781))+((x772*x776))+((r01*x757*x761))+(((-1.0)*x771*x795))+((r00*x756*x763))+(((-1.0)*x763*x767*x775))+(((-1.0)*x760*x762*x763))+(((0.009487)*x768))+((r02*x780))+((r01*x755*x761))+(((0.358)*x791))+((x756*x764))+(((-1.0)*x764*x794))+(((-0.03133875)*r01*x761))+(((-1.0)*cj12*r00*x774))+(((-1.0)*py*r02*x760*x761))+(((0.358)*x777))+(((-1.0)*x785*x792))+(((-1.0)*x773*x774))+(((-1.0)*x763*x770))+(((-1.0)*x762*x772))+(((-1.0)*r00*x758*x760))+(((-1.0)*x761*x775*x778))+((x755*x764))+(((-1.0)*x755*x759*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x799=(cj15*sj13);
IkReal x800=(cj12*r00);
IkReal x801=(r01*sj12);
IkReal x802=(cj13*cj15);
IkReal x803=(cj13*sj15);
IkReal x804=((1.0)*r02);
IkReal x805=((1.0)*sj13*sj15);
CheckValue<IkReal> x806=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*x799*x804))+((x800*x802))+(((-1.0)*x800*x805))+(((-1.0)*x803*x804))+((x801*x802))+(((-1.0)*x801*x805)))),IkReal((((x800*x803))+((r02*x802))+(((-1.0)*sj13*sj15*x804))+((x799*x800))+((x799*x801))+((x801*x803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x806.value)))+(x807.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x808=IKsin(j14);
IkReal x809=IKcos(j14);
IkReal x810=px*px;
IkReal x811=py*py;
IkReal x812=pz*pz;
IkReal x813=(cj13*px);
IkReal x814=((1.0)*cj12);
IkReal x815=((2.0)*pz);
IkReal x816=(sj12*sj13);
IkReal x817=(px*r02);
IkReal x818=(cj12*sj13);
IkReal x819=(cj13*r02);
IkReal x820=(py*sj12);
IkReal x821=(cj12*py);
IkReal x822=((2.0)*r01);
IkReal x823=(r02*sj13);
IkReal x824=((0.358)*cj12);
IkReal x825=((0.03133875)*r00);
IkReal x826=((0.063648)*sj15);
IkReal x827=((0.053)*cj12);
IkReal x828=(r01*sj12);
IkReal x829=((0.009487)*cj13);
IkReal x830=(px*py);
IkReal x831=(pz*r00);
IkReal x832=(py*r01);
IkReal x833=((2.0)*r00);
IkReal x834=(r00*sj13);
IkReal x835=((0.358)*pz);
IkReal x836=((1.0)*r01);
IkReal x837=(cj15*sj17);
IkReal x838=(cj12*r01);
IkReal x839=(r00*sj12);
IkReal x840=((0.0954)*cj15);
IkReal x841=(cj13*r00);
IkReal x842=((1.0)*cj13);
IkReal x843=(sj15*sj17);
IkReal x844=(cj13*pz);
IkReal x845=((0.053)*r02);
IkReal x846=(px*r00);
IkReal x847=(cj17*x809);
IkReal x848=((0.126)*x809);
IkReal x849=((1.0)*x812);
IkReal x850=(cj17*x808);
IkReal x851=((0.126)*x808);
IkReal x852=((0.282)*x808);
IkReal x853=((0.282)*x809);
evalcond[0]=(((r01*x816))+((r00*x818))+((sj15*x850))+x819+(((-1.0)*cj15*x847)));
evalcond[1]=((((-1.0)*x828*x842))+((cj15*x850))+((sj15*x847))+(((-1.0)*x814*x841))+x823);
evalcond[2]=((-0.179)+((cj15*x851))+((py*x816))+((sj15*x848))+((px*x818))+x852+x844);
evalcond[3]=((0.0265)+((pz*sj13))+(((-1.0)*sj15*x851))+((cj15*x848))+(((-1.0)*x813*x814))+x853+(((-1.0)*x820*x842)));
evalcond[4]=((((-1.0)*px*sj13*x836))+((cj13*sj12*x831))+((sj17*x852))+((x843*x848))+((x819*x821))+((py*x834))+(((-0.179)*x839))+(((-1.0)*r02*sj12*x813))+((x837*x851))+(((0.179)*x838))+(((-1.0)*r01*x814*x844)));
evalcond[5]=(((pz*r01*x818))+(((-0.0265)*x839))+(((-1.0)*x813*x836))+(((-1.0)*sj17*x853))+((x816*x817))+(((-1.0)*x837*x848))+(((0.0265)*x838))+((py*x841))+((x843*x851))+(((-1.0)*x816*x831))+(((-1.0)*py*x814*x823)));
evalcond[6]=(((x824*x831))+(((0.009487)*x819))+((x813*x821*x822))+(((-1.0)*x826*x847))+(((-1.0)*pz*x845))+(((-1.0)*x823*x849))+(((0.03133875)*x823))+(((-1.0)*x810*x828*x842))+(((-0.358)*r02*x820))+(((-1.0)*sj13*x815*x832))+((x811*x823))+(((-1.0)*x817*x824))+(((-0.03133875)*cj13*x828))+(((-1.0)*x812*x814*x841))+((x810*x823))+(((-1.0)*cj12*cj13*x825))+((x815*x819*x820))+((cj12*x810*x841))+((x840*x850))+(((-1.0)*x812*x828*x842))+((x813*x820*x833))+(((-1.0)*px*x815*x834))+(((0.009487)*r01*x816))+((x828*x835))+((cj13*x811*x828))+(((-1.0)*x811*x814*x841))+(((0.009487)*r00*x818))+(((-0.053)*x832))+((cj12*r02*x813*x815))+(((-0.053)*x846))+(((0.071064)*x850)));
evalcond[7]=((((-1.0)*r00*x813*x815))+(((-1.0)*x810*x814*x834))+(((-1.0)*x828*x829))+(((-1.0)*py*r02*x815*x816))+((r00*x811*x818))+((r01*x810*x816))+(((-1.0)*x818*x825))+((r00*x812*x818))+(((-0.071064)*x847))+(((-1.0)*x819*x849))+((r02*x835))+((x827*x831))+(((-0.03133875)*x819))+(((0.009487)*x823))+(((-1.0)*x840*x847))+((x810*x819))+(((-1.0)*x815*x817*x818))+(((-1.0)*x817*x827))+(((-1.0)*cj13*x815*x832))+(((-1.0)*x818*x822*x830))+(((-1.0)*x826*x850))+((x811*x819))+(((-1.0)*x811*x816*x836))+(((-0.03133875)*r01*x816))+((r01*x812*x816))+(((-1.0)*cj12*r00*x829))+(((0.358)*x846))+(((-1.0)*x816*x830*x833))+(((0.053)*pz*x828))+(((-1.0)*x820*x845))+(((0.358)*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x854=((13.25)*cj13);
IkReal x855=(cj12*r00);
IkReal x856=(r01*sj12);
IkReal x857=(cj12*px);
IkReal x858=((5.03771248452099)*sj13);
IkReal x859=((0.745806596870427)*cj13);
IkReal x860=(py*sj12);
IkReal x861=((89.5)*sj13);
CheckValue<IkReal> x862=IKPowWithIntegerCheck(cj17,-1);
if(!x862.valid){
continue;
}
if( IKabs(((0.00709219858156028)*(x862.value)*(((((500.0)*pz*r02))+(((-89.5)*cj13*r02))+(((500.0)*py*r01))+(((-1.0)*x856*x861))+(((500.0)*px*r00))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856))+(((13.25)*r02*sj13))+(((-1.0)*x855*x861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x858*x860))+(((14.0718225824609)*(py*py)))+(((-1.0)*x859*x860))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x857*x858))+(((-1.0)*x857*x859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00709219858156028)*(x862.value)*(((((500.0)*pz*r02))+(((-89.5)*cj13*r02))+(((500.0)*py*r01))+(((-1.0)*x856*x861))+(((500.0)*px*r00))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856))+(((13.25)*r02*sj13))+(((-1.0)*x855*x861))))))+IKsqr(((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x858*x860))+(((14.0718225824609)*(py*py)))+(((-1.0)*x859*x860))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x857*x858))+(((-1.0)*x857*x859))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((0.00709219858156028)*(x862.value)*(((((500.0)*pz*r02))+(((-89.5)*cj13*r02))+(((500.0)*py*r01))+(((-1.0)*x856*x861))+(((500.0)*px*r00))+(((-1.0)*x854*x855))+(((-1.0)*x854*x856))+(((13.25)*r02*sj13))+(((-1.0)*x855*x861))))), ((-0.881694669593606)+(((14.0718225824609)*(px*px)))+(((0.745806596870427)*pz*sj13))+(((-1.0)*x858*x860))+(((14.0718225824609)*(py*py)))+(((-1.0)*x859*x860))+(((-5.03771248452099)*cj13*pz))+(((14.0718225824609)*(pz*pz)))+(((-1.0)*x857*x858))+(((-1.0)*x857*x859))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x863=IKcos(j15);
IkReal x864=pz*pz;
IkReal x865=py*py;
IkReal x866=px*px;
IkReal x867=(cj13*r02);
IkReal x868=(px*r00);
IkReal x869=(pz*r02);
IkReal x870=(px*r01);
IkReal x871=(py*sj12);
IkReal x872=(cj13*sj12);
IkReal x873=(pz*r00);
IkReal x874=((0.358)*sj13);
IkReal x875=((0.179)*r01);
IkReal x876=(pz*r01);
IkReal x877=(cj12*cj13);
IkReal x878=((0.053)*px);
IkReal x879=((0.053)*sj13);
IkReal x880=(cj12*py);
IkReal x881=(cj12*r01);
IkReal x882=((1.0)*r02);
IkReal x883=(cj12*px);
IkReal x884=((0.053)*cj13);
IkReal x885=(py*r00);
IkReal x886=((0.0265)*sj13);
IkReal x887=(sj12*sj13);
IkReal x888=((0.179)*r00);
IkReal x889=(px*sj12);
IkReal x890=(r00*sj12);
IkReal x891=((0.282)*cj17);
IkReal x892=((2.0)*x880);
IkReal x893=((1.0)*x864);
IkReal x894=((1.0)*x866);
IkReal x895=((0.071064)*x863);
evalcond[0]=((((-1.0)*x869))+(((-1.0)*x868))+(((0.179)*x867))+((cj12*sj13*x888))+((x875*x887))+(((0.0265)*r00*x877))+(((-1.0)*py*r01))+((x891*(IKsin(j15))))+(((0.0265)*r01*x872))+(((-1.0)*r02*x886)));
evalcond[1]=((0.06265675)+((x874*x883))+((x871*x874))+(((-1.0)*x865))+(((-1.0)*x894))+(((-1.0)*x893))+(((-1.0)*pz*x879))+((x871*x884))+(((0.358)*cj13*pz))+x895+((x877*x878)));
evalcond[2]=(((x863*x891))+(((-1.0)*x872*x875))+(((-1.0)*x882*x883))+((cj12*x873))+(((0.126)*cj17))+(((-1.0)*x877*x888))+(((0.179)*r02*sj13))+(((-1.0)*x871*x882))+((cj12*r00*x886))+((r01*sj12*x886))+(((0.0265)*x867))+((sj12*x876)));
evalcond[3]=(((x870*x874))+((x868*x892))+(((-1.0)*cj12*x876*x879))+((r02*x879*x880))+((sj12*x873*x879))+(((-0.358)*x872*x873))+(((-0.0954)*sj17))+((x865*x881))+(((-1.0)*x881*x894))+(((-1.0)*x881*x893))+((x864*x890))+(((-0.03274325)*x881))+(((-0.358)*x867*x880))+((x865*x890))+(((-2.0)*x870*x871))+((x869*x892))+(((0.358)*x876*x877))+((x870*x884))+(((0.358)*x867*x889))+(((-2.0)*x869*x889))+(((-1.0)*x874*x885))+(((-1.0)*x890*x894))+(((-1.0)*sj17*x895))+(((-1.0)*r02*x878*x887))+(((-1.0)*x884*x885))+(((0.03274325)*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=IKsign(cj17);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x896=(cj15*cj17);
j14eval[0]=((((2.23809523809524)*x896))+cj17);
j14eval[1]=IKsign(((((63.0)*cj17))+(((141.0)*x896))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=sj15;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=1.0;
cj17=0;
j17=1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x897=(cj12*px);
IkReal x898=((70500.0)*cj13);
IkReal x899=((31500.0)*cj15);
IkReal x900=(py*sj12);
IkReal x901=((31500.0)*sj15);
IkReal x902=(cj13*pz);
IkReal x903=(pz*sj13);
IkReal x904=((70500.0)*sj13);
CheckValue<IkReal> x905=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x905.valid){
continue;
}
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*x900*x904))+(((-1.0)*x897*x904))+(((-1.0)*cj13*x897*x901))+((x901*x903))+(((-1.0)*sj13*x899*x900))+(((-1.0)*pz*x898))+(((5638.5)*cj15))+(((-1.0)*sj13*x897*x899))+(((-1.0)*cj13*x900*x901))+(((-1.0)*x899*x902))+(((834.75)*sj15)))),IkReal(((-1868.25)+(((5638.5)*sj15))+((cj13*x897*x899))+(((-1.0)*sj13*x897*x901))+((x897*x898))+(((-70500.0)*x903))+(((-834.75)*cj15))+(((-1.0)*x901*x902))+(((-1.0)*sj13*x900*x901))+((x898*x900))+(((-1.0)*x899*x903))+((cj13*x899*x900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x905.value)))+(x906.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x907=IKsin(j14);
IkReal x908=IKcos(j14);
IkReal x909=(sj12*sj13);
IkReal x910=(px*r02);
IkReal x911=((1.0)*px);
IkReal x912=(cj12*cj13);
IkReal x913=((0.126)*cj15);
IkReal x914=(cj13*r00);
IkReal x915=(r01*sj13);
IkReal x916=((0.126)*sj15);
IkReal x917=(cj12*r01);
IkReal x918=(py*r02);
IkReal x919=(r00*sj12);
IkReal x920=(cj12*sj13);
IkReal x921=((1.0)*pz);
IkReal x922=((0.282)*x907);
IkReal x923=((0.282)*x908);
IkReal x924=((1.0)*cj13*sj12);
IkReal x925=(x907*x913);
IkReal x926=(x908*x916);
IkReal x927=(x907*x916);
IkReal x928=(x908*x913);
IkReal x929=(x928+x923);
IkReal x930=(x926+x925+x922);
evalcond[0]=((-0.179)+((cj13*pz))+((px*x920))+x930+((py*x909)));
evalcond[1]=((0.0265)+(((-1.0)*x927))+((pz*sj13))+(((-1.0)*py*x924))+x929+(((-1.0)*x911*x912)));
evalcond[2]=(((pz*sj12*x914))+(((-1.0)*r01*x912*x921))+(((-0.179)*x919))+(((0.179)*x917))+((py*r00*sj13))+((x912*x918))+(((-1.0)*x910*x924))+x930+(((-1.0)*x911*x915)));
evalcond[3]=((((-1.0)*x929))+((x909*x910))+(((-1.0)*r00*x909*x921))+(((-1.0)*cj13*r01*x911))+(((-1.0)*x918*x920))+((cj12*pz*x915))+(((-0.0265)*x919))+(((0.0265)*x917))+x927+((py*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x931=(cj12*px);
IkReal x932=((70500.0)*cj13);
IkReal x933=((31500.0)*cj15);
IkReal x934=(py*sj12);
IkReal x935=((31500.0)*sj15);
IkReal x936=(cj13*pz);
IkReal x937=(pz*sj13);
IkReal x938=((70500.0)*sj13);
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*x931*x938))+(((-1.0)*cj13*x931*x935))+((x935*x937))+(((-1.0)*x934*x938))+(((-1.0)*sj13*x933*x934))+(((5638.5)*cj15))+(((-1.0)*pz*x932))+(((-1.0)*cj13*x934*x935))+(((-1.0)*x933*x936))+(((834.75)*sj15))+(((-1.0)*sj13*x931*x933)))),IkReal(((-1868.25)+(((-1.0)*x935*x936))+((cj13*x931*x933))+(((-70500.0)*x937))+(((5638.5)*sj15))+((x931*x932))+(((-834.75)*cj15))+((cj13*x933*x934))+(((-1.0)*sj13*x934*x935))+(((-1.0)*x933*x937))+((x932*x934))+(((-1.0)*sj13*x931*x935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x939.value)))+(x940.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x941=IKsin(j14);
IkReal x942=IKcos(j14);
IkReal x943=(sj12*sj13);
IkReal x944=(px*r02);
IkReal x945=((1.0)*px);
IkReal x946=(cj12*cj13);
IkReal x947=((0.126)*cj15);
IkReal x948=(cj13*r00);
IkReal x949=(r01*sj13);
IkReal x950=((0.126)*sj15);
IkReal x951=(cj12*r01);
IkReal x952=(py*r02);
IkReal x953=(r00*sj12);
IkReal x954=(cj12*sj13);
IkReal x955=((1.0)*pz);
IkReal x956=((0.282)*x941);
IkReal x957=((0.282)*x942);
IkReal x958=((1.0)*cj13*sj12);
IkReal x959=(x941*x947);
IkReal x960=(x942*x950);
IkReal x961=(x942*x947);
IkReal x962=(x941*x950);
IkReal x963=(x961+x957);
IkReal x964=(x960+x959+x956);
evalcond[0]=((-0.179)+((cj13*pz))+((px*x954))+x964+((py*x943)));
evalcond[1]=((0.0265)+(((-1.0)*py*x958))+(((-1.0)*x945*x946))+((pz*sj13))+x963+(((-1.0)*x962)));
evalcond[2]=(((pz*sj12*x948))+(((-1.0)*x945*x949))+(((-1.0)*x944*x958))+((py*r00*sj13))+(((0.179)*x951))+(((-1.0)*r01*x946*x955))+((x946*x952))+(((-1.0)*x964))+(((-0.179)*x953)));
evalcond[3]=((((0.0265)*x951))+((cj12*pz*x949))+(((-1.0)*cj13*r01*x945))+((x943*x944))+(((-1.0)*x952*x954))+(((-1.0)*r00*x943*x955))+(((-0.0265)*x953))+x963+(((-1.0)*x962))+((py*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x965=((2.45098039215686)*sj13);
IkReal x966=(py*sj12);
IkReal x967=(cj12*px);
IkReal x968=((2.45098039215686)*cj13);
if( IKabs(((0.438725490196078)+(((-1.0)*pz*x968))+(((-1.0)*x965*x966))+(((-1.0)*x965*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0649509803921569)+(((-1.0)*pz*x965))+((x967*x968))+((x966*x968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.438725490196078)+(((-1.0)*pz*x968))+(((-1.0)*x965*x966))+(((-1.0)*x965*x967))))+IKsqr(((-0.0649509803921569)+(((-1.0)*pz*x965))+((x967*x968))+((x966*x968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.438725490196078)+(((-1.0)*pz*x968))+(((-1.0)*x965*x966))+(((-1.0)*x965*x967))), ((-0.0649509803921569)+(((-1.0)*pz*x965))+((x967*x968))+((x966*x968))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x969=IKsin(j14);
IkReal x970=IKcos(j14);
IkReal x971=px*px;
IkReal x972=py*py;
IkReal x973=pz*pz;
IkReal x974=(cj13*px);
IkReal x975=((1.0)*cj12);
IkReal x976=((2.0)*pz);
IkReal x977=(sj12*sj13);
IkReal x978=(px*r02);
IkReal x979=(cj12*sj13);
IkReal x980=(cj13*r02);
IkReal x981=(py*sj12);
IkReal x982=(cj12*py);
IkReal x983=((2.0)*r01);
IkReal x984=(r02*sj13);
IkReal x985=((0.358)*cj12);
IkReal x986=((0.03133875)*r00);
IkReal x987=((0.053)*cj12);
IkReal x988=(r01*sj12);
IkReal x989=((0.009487)*cj13);
IkReal x990=(px*py);
IkReal x991=(pz*r00);
IkReal x992=(py*r01);
IkReal x993=((2.0)*r00);
IkReal x994=(r00*sj13);
IkReal x995=((0.358)*pz);
IkReal x996=(cj12*cj13);
IkReal x997=((0.166464)*cj17);
IkReal x998=(cj12*r01);
IkReal x999=(r00*sj12);
IkReal x1000=(cj13*r00);
IkReal x1001=((1.0)*cj13);
IkReal x1002=(px*r00);
IkReal x1003=((1.0)*r01);
IkReal x1004=(cj13*pz);
IkReal x1005=((0.053)*r02);
IkReal x1006=((0.408)*x969);
IkReal x1007=((1.0)*x973);
IkReal x1008=((0.408)*x970);
evalcond[0]=(((r01*x977))+((r00*x979))+(((-1.0)*cj17*x970))+x980);
evalcond[1]=((-0.179)+x1006+x1004+((py*x977))+((px*x979)));
evalcond[2]=((((-1.0)*x1000*x975))+((cj17*x969))+(((-1.0)*x1001*x988))+x984);
evalcond[3]=((0.0265)+x1008+((pz*sj13))+(((-1.0)*x974*x975))+(((-1.0)*x1001*x981)));
evalcond[4]=((((-0.179)*x999))+((py*x994))+(((-1.0)*r01*x1004*x975))+(((-1.0)*r02*sj12*x974))+(((-1.0)*px*sj13*x1003))+((sj17*x1006))+(((0.179)*x998))+((x980*x982))+((cj13*sj12*x991)));
evalcond[5]=((((-0.0265)*x999))+((x977*x978))+(((-1.0)*x977*x991))+((pz*r01*x979))+((py*x1000))+(((-1.0)*py*x975*x984))+(((-1.0)*x1003*x974))+(((-1.0)*sj17*x1008))+(((0.0265)*x998)));
evalcond[6]=(((x972*x980))+(((-1.0)*py*r02*x976*x977))+(((-1.0)*cj13*x976*x992))+(((-1.0)*cj12*r00*x989))+(((0.358)*x992))+(((-1.0)*x988*x989))+(((0.053)*pz*x988))+((r01*x971*x977))+(((-1.0)*x971*x975*x994))+((r02*x995))+(((-1.0)*x977*x990*x993))+(((0.358)*x1002))+(((-1.0)*x1005*x981))+((r01*x973*x977))+(((-1.0)*x978*x987))+(((-0.03133875)*x980))+(((-0.03133875)*r01*x977))+(((0.009487)*x984))+((r00*x972*x979))+(((-1.0)*r00*x974*x976))+((r00*x973*x979))+((x987*x991))+((x971*x980))+(((-1.0)*x970*x997))+(((-1.0)*x979*x983*x990))+(((-1.0)*x1003*x972*x977))+(((-1.0)*x1007*x980))+(((-1.0)*x979*x986))+(((-1.0)*x976*x978*x979)));
evalcond[7]=(((x972*x984))+(((-0.358)*r02*x981))+((x974*x982*x983))+(((-1.0)*pz*x1005))+(((-0.053)*x1002))+(((0.009487)*r01*x977))+((x988*x995))+(((0.009487)*r00*x979))+((x974*x981*x993))+(((-1.0)*x1001*x973*x988))+(((-1.0)*x1000*x972*x975))+((r00*x971*x996))+(((-1.0)*x978*x985))+(((0.009487)*x980))+((cj13*x972*x988))+((x976*x980*x981))+(((-1.0)*x1001*x971*x988))+(((-1.0)*px*x976*x994))+((x969*x997))+((cj12*r02*x974*x976))+((x971*x984))+(((0.03133875)*x984))+(((-1.0)*x1007*x984))+(((-1.0)*sj13*x976*x992))+(((-1.0)*x1000*x973*x975))+(((-1.0)*x986*x996))+((x985*x991))+(((-0.053)*x992))+(((-0.03133875)*cj13*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1009=((6.41025641025641)*sj13);
IkReal x1010=((6.41025641025641)*cj13);
IkReal x1011=(py*sj12);
IkReal x1012=(cj12*px);
if( IKabs(((1.1474358974359)+(((-1.0)*x1009*x1012))+(((-1.0)*x1009*x1011))+(((-1.0)*pz*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.169871794871795)+(((-1.0)*pz*x1009))+((x1010*x1011))+((x1010*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.1474358974359)+(((-1.0)*x1009*x1012))+(((-1.0)*x1009*x1011))+(((-1.0)*pz*x1010))))+IKsqr(((-0.169871794871795)+(((-1.0)*pz*x1009))+((x1010*x1011))+((x1010*x1012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((1.1474358974359)+(((-1.0)*x1009*x1012))+(((-1.0)*x1009*x1011))+(((-1.0)*pz*x1010))), ((-0.169871794871795)+(((-1.0)*pz*x1009))+((x1010*x1011))+((x1010*x1012))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1013=IKsin(j14);
IkReal x1014=IKcos(j14);
IkReal x1015=px*px;
IkReal x1016=py*py;
IkReal x1017=pz*pz;
IkReal x1018=(cj13*px);
IkReal x1019=((1.0)*cj12);
IkReal x1020=((2.0)*pz);
IkReal x1021=(sj12*sj13);
IkReal x1022=(px*r02);
IkReal x1023=(cj12*sj13);
IkReal x1024=(cj13*r02);
IkReal x1025=(py*sj12);
IkReal x1026=(cj12*py);
IkReal x1027=((2.0)*r01);
IkReal x1028=(r02*sj13);
IkReal x1029=((0.358)*cj12);
IkReal x1030=((0.03133875)*r00);
IkReal x1031=((0.053)*cj12);
IkReal x1032=(r01*sj12);
IkReal x1033=((0.009487)*cj13);
IkReal x1034=(px*py);
IkReal x1035=(pz*r00);
IkReal x1036=(py*r01);
IkReal x1037=((2.0)*r00);
IkReal x1038=(r00*sj13);
IkReal x1039=((0.358)*pz);
IkReal x1040=(cj12*cj13);
IkReal x1041=(cj12*r01);
IkReal x1042=(r00*sj12);
IkReal x1043=(cj13*r00);
IkReal x1044=((0.053)*r02);
IkReal x1045=((1.0)*cj13);
IkReal x1046=(px*r00);
IkReal x1047=((1.0)*r01);
IkReal x1048=(cj13*pz);
IkReal x1049=((0.156)*x1013);
IkReal x1050=((1.0)*x1017);
IkReal x1051=((0.156)*x1014);
IkReal x1052=(cj17*x1013);
IkReal x1053=(cj17*x1014);
evalcond[0]=(((r01*x1021))+x1053+x1024+((r00*x1023)));
evalcond[1]=((-0.179)+((py*x1021))+x1049+x1048+((px*x1023)));
evalcond[2]=((((-1.0)*x1032*x1045))+x1028+(((-1.0)*x1052))+(((-1.0)*x1019*x1043)));
evalcond[3]=((0.0265)+(((-1.0)*x1018*x1019))+x1051+(((-1.0)*x1025*x1045))+((pz*sj13)));
evalcond[4]=((((-1.0)*px*sj13*x1047))+(((-1.0)*r01*x1019*x1048))+(((0.179)*x1041))+((py*x1038))+((sj17*x1049))+((x1024*x1026))+((cj13*sj12*x1035))+(((-0.179)*x1042))+(((-1.0)*r02*sj12*x1018)));
evalcond[5]=(((pz*r01*x1023))+(((-1.0)*sj17*x1051))+(((-0.0265)*x1042))+((py*x1043))+(((-1.0)*x1021*x1035))+(((0.0265)*x1041))+((x1021*x1022))+(((-1.0)*x1018*x1047))+(((-1.0)*py*x1019*x1028)));
evalcond[6]=(((x1031*x1035))+(((-0.03133875)*x1024))+((r00*x1016*x1023))+((r02*x1039))+(((-1.0)*x1032*x1033))+((r00*x1017*x1023))+(((-0.03133875)*r01*x1021))+(((-1.0)*x1015*x1019*x1038))+(((-1.0)*x1025*x1044))+(((-1.0)*x1022*x1031))+((x1015*x1024))+(((0.358)*x1036))+(((-1.0)*x1023*x1030))+(((0.053)*pz*x1032))+(((-1.0)*x1021*x1034*x1037))+((r01*x1017*x1021))+(((-1.0)*x1024*x1050))+((r01*x1015*x1021))+(((0.024336)*x1053))+(((0.358)*x1046))+(((0.009487)*x1028))+(((-1.0)*x1023*x1027*x1034))+(((-1.0)*py*r02*x1020*x1021))+(((-1.0)*cj13*x1020*x1036))+(((-1.0)*x1020*x1022*x1023))+(((-1.0)*cj12*r00*x1033))+(((-1.0)*r00*x1018*x1020))+((x1016*x1024))+(((-1.0)*x1016*x1021*x1047)));
evalcond[7]=((((0.03133875)*x1028))+(((-1.0)*x1017*x1019*x1043))+(((-1.0)*x1015*x1032*x1045))+(((-1.0)*x1022*x1029))+((cj13*x1016*x1032))+(((-0.053)*x1036))+((cj12*r02*x1018*x1020))+((x1018*x1025*x1037))+((x1015*x1028))+(((-1.0)*px*x1020*x1038))+(((-1.0)*x1016*x1019*x1043))+(((-0.03133875)*cj13*x1032))+(((-1.0)*x1028*x1050))+(((-1.0)*x1017*x1032*x1045))+(((0.009487)*r00*x1023))+((r00*x1015*x1040))+(((0.009487)*r01*x1021))+((x1029*x1035))+((x1018*x1026*x1027))+(((-1.0)*pz*x1044))+(((-0.053)*x1046))+(((0.009487)*x1024))+((x1032*x1039))+(((-0.358)*r02*x1025))+(((-1.0)*sj13*x1020*x1036))+(((-1.0)*x1030*x1040))+((x1020*x1024*x1025))+((x1016*x1028))+(((-0.024336)*x1052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((0.446808510638298)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1054=((3.54609928841723)*sj13);
IkReal x1055=((1.77104279821767)*sj13);
IkReal x1056=(cj12*px);
IkReal x1057=(py*sj12);
IkReal x1058=((1.77104279821767)*cj13);
IkReal x1059=((3.54609928841723)*cj13);
if( IKabs(((0.681684406779452)+((pz*x1055))+(((-1.0)*x1054*x1057))+(((-1.0)*x1054*x1056))+(((-1.0)*pz*x1059))+(((-1.0)*x1056*x1058))+(((-1.0)*x1057*x1058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.223045029737906)+((x1056*x1059))+((x1057*x1059))+(((-1.0)*x1055*x1057))+(((-1.0)*x1055*x1056))+(((-1.0)*pz*x1058))+(((-1.0)*pz*x1054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.681684406779452)+((pz*x1055))+(((-1.0)*x1054*x1057))+(((-1.0)*x1054*x1056))+(((-1.0)*pz*x1059))+(((-1.0)*x1056*x1058))+(((-1.0)*x1057*x1058))))+IKsqr(((0.223045029737906)+((x1056*x1059))+((x1057*x1059))+(((-1.0)*x1055*x1057))+(((-1.0)*x1055*x1056))+(((-1.0)*pz*x1058))+(((-1.0)*pz*x1054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.681684406779452)+((pz*x1055))+(((-1.0)*x1054*x1057))+(((-1.0)*x1054*x1056))+(((-1.0)*pz*x1059))+(((-1.0)*x1056*x1058))+(((-1.0)*x1057*x1058))), ((0.223045029737906)+((x1056*x1059))+((x1057*x1059))+(((-1.0)*x1055*x1057))+(((-1.0)*x1055*x1056))+(((-1.0)*pz*x1058))+(((-1.0)*pz*x1054))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1060=IKsin(j14);
IkReal x1061=IKcos(j14);
IkReal x1062=px*px;
IkReal x1063=py*py;
IkReal x1064=pz*pz;
IkReal x1065=(cj13*px);
IkReal x1066=((1.0)*cj12);
IkReal x1067=((2.0)*pz);
IkReal x1068=(sj12*sj13);
IkReal x1069=(px*r02);
IkReal x1070=(cj12*sj13);
IkReal x1071=(cj13*r02);
IkReal x1072=(py*sj12);
IkReal x1073=(cj12*py);
IkReal x1074=((2.0)*r01);
IkReal x1075=(r02*sj13);
IkReal x1076=((0.358)*cj12);
IkReal x1077=((0.03133875)*r00);
IkReal x1078=((0.053)*cj12);
IkReal x1079=(r01*sj12);
IkReal x1080=((0.009487)*cj13);
IkReal x1081=(px*py);
IkReal x1082=(pz*r00);
IkReal x1083=(py*r01);
IkReal x1084=((2.0)*r00);
IkReal x1085=(r00*sj13);
IkReal x1086=((0.358)*pz);
IkReal x1087=(cj12*cj13);
IkReal x1088=(cj12*r01);
IkReal x1089=(r00*sj12);
IkReal x1090=(cj13*r00);
IkReal x1091=((1.0)*cj13);
IkReal x1092=(px*r00);
IkReal x1093=((1.0)*r01);
IkReal x1094=(cj13*pz);
IkReal x1095=((0.053)*r02);
IkReal x1096=(cj17*x1060);
IkReal x1097=((0.11272333212)*x1060);
IkReal x1098=(cj17*x1061);
IkReal x1099=((1.0)*x1064);
IkReal x1100=(sj17*x1061);
IkReal x1101=((0.225702127707488)*x1060);
evalcond[0]=((-0.179)+x1101+x1094+((py*x1068))+((px*x1070))+(((0.11272333212)*x1061)));
evalcond[1]=((((0.89462962)*x1096))+x1071+((r01*x1068))+((r00*x1070))+(((0.446808510258035)*x1098)));
evalcond[2]=((0.0265)+(((0.225702127707488)*x1061))+(((-1.0)*x1097))+((pz*sj13))+(((-1.0)*x1072*x1091))+(((-1.0)*x1065*x1066)));
evalcond[3]=((((0.89462962)*x1098))+(((-1.0)*x1079*x1091))+(((-0.446808510258035)*x1096))+x1075+(((-1.0)*x1066*x1090)));
evalcond[4]=((((-1.0)*px*sj13*x1093))+((py*x1085))+(((-0.179)*x1089))+((x1071*x1073))+(((0.179)*x1088))+((cj13*sj12*x1082))+(((-1.0)*r02*sj12*x1065))+(((-1.0)*r01*x1066*x1094))+((sj17*x1101))+(((0.11272333212)*x1100)));
evalcond[5]=(((x1068*x1069))+(((-1.0)*x1068*x1082))+(((-1.0)*py*x1066*x1075))+(((-0.225702127707488)*x1100))+(((0.0265)*x1088))+((sj17*x1097))+((pz*r01*x1070))+(((-0.0265)*x1089))+(((-1.0)*x1065*x1093))+((py*x1090)));
evalcond[6]=((((0.358)*x1083))+(((-0.05694138605376)*x1096))+(((-1.0)*cj12*r00*x1080))+(((-1.0)*cj13*x1067*x1083))+((r00*x1063*x1070))+(((-1.0)*py*r02*x1067*x1068))+(((-1.0)*r00*x1065*x1067))+(((-1.0)*x1071*x1099))+((r01*x1064*x1068))+(((0.358)*x1092))+(((-1.0)*x1070*x1077))+((x1078*x1082))+(((-1.0)*x1067*x1069*x1070))+(((-0.03133875)*r01*x1068))+((r00*x1064*x1070))+((x1062*x1071))+((r01*x1062*x1068))+(((-1.0)*x1062*x1066*x1085))+(((-1.0)*x1079*x1080))+(((-1.0)*x1070*x1074*x1081))+(((0.009487)*x1075))+(((-1.0)*x1072*x1095))+((x1063*x1071))+(((-0.03133875)*x1071))+(((0.053)*pz*x1079))+(((-1.0)*x1068*x1081*x1084))+((r02*x1086))+(((-1.0)*x1069*x1078))+(((-1.0)*x1063*x1068*x1093))+(((-0.0284384681213834)*x1098)));
evalcond[7]=(((x1079*x1086))+(((-0.05694138605376)*x1098))+(((-0.053)*x1092))+((x1076*x1082))+(((0.009487)*r01*x1068))+(((0.009487)*r00*x1070))+(((-1.0)*x1064*x1079*x1091))+((cj13*x1063*x1079))+(((-1.0)*pz*x1095))+(((-1.0)*x1064*x1066*x1090))+(((-1.0)*sj13*x1067*x1083))+(((0.0284384681213834)*x1096))+(((-0.358)*r02*x1072))+((x1062*x1075))+((x1067*x1071*x1072))+(((-1.0)*px*x1067*x1085))+(((0.03133875)*x1075))+((x1065*x1073*x1074))+(((0.009487)*x1071))+(((-1.0)*x1063*x1066*x1090))+((cj12*r02*x1065*x1067))+((r00*x1062*x1087))+((x1063*x1075))+((x1065*x1072*x1084))+(((-1.0)*x1075*x1099))+(((-1.0)*x1077*x1087))+(((-1.0)*x1062*x1079*x1091))+(((-0.03133875)*cj13*x1079))+(((-1.0)*x1069*x1076))+(((-0.053)*x1083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.446808510638298)+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1102=((3.54609928841723)*sj13);
IkReal x1103=((1.77104279821767)*sj13);
IkReal x1104=(cj12*px);
IkReal x1105=(py*sj12);
IkReal x1106=((1.77104279821767)*cj13);
IkReal x1107=((3.54609928841723)*cj13);
if( IKabs(((0.587819138473915)+((x1105*x1106))+((x1104*x1106))+(((-1.0)*pz*x1103))+(((-1.0)*pz*x1107))+(((-1.0)*x1102*x1105))+(((-1.0)*x1102*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.410988292024019)+((x1105*x1107))+((x1104*x1107))+(((-1.0)*pz*x1102))+((pz*x1106))+((x1103*x1105))+((x1103*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.587819138473915)+((x1105*x1106))+((x1104*x1106))+(((-1.0)*pz*x1103))+(((-1.0)*pz*x1107))+(((-1.0)*x1102*x1105))+(((-1.0)*x1102*x1104))))+IKsqr(((-0.410988292024019)+((x1105*x1107))+((x1104*x1107))+(((-1.0)*pz*x1102))+((pz*x1106))+((x1103*x1105))+((x1103*x1104))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.587819138473915)+((x1105*x1106))+((x1104*x1106))+(((-1.0)*pz*x1103))+(((-1.0)*pz*x1107))+(((-1.0)*x1102*x1105))+(((-1.0)*x1102*x1104))), ((-0.410988292024019)+((x1105*x1107))+((x1104*x1107))+(((-1.0)*pz*x1102))+((pz*x1106))+((x1103*x1105))+((x1103*x1104))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1108=IKcos(j14);
IkReal x1109=IKsin(j14);
IkReal x1110=px*px;
IkReal x1111=py*py;
IkReal x1112=pz*pz;
IkReal x1113=(cj13*px);
IkReal x1114=((1.0)*cj12);
IkReal x1115=((2.0)*pz);
IkReal x1116=(sj12*sj13);
IkReal x1117=(px*r02);
IkReal x1118=(cj12*sj13);
IkReal x1119=(cj13*r02);
IkReal x1120=(py*sj12);
IkReal x1121=(cj12*py);
IkReal x1122=((2.0)*r01);
IkReal x1123=(r02*sj13);
IkReal x1124=((0.358)*cj12);
IkReal x1125=((0.03133875)*r00);
IkReal x1126=((0.053)*cj12);
IkReal x1127=(r01*sj12);
IkReal x1128=((0.009487)*cj13);
IkReal x1129=(px*py);
IkReal x1130=(pz*r00);
IkReal x1131=(py*r01);
IkReal x1132=((2.0)*r00);
IkReal x1133=(r00*sj13);
IkReal x1134=((0.358)*pz);
IkReal x1135=(cj12*cj13);
IkReal x1136=(cj12*r01);
IkReal x1137=(r00*sj12);
IkReal x1138=(cj13*r00);
IkReal x1139=((1.0)*cj13);
IkReal x1140=(px*r00);
IkReal x1141=((1.0)*r01);
IkReal x1142=(cj13*pz);
IkReal x1143=((0.053)*r02);
IkReal x1144=(cj17*x1109);
IkReal x1145=((0.11272333212)*x1109);
IkReal x1146=(cj17*x1108);
IkReal x1147=((1.0)*x1112);
IkReal x1148=(sj17*x1108);
IkReal x1149=((0.225702127707488)*x1109);
evalcond[0]=((-0.179)+x1142+x1149+((py*x1116))+((px*x1118))+(((-0.11272333212)*x1108)));
evalcond[1]=(x1119+((r01*x1116))+(((0.446808510258035)*x1146))+((r00*x1118))+(((-0.89462962)*x1144)));
evalcond[2]=((0.0265)+x1145+((pz*sj13))+(((-1.0)*x1113*x1114))+(((0.225702127707488)*x1108))+(((-1.0)*x1120*x1139)));
evalcond[3]=(x1123+(((-1.0)*x1114*x1138))+(((-1.0)*x1127*x1139))+(((-0.446808510258035)*x1144))+(((-0.89462962)*x1146)));
evalcond[4]=((((-1.0)*r01*x1114*x1142))+((x1119*x1121))+((cj13*sj12*x1130))+((py*x1133))+(((-1.0)*px*sj13*x1141))+(((0.179)*x1136))+(((-1.0)*r02*sj12*x1113))+(((-0.179)*x1137))+(((-0.11272333212)*x1148))+((sj17*x1149)));
evalcond[5]=((((-1.0)*py*x1114*x1123))+(((0.0265)*x1136))+(((-0.225702127707488)*x1148))+((py*x1138))+(((-1.0)*x1113*x1141))+((x1116*x1117))+(((-1.0)*sj17*x1145))+((pz*r01*x1118))+(((-1.0)*x1116*x1130))+(((-0.0265)*x1137)));
evalcond[6]=(((x1126*x1130))+((x1111*x1119))+(((-0.03133875)*r01*x1116))+(((-1.0)*x1119*x1147))+(((0.05694138605376)*x1144))+(((-1.0)*x1120*x1143))+(((-1.0)*cj12*r00*x1128))+(((0.358)*x1131))+(((-1.0)*cj13*x1115*x1131))+(((-1.0)*x1117*x1126))+(((-1.0)*py*r02*x1115*x1116))+((r00*x1112*x1118))+(((0.009487)*x1123))+(((-1.0)*x1118*x1122*x1129))+(((0.053)*pz*x1127))+((x1110*x1119))+(((-1.0)*x1111*x1116*x1141))+(((-1.0)*x1110*x1114*x1133))+(((-0.03133875)*x1119))+(((0.358)*x1140))+(((-1.0)*x1116*x1129*x1132))+(((-1.0)*x1127*x1128))+(((-1.0)*x1115*x1117*x1118))+((r01*x1110*x1116))+(((-1.0)*r00*x1113*x1115))+((r00*x1111*x1118))+(((-0.0284384681213834)*x1146))+((r01*x1112*x1116))+((r02*x1134))+(((-1.0)*x1118*x1125)));
evalcond[7]=(((x1113*x1121*x1122))+(((-1.0)*x1112*x1114*x1138))+((cj13*x1111*x1127))+(((0.05694138605376)*x1146))+((x1115*x1119*x1120))+(((0.0284384681213834)*x1144))+(((-1.0)*x1123*x1147))+(((-1.0)*x1117*x1124))+(((-0.03133875)*cj13*x1127))+(((-0.358)*r02*x1120))+(((-1.0)*sj13*x1115*x1131))+((x1111*x1123))+(((-1.0)*x1112*x1127*x1139))+(((0.03133875)*x1123))+((x1110*x1123))+(((-0.053)*x1131))+(((-1.0)*px*x1115*x1133))+(((0.009487)*r01*x1116))+((r00*x1110*x1135))+((x1124*x1130))+(((0.009487)*r00*x1118))+(((-1.0)*x1111*x1114*x1138))+((x1113*x1120*x1132))+(((-0.053)*x1140))+(((0.009487)*x1119))+(((-1.0)*x1110*x1127*x1139))+(((-1.0)*pz*x1143))+((cj12*r02*x1113*x1115))+(((-1.0)*x1125*x1135))+((x1127*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(cj17,-1);
if(!x1161.valid){
continue;
}
IkReal x1150=x1161.value;
IkReal x1151=(cj12*px);
IkReal x1152=(r02*sj13);
IkReal x1153=((63.0)*cj15);
IkReal x1154=(py*sj12);
IkReal x1155=((89.5)*cj17);
IkReal x1156=((500.0)*cj17*sj13);
IkReal x1157=((-0.00709219858156028)*x1150);
IkReal x1158=(cj12*cj13*r00);
IkReal x1159=(cj13*r01*sj12);
IkReal x1160=((500.0)*cj13*cj17*pz);
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(sj15,-1);
if(!x1162.valid){
continue;
}
if( IKabs((x1157*(((((-63.0)*x1152))+x1160+(((-1.0)*x1155))+((x1151*x1156))+(((63.0)*x1159))+(((63.0)*x1158))+((x1154*x1156)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1157*(x1162.value)*(((((-1.0)*cj15*x1151*x1156))+((cj15*x1155))+(((141.0)*x1152))+((x1152*x1153))+(((-1.0)*cj15*x1160))+(((-1.0)*cj15*x1154*x1156))+(((-1.0)*x1153*x1158))+(((-1.0)*x1153*x1159))+(((-141.0)*x1159))+(((-141.0)*x1158)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1157*(((((-63.0)*x1152))+x1160+(((-1.0)*x1155))+((x1151*x1156))+(((63.0)*x1159))+(((63.0)*x1158))+((x1154*x1156))))))+IKsqr((x1157*(x1162.value)*(((((-1.0)*cj15*x1151*x1156))+((cj15*x1155))+(((141.0)*x1152))+((x1152*x1153))+(((-1.0)*cj15*x1160))+(((-1.0)*cj15*x1154*x1156))+(((-1.0)*x1153*x1158))+(((-1.0)*x1153*x1159))+(((-141.0)*x1159))+(((-141.0)*x1158))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x1157*(((((-63.0)*x1152))+x1160+(((-1.0)*x1155))+((x1151*x1156))+(((63.0)*x1159))+(((63.0)*x1158))+((x1154*x1156))))), (x1157*(x1162.value)*(((((-1.0)*cj15*x1151*x1156))+((cj15*x1155))+(((141.0)*x1152))+((x1152*x1153))+(((-1.0)*cj15*x1160))+(((-1.0)*cj15*x1154*x1156))+(((-1.0)*x1153*x1158))+(((-1.0)*x1153*x1159))+(((-141.0)*x1159))+(((-141.0)*x1158))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1163=IKsin(j14);
IkReal x1164=IKcos(j14);
IkReal x1165=px*px;
IkReal x1166=py*py;
IkReal x1167=pz*pz;
IkReal x1168=(cj13*px);
IkReal x1169=((1.0)*cj12);
IkReal x1170=((2.0)*pz);
IkReal x1171=(sj12*sj13);
IkReal x1172=(px*r02);
IkReal x1173=(cj12*sj13);
IkReal x1174=(cj13*r02);
IkReal x1175=(py*sj12);
IkReal x1176=(cj12*py);
IkReal x1177=((2.0)*r01);
IkReal x1178=(r02*sj13);
IkReal x1179=((0.358)*cj12);
IkReal x1180=((0.03133875)*r00);
IkReal x1181=((0.063648)*sj15);
IkReal x1182=((0.053)*cj12);
IkReal x1183=(r01*sj12);
IkReal x1184=((0.009487)*cj13);
IkReal x1185=(px*py);
IkReal x1186=(pz*r00);
IkReal x1187=(py*r01);
IkReal x1188=((2.0)*r00);
IkReal x1189=(r00*sj13);
IkReal x1190=((0.358)*pz);
IkReal x1191=((1.0)*r01);
IkReal x1192=(cj15*sj17);
IkReal x1193=(cj12*r01);
IkReal x1194=(r00*sj12);
IkReal x1195=((0.0954)*cj15);
IkReal x1196=(cj13*r00);
IkReal x1197=((1.0)*cj13);
IkReal x1198=(sj15*sj17);
IkReal x1199=(cj13*pz);
IkReal x1200=((0.053)*r02);
IkReal x1201=(px*r00);
IkReal x1202=(cj17*x1164);
IkReal x1203=((0.126)*x1164);
IkReal x1204=((1.0)*x1167);
IkReal x1205=(cj17*x1163);
IkReal x1206=((0.126)*x1163);
IkReal x1207=((0.282)*x1163);
IkReal x1208=((0.282)*x1164);
evalcond[0]=(x1174+((r01*x1171))+((r00*x1173))+(((-1.0)*cj15*x1202))+((sj15*x1205)));
evalcond[1]=(x1178+(((-1.0)*x1169*x1196))+(((-1.0)*x1183*x1197))+((sj15*x1202))+((cj15*x1205)));
evalcond[2]=((-0.179)+x1199+x1207+((px*x1173))+((py*x1171))+((sj15*x1203))+((cj15*x1206)));
evalcond[3]=((0.0265)+x1208+(((-1.0)*x1168*x1169))+((pz*sj13))+(((-1.0)*sj15*x1206))+((cj15*x1203))+(((-1.0)*x1175*x1197)));
evalcond[4]=(((x1174*x1176))+((sj17*x1207))+((x1192*x1206))+((py*x1189))+(((0.179)*x1193))+(((-1.0)*r01*x1169*x1199))+((cj13*sj12*x1186))+(((-1.0)*r02*sj12*x1168))+(((-0.179)*x1194))+(((-1.0)*px*sj13*x1191))+((x1198*x1203)));
evalcond[5]=((((-1.0)*x1171*x1186))+((py*x1196))+(((-1.0)*py*x1169*x1178))+(((-1.0)*sj17*x1208))+((pz*r01*x1173))+(((-0.0265)*x1194))+(((-1.0)*x1192*x1203))+((x1171*x1172))+((x1198*x1206))+(((-1.0)*x1168*x1191))+(((0.0265)*x1193)));
evalcond[6]=((((-1.0)*pz*x1200))+(((-1.0)*sj13*x1170*x1187))+(((-0.03133875)*cj13*x1183))+(((-1.0)*cj12*cj13*x1180))+((x1168*x1176*x1177))+((x1166*x1178))+(((-1.0)*x1181*x1202))+(((-1.0)*px*x1170*x1189))+((x1165*x1178))+(((-0.053)*x1187))+((x1183*x1190))+(((-0.358)*r02*x1175))+((x1179*x1186))+(((-1.0)*x1178*x1204))+((cj13*x1166*x1183))+(((-1.0)*x1172*x1179))+((x1168*x1175*x1188))+(((0.009487)*x1174))+(((0.009487)*r01*x1171))+(((0.03133875)*x1178))+(((0.009487)*r00*x1173))+(((-1.0)*x1166*x1169*x1196))+((cj12*r02*x1168*x1170))+(((0.071064)*x1205))+((x1195*x1205))+(((-1.0)*x1165*x1183*x1197))+(((-0.053)*x1201))+(((-1.0)*x1167*x1183*x1197))+((x1170*x1174*x1175))+(((-1.0)*x1167*x1169*x1196))+((cj12*x1165*x1196)));
evalcond[7]=((((-0.03133875)*r01*x1171))+(((0.053)*pz*x1183))+(((0.358)*x1187))+((x1166*x1174))+(((-1.0)*x1181*x1205))+((x1182*x1186))+((x1165*x1174))+(((-0.071064)*x1202))+(((0.358)*x1201))+(((0.009487)*x1178))+((r01*x1167*x1171))+((r00*x1166*x1173))+((r00*x1167*x1173))+(((-1.0)*x1172*x1182))+(((-1.0)*x1173*x1177*x1185))+(((-1.0)*x1166*x1171*x1191))+(((-1.0)*py*r02*x1170*x1171))+(((-1.0)*x1174*x1204))+((r02*x1190))+(((-1.0)*x1171*x1185*x1188))+(((-1.0)*x1173*x1180))+(((-1.0)*x1175*x1200))+(((-1.0)*x1183*x1184))+((r01*x1165*x1171))+(((-1.0)*r00*x1168*x1170))+(((-1.0)*x1170*x1172*x1173))+(((-0.03133875)*x1174))+(((-1.0)*x1195*x1202))+(((-1.0)*x1165*x1169*x1189))+(((-1.0)*cj13*x1170*x1187))+(((-1.0)*cj12*r00*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1209=(sj12*sj13);
IkReal x1210=(cj15*cj17);
IkReal x1211=((500.0)*py);
IkReal x1212=((63.0)*sj15);
IkReal x1213=(cj13*r02);
IkReal x1214=((63.0)*cj15);
IkReal x1215=(cj17*sj15);
IkReal x1216=(cj12*r00*sj13);
IkReal x1217=((500.0)*cj13*pz);
IkReal x1218=((500.0)*cj12*px*sj13);
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(((((89.5)*x1210))+(((-1.0)*r01*x1209*x1212))+(((-1.0)*x1212*x1216))+(((-1.0)*x1212*x1213))+(((-1.0)*x1210*x1217))+(((-1.0)*x1210*x1218))+(((-1.0)*x1209*x1210*x1211)))),IkReal((((x1214*x1216))+(((141.0)*x1213))+(((141.0)*x1216))+(((-1.0)*x1215*x1218))+(((-1.0)*x1215*x1217))+((x1213*x1214))+(((89.5)*x1215))+((r01*x1209*x1214))+(((-1.0)*x1209*x1211*x1215))+(((141.0)*r01*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(IKsign(((((141.0)*x1210))+(((63.0)*cj17)))),-1);
if(!x1220.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1219.value)+(((1.5707963267949)*(x1220.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1221=IKsin(j14);
IkReal x1222=IKcos(j14);
IkReal x1223=px*px;
IkReal x1224=py*py;
IkReal x1225=pz*pz;
IkReal x1226=(cj13*px);
IkReal x1227=((1.0)*cj12);
IkReal x1228=((2.0)*pz);
IkReal x1229=(sj12*sj13);
IkReal x1230=(px*r02);
IkReal x1231=(cj12*sj13);
IkReal x1232=(cj13*r02);
IkReal x1233=(py*sj12);
IkReal x1234=(cj12*py);
IkReal x1235=((2.0)*r01);
IkReal x1236=(r02*sj13);
IkReal x1237=((0.358)*cj12);
IkReal x1238=((0.03133875)*r00);
IkReal x1239=((0.063648)*sj15);
IkReal x1240=((0.053)*cj12);
IkReal x1241=(r01*sj12);
IkReal x1242=((0.009487)*cj13);
IkReal x1243=(px*py);
IkReal x1244=(pz*r00);
IkReal x1245=(py*r01);
IkReal x1246=((2.0)*r00);
IkReal x1247=(r00*sj13);
IkReal x1248=((0.358)*pz);
IkReal x1249=((1.0)*r01);
IkReal x1250=(cj15*sj17);
IkReal x1251=(cj12*r01);
IkReal x1252=(r00*sj12);
IkReal x1253=((0.0954)*cj15);
IkReal x1254=(cj13*r00);
IkReal x1255=((1.0)*cj13);
IkReal x1256=(sj15*sj17);
IkReal x1257=(cj13*pz);
IkReal x1258=((0.053)*r02);
IkReal x1259=(px*r00);
IkReal x1260=(cj17*x1222);
IkReal x1261=((0.126)*x1222);
IkReal x1262=((1.0)*x1225);
IkReal x1263=(cj17*x1221);
IkReal x1264=((0.126)*x1221);
IkReal x1265=((0.282)*x1221);
IkReal x1266=((0.282)*x1222);
evalcond[0]=(x1232+((r00*x1231))+((r01*x1229))+((sj15*x1263))+(((-1.0)*cj15*x1260)));
evalcond[1]=(x1236+((sj15*x1260))+(((-1.0)*x1227*x1254))+(((-1.0)*x1241*x1255))+((cj15*x1263)));
evalcond[2]=((-0.179)+x1265+x1257+((sj15*x1261))+((py*x1229))+((px*x1231))+((cj15*x1264)));
evalcond[3]=((0.0265)+x1266+(((-1.0)*x1233*x1255))+(((-1.0)*sj15*x1264))+(((-1.0)*x1226*x1227))+((pz*sj13))+((cj15*x1261)));
evalcond[4]=(((sj17*x1265))+(((-1.0)*px*sj13*x1249))+(((-1.0)*r02*sj12*x1226))+(((-1.0)*r01*x1227*x1257))+(((0.179)*x1251))+((py*x1247))+((x1256*x1261))+((x1250*x1264))+((x1232*x1234))+(((-0.179)*x1252))+((cj13*sj12*x1244)));
evalcond[5]=((((0.0265)*x1251))+(((-1.0)*x1229*x1244))+(((-0.0265)*x1252))+(((-1.0)*sj17*x1266))+((x1256*x1264))+(((-1.0)*x1226*x1249))+(((-1.0)*x1250*x1261))+((pz*r01*x1231))+(((-1.0)*py*x1227*x1236))+((x1229*x1230))+((py*x1254)));
evalcond[6]=((((0.009487)*r00*x1231))+(((-1.0)*x1223*x1241*x1255))+(((0.009487)*r01*x1229))+((cj13*x1224*x1241))+(((-1.0)*cj12*cj13*x1238))+(((-1.0)*x1225*x1227*x1254))+(((-1.0)*x1224*x1227*x1254))+(((-1.0)*x1230*x1237))+((x1223*x1236))+(((-1.0)*x1225*x1241*x1255))+((x1224*x1236))+(((-1.0)*x1239*x1260))+((x1253*x1263))+(((-0.03133875)*cj13*x1241))+((cj12*x1223*x1254))+(((-0.053)*x1259))+((x1226*x1234*x1235))+(((-1.0)*px*x1228*x1247))+((cj12*r02*x1226*x1228))+((x1241*x1248))+(((0.009487)*x1232))+((x1228*x1232*x1233))+((x1226*x1233*x1246))+(((-1.0)*pz*x1258))+(((-1.0)*x1236*x1262))+(((-1.0)*sj13*x1228*x1245))+(((0.03133875)*x1236))+(((0.071064)*x1263))+(((-0.053)*x1245))+(((-0.358)*r02*x1233))+((x1237*x1244)));
evalcond[7]=((((0.358)*x1259))+((r01*x1225*x1229))+(((0.053)*pz*x1241))+(((-1.0)*x1233*x1258))+(((-0.03133875)*x1232))+(((-1.0)*x1231*x1235*x1243))+(((-1.0)*x1223*x1227*x1247))+(((-1.0)*x1253*x1260))+(((-1.0)*r00*x1226*x1228))+((x1223*x1232))+((x1240*x1244))+((r00*x1225*x1231))+((x1224*x1232))+(((-1.0)*x1239*x1263))+((r00*x1224*x1231))+(((-0.071064)*x1260))+(((-0.03133875)*r01*x1229))+(((-1.0)*x1229*x1243*x1246))+(((-1.0)*cj12*r00*x1242))+(((0.358)*x1245))+(((-1.0)*x1230*x1240))+((r01*x1223*x1229))+((r02*x1248))+(((-1.0)*cj13*x1228*x1245))+(((-1.0)*x1232*x1262))+(((-1.0)*x1228*x1230*x1231))+(((0.009487)*x1236))+(((-1.0)*x1241*x1242))+(((-1.0)*x1224*x1229*x1249))+(((-1.0)*py*r02*x1228*x1229))+(((-1.0)*x1231*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1267=(cj15*sj13);
IkReal x1268=(cj12*r00);
IkReal x1269=(r01*sj12);
IkReal x1270=(cj13*cj15);
IkReal x1271=(cj13*sj15);
IkReal x1272=((1.0)*r02);
IkReal x1273=((1.0)*sj13*sj15);
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x1274.valid){
continue;
}
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal((((x1269*x1270))+(((-1.0)*x1268*x1273))+(((-1.0)*x1267*x1272))+(((-1.0)*x1271*x1272))+(((-1.0)*x1269*x1273))+((x1268*x1270)))),IkReal((((x1269*x1271))+((r02*x1270))+((x1267*x1269))+((x1267*x1268))+((x1268*x1271))+(((-1.0)*sj13*sj15*x1272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1274.value)))+(x1275.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1276=IKsin(j14);
IkReal x1277=IKcos(j14);
IkReal x1278=px*px;
IkReal x1279=py*py;
IkReal x1280=pz*pz;
IkReal x1281=(cj13*px);
IkReal x1282=((1.0)*cj12);
IkReal x1283=((2.0)*pz);
IkReal x1284=(sj12*sj13);
IkReal x1285=(px*r02);
IkReal x1286=(cj12*sj13);
IkReal x1287=(cj13*r02);
IkReal x1288=(py*sj12);
IkReal x1289=(cj12*py);
IkReal x1290=((2.0)*r01);
IkReal x1291=(r02*sj13);
IkReal x1292=((0.358)*cj12);
IkReal x1293=((0.03133875)*r00);
IkReal x1294=((0.063648)*sj15);
IkReal x1295=((0.053)*cj12);
IkReal x1296=(r01*sj12);
IkReal x1297=((0.009487)*cj13);
IkReal x1298=(px*py);
IkReal x1299=(pz*r00);
IkReal x1300=(py*r01);
IkReal x1301=((2.0)*r00);
IkReal x1302=(r00*sj13);
IkReal x1303=((0.358)*pz);
IkReal x1304=((1.0)*r01);
IkReal x1305=(cj15*sj17);
IkReal x1306=(cj12*r01);
IkReal x1307=(r00*sj12);
IkReal x1308=((0.0954)*cj15);
IkReal x1309=(cj13*r00);
IkReal x1310=((1.0)*cj13);
IkReal x1311=(sj15*sj17);
IkReal x1312=(cj13*pz);
IkReal x1313=((0.053)*r02);
IkReal x1314=(px*r00);
IkReal x1315=(cj17*x1277);
IkReal x1316=((0.126)*x1277);
IkReal x1317=((1.0)*x1280);
IkReal x1318=(cj17*x1276);
IkReal x1319=((0.126)*x1276);
IkReal x1320=((0.282)*x1276);
IkReal x1321=((0.282)*x1277);
evalcond[0]=((((-1.0)*cj15*x1315))+x1287+((r01*x1284))+((r00*x1286))+((sj15*x1318)));
evalcond[1]=(((cj15*x1318))+x1291+(((-1.0)*x1296*x1310))+(((-1.0)*x1282*x1309))+((sj15*x1315)));
evalcond[2]=((-0.179)+x1312+x1320+((cj15*x1319))+((px*x1286))+((sj15*x1316))+((py*x1284)));
evalcond[3]=((0.0265)+x1321+((cj15*x1316))+((pz*sj13))+(((-1.0)*sj15*x1319))+(((-1.0)*x1288*x1310))+(((-1.0)*x1281*x1282)));
evalcond[4]=(((x1311*x1316))+((py*x1302))+((x1305*x1319))+(((0.179)*x1306))+(((-1.0)*px*sj13*x1304))+(((-1.0)*r02*sj12*x1281))+(((-0.179)*x1307))+((x1287*x1289))+((cj13*sj12*x1299))+((sj17*x1320))+(((-1.0)*r01*x1282*x1312)));
evalcond[5]=(((pz*r01*x1286))+((x1311*x1319))+(((-1.0)*py*x1282*x1291))+(((-1.0)*sj17*x1321))+((py*x1309))+((x1284*x1285))+(((-0.0265)*x1307))+(((0.0265)*x1306))+(((-1.0)*x1305*x1316))+(((-1.0)*x1284*x1299))+(((-1.0)*x1281*x1304)));
evalcond[6]=((((-1.0)*px*x1283*x1302))+(((-1.0)*sj13*x1283*x1300))+(((-0.358)*r02*x1288))+(((0.071064)*x1318))+(((-1.0)*x1280*x1296*x1310))+(((-1.0)*cj12*cj13*x1293))+((x1308*x1318))+(((0.009487)*r01*x1284))+(((-1.0)*x1279*x1282*x1309))+(((0.009487)*r00*x1286))+(((-0.03133875)*cj13*x1296))+(((-1.0)*x1294*x1315))+(((-0.053)*x1314))+((cj12*r02*x1281*x1283))+(((-1.0)*x1291*x1317))+((x1279*x1291))+((cj12*x1278*x1309))+((x1278*x1291))+((x1283*x1287*x1288))+((x1281*x1288*x1301))+(((0.03133875)*x1291))+(((-1.0)*pz*x1313))+(((-1.0)*x1278*x1296*x1310))+(((-0.053)*x1300))+(((0.009487)*x1287))+(((-1.0)*x1285*x1292))+((x1281*x1289*x1290))+((x1296*x1303))+((cj13*x1279*x1296))+(((-1.0)*x1280*x1282*x1309))+((x1292*x1299)));
evalcond[7]=((((0.053)*pz*x1296))+(((-1.0)*x1283*x1285*x1286))+(((-1.0)*x1284*x1298*x1301))+((x1279*x1287))+(((-1.0)*x1286*x1293))+((x1278*x1287))+(((0.009487)*x1291))+(((-0.03133875)*x1287))+((r00*x1280*x1286))+((r00*x1279*x1286))+(((-1.0)*x1308*x1315))+(((-1.0)*x1287*x1317))+((x1295*x1299))+(((-1.0)*cj12*r00*x1297))+(((-1.0)*x1278*x1282*x1302))+(((-1.0)*x1279*x1284*x1304))+(((-1.0)*py*r02*x1283*x1284))+(((-1.0)*r00*x1281*x1283))+(((-0.071064)*x1315))+(((-1.0)*x1294*x1318))+(((-1.0)*cj13*x1283*x1300))+(((-1.0)*x1288*x1313))+(((-1.0)*x1286*x1290*x1298))+(((0.358)*x1314))+((r01*x1278*x1284))+((r02*x1303))+(((0.358)*x1300))+(((-1.0)*x1285*x1295))+(((-1.0)*x1296*x1297))+((r01*x1280*x1284))+(((-0.03133875)*r01*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1322=((89.5)*cj13);
IkReal x1323=(r01*sj12);
IkReal x1324=((500.0)*r00);
IkReal x1325=((13.25)*cj13);
IkReal x1326=(cj12*r00);
IkReal x1327=((13.25)*sj13);
IkReal x1328=((500.0)*py);
IkReal x1329=((89.5)*sj13);
IkReal x1330=((500.0)*pz);
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal((((r01*x1328))+(((-1.0)*x1323*x1325))+(((-1.0)*x1323*x1329))+((px*x1324))+(((-1.0)*x1326*x1329))+(((-1.0)*r02*x1322))+(((-1.0)*x1325*x1326))+((r02*x1327))+((r02*x1330)))),IkReal(((((500.0)*cj12*px*r02))+(((-1.0)*x1323*x1327))+(((-1.0)*x1323*x1330))+((x1322*x1326))+((x1322*x1323))+(((-1.0)*x1326*x1327))+(((-1.0)*r02*x1329))+(((-1.0)*r02*x1325))+(((-63.0)*cj17))+((r02*sj12*x1328))+(((-1.0)*cj12*pz*x1324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x1332.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x1331.value)+(((1.5707963267949)*(x1332.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1333=IKcos(j15);
IkReal x1334=pz*pz;
IkReal x1335=py*py;
IkReal x1336=px*px;
IkReal x1337=(cj13*r02);
IkReal x1338=(px*r00);
IkReal x1339=(pz*r02);
IkReal x1340=(px*r01);
IkReal x1341=(py*sj12);
IkReal x1342=(cj13*sj12);
IkReal x1343=(pz*r00);
IkReal x1344=((0.358)*sj13);
IkReal x1345=((0.179)*r01);
IkReal x1346=(pz*r01);
IkReal x1347=(cj12*cj13);
IkReal x1348=((0.053)*px);
IkReal x1349=((0.053)*sj13);
IkReal x1350=(cj12*py);
IkReal x1351=(cj12*r01);
IkReal x1352=((1.0)*r02);
IkReal x1353=(cj12*px);
IkReal x1354=((0.053)*cj13);
IkReal x1355=(py*r00);
IkReal x1356=((0.0265)*sj13);
IkReal x1357=(sj12*sj13);
IkReal x1358=((0.179)*r00);
IkReal x1359=(px*sj12);
IkReal x1360=(r00*sj12);
IkReal x1361=((0.282)*cj17);
IkReal x1362=((2.0)*x1350);
IkReal x1363=((1.0)*x1334);
IkReal x1364=((1.0)*x1336);
IkReal x1365=((0.071064)*x1333);
evalcond[0]=(((cj12*sj13*x1358))+((x1345*x1357))+(((-1.0)*x1338))+(((-1.0)*x1339))+(((-1.0)*r02*x1356))+(((0.179)*x1337))+((x1361*(IKsin(j15))))+(((-1.0)*py*r01))+(((0.0265)*r01*x1342))+(((0.0265)*r00*x1347)));
evalcond[1]=((0.06265675)+x1365+(((-1.0)*pz*x1349))+(((-1.0)*x1335))+((x1344*x1353))+((x1341*x1344))+((x1347*x1348))+((x1341*x1354))+(((0.358)*cj13*pz))+(((-1.0)*x1363))+(((-1.0)*x1364)));
evalcond[2]=((((-1.0)*x1341*x1352))+(((-1.0)*x1352*x1353))+((cj12*r00*x1356))+((x1333*x1361))+(((-1.0)*x1347*x1358))+(((0.126)*cj17))+((r01*sj12*x1356))+(((0.0265)*x1337))+(((0.179)*r02*sj13))+(((-1.0)*x1342*x1345))+((cj12*x1343))+((sj12*x1346)));
evalcond[3]=((((0.358)*x1337*x1359))+((r02*x1349*x1350))+(((-1.0)*x1354*x1355))+((x1340*x1354))+((x1334*x1360))+((sj12*x1343*x1349))+((x1339*x1362))+(((-0.03274325)*x1351))+(((-1.0)*cj12*x1346*x1349))+((x1340*x1344))+(((-0.0954)*sj17))+(((-1.0)*sj17*x1365))+((x1335*x1360))+((x1335*x1351))+(((0.358)*x1346*x1347))+(((-0.358)*x1342*x1343))+(((-1.0)*x1344*x1355))+((x1338*x1362))+(((-2.0)*x1340*x1341))+(((-2.0)*x1339*x1359))+(((-0.358)*x1337*x1350))+(((-1.0)*x1360*x1364))+(((-1.0)*x1351*x1364))+(((-1.0)*x1351*x1363))+(((-1.0)*r02*x1348*x1357))+(((0.03274325)*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=IKsign(cj17);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1366=(cj15*cj17);
j14eval[0]=(cj17+(((2.23809523809524)*x1366)));
j14eval[1]=IKsign(((((63.0)*cj17))+(((141.0)*x1366))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj17;
j14eval[1]=sj15;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=1.0;
cj17=0;
j17=1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1367=(cj12*px);
IkReal x1368=((70500.0)*cj13);
IkReal x1369=((31500.0)*cj15);
IkReal x1370=(py*sj12);
IkReal x1371=((31500.0)*sj15);
IkReal x1372=(cj13*pz);
IkReal x1373=(pz*sj13);
IkReal x1374=((70500.0)*sj13);
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*pz*x1368))+(((-1.0)*x1370*x1374))+(((-1.0)*sj13*x1367*x1369))+((x1371*x1373))+(((5638.5)*cj15))+(((-1.0)*sj13*x1369*x1370))+(((-1.0)*cj13*x1367*x1371))+(((-1.0)*x1367*x1374))+(((-1.0)*cj13*x1370*x1371))+(((-1.0)*x1369*x1372))+(((834.75)*sj15)))),IkReal(((-1868.25)+(((-1.0)*sj13*x1370*x1371))+((x1367*x1368))+(((-70500.0)*x1373))+((cj13*x1367*x1369))+(((-1.0)*x1371*x1372))+(((5638.5)*sj15))+(((-834.75)*cj15))+((cj13*x1369*x1370))+((x1368*x1370))+(((-1.0)*sj13*x1367*x1371))+(((-1.0)*x1369*x1373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x1377=IKsin(j14);
IkReal x1378=IKcos(j14);
IkReal x1379=(sj12*sj13);
IkReal x1380=(px*r02);
IkReal x1381=((1.0)*px);
IkReal x1382=(cj12*cj13);
IkReal x1383=((0.126)*cj15);
IkReal x1384=(cj13*r00);
IkReal x1385=(r01*sj13);
IkReal x1386=((0.126)*sj15);
IkReal x1387=(cj12*r01);
IkReal x1388=(py*r02);
IkReal x1389=(r00*sj12);
IkReal x1390=(cj12*sj13);
IkReal x1391=((1.0)*pz);
IkReal x1392=((0.282)*x1377);
IkReal x1393=((0.282)*x1378);
IkReal x1394=((1.0)*cj13*sj12);
IkReal x1395=(x1377*x1383);
IkReal x1396=(x1378*x1386);
IkReal x1397=(x1377*x1386);
IkReal x1398=(x1378*x1383);
IkReal x1399=(x1398+x1393);
IkReal x1400=(x1396+x1395+x1392);
evalcond[0]=((-0.179)+((px*x1390))+((cj13*pz))+((py*x1379))+x1400);
evalcond[1]=((0.0265)+x1399+((pz*sj13))+(((-1.0)*x1381*x1382))+(((-1.0)*py*x1394))+(((-1.0)*x1397)));
evalcond[2]=((((-0.179)*x1389))+(((-1.0)*r01*x1382*x1391))+((pz*sj12*x1384))+((py*r00*sj13))+(((-1.0)*x1380*x1394))+x1400+(((-1.0)*x1381*x1385))+(((0.179)*x1387))+((x1382*x1388)));
evalcond[3]=(x1397+(((-1.0)*x1388*x1390))+(((-1.0)*cj13*r01*x1381))+((py*x1384))+(((-0.0265)*x1389))+((x1379*x1380))+((cj12*pz*x1385))+(((0.0265)*x1387))+(((-1.0)*r00*x1379*x1391))+(((-1.0)*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj17=-1.0;
cj17=0;
j17=-1.5707963267949;
j14eval[0]=((1.34245187436677)+cj15);
j14eval[1]=IKsign(((23850.0)+(((17766.0)*cj15))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1401=(cj12*px);
IkReal x1402=((70500.0)*cj13);
IkReal x1403=((31500.0)*cj15);
IkReal x1404=(py*sj12);
IkReal x1405=((31500.0)*sj15);
IkReal x1406=(cj13*pz);
IkReal x1407=(pz*sj13);
IkReal x1408=((70500.0)*sj13);
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(IKsign(((23850.0)+(((17766.0)*cj15)))),-1);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal(((12619.5)+(((-1.0)*cj13*x1401*x1405))+(((-1.0)*sj13*x1401*x1403))+(((-1.0)*sj13*x1403*x1404))+((x1405*x1407))+(((-1.0)*x1404*x1408))+(((-1.0)*cj13*x1404*x1405))+(((5638.5)*cj15))+(((-1.0)*x1401*x1408))+(((-1.0)*pz*x1402))+(((-1.0)*x1403*x1406))+(((834.75)*sj15)))),IkReal(((-1868.25)+(((-1.0)*sj13*x1401*x1405))+(((-1.0)*sj13*x1404*x1405))+(((5638.5)*sj15))+(((-1.0)*x1405*x1406))+(((-834.75)*cj15))+(((-70500.0)*x1407))+((cj13*x1401*x1403))+((x1402*x1404))+((cj13*x1403*x1404))+(((-1.0)*x1403*x1407))+((x1401*x1402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1409.value)))+(x1410.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x1411=IKsin(j14);
IkReal x1412=IKcos(j14);
IkReal x1413=(sj12*sj13);
IkReal x1414=(px*r02);
IkReal x1415=((1.0)*px);
IkReal x1416=(cj12*cj13);
IkReal x1417=((0.126)*cj15);
IkReal x1418=(cj13*r00);
IkReal x1419=(r01*sj13);
IkReal x1420=((0.126)*sj15);
IkReal x1421=(cj12*r01);
IkReal x1422=(py*r02);
IkReal x1423=(r00*sj12);
IkReal x1424=(cj12*sj13);
IkReal x1425=((1.0)*pz);
IkReal x1426=((0.282)*x1411);
IkReal x1427=((0.282)*x1412);
IkReal x1428=((1.0)*cj13*sj12);
IkReal x1429=(x1411*x1417);
IkReal x1430=(x1412*x1420);
IkReal x1431=(x1412*x1417);
IkReal x1432=(x1411*x1420);
IkReal x1433=(x1427+x1431);
IkReal x1434=(x1426+x1429+x1430);
evalcond[0]=((-0.179)+((cj13*pz))+((py*x1413))+x1434+((px*x1424)));
evalcond[1]=((0.0265)+(((-1.0)*x1415*x1416))+(((-1.0)*py*x1428))+(((-1.0)*x1432))+((pz*sj13))+x1433);
evalcond[2]=((((-1.0)*x1415*x1419))+(((-1.0)*r01*x1416*x1425))+(((-0.179)*x1423))+(((0.179)*x1421))+(((-1.0)*x1434))+((py*r00*sj13))+(((-1.0)*x1414*x1428))+((pz*sj12*x1418))+((x1416*x1422)));
evalcond[3]=(((py*x1418))+(((-1.0)*cj13*r01*x1415))+((x1413*x1414))+(((-1.0)*x1422*x1424))+((cj12*pz*x1419))+(((0.0265)*x1421))+(((-1.0)*r00*x1413*x1425))+(((-1.0)*x1432))+x1433+(((-0.0265)*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1435=((2.45098039215686)*sj13);
IkReal x1436=(py*sj12);
IkReal x1437=(cj12*px);
IkReal x1438=((2.45098039215686)*cj13);
if( IKabs(((0.438725490196078)+(((-1.0)*x1435*x1436))+(((-1.0)*x1435*x1437))+(((-1.0)*pz*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0649509803921569)+((x1436*x1438))+((x1437*x1438))+(((-1.0)*pz*x1435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.438725490196078)+(((-1.0)*x1435*x1436))+(((-1.0)*x1435*x1437))+(((-1.0)*pz*x1438))))+IKsqr(((-0.0649509803921569)+((x1436*x1438))+((x1437*x1438))+(((-1.0)*pz*x1435))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.438725490196078)+(((-1.0)*x1435*x1436))+(((-1.0)*x1435*x1437))+(((-1.0)*pz*x1438))), ((-0.0649509803921569)+((x1436*x1438))+((x1437*x1438))+(((-1.0)*pz*x1435))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1439=IKsin(j14);
IkReal x1440=IKcos(j14);
IkReal x1441=px*px;
IkReal x1442=py*py;
IkReal x1443=pz*pz;
IkReal x1444=(cj13*px);
IkReal x1445=((1.0)*cj12);
IkReal x1446=((2.0)*pz);
IkReal x1447=(sj12*sj13);
IkReal x1448=(px*r02);
IkReal x1449=(cj12*sj13);
IkReal x1450=(cj13*r02);
IkReal x1451=(py*sj12);
IkReal x1452=(cj12*py);
IkReal x1453=((2.0)*r01);
IkReal x1454=(r02*sj13);
IkReal x1455=((0.358)*cj12);
IkReal x1456=((0.03133875)*r00);
IkReal x1457=((0.053)*cj12);
IkReal x1458=(r01*sj12);
IkReal x1459=((0.009487)*cj13);
IkReal x1460=(px*py);
IkReal x1461=(pz*r00);
IkReal x1462=(py*r01);
IkReal x1463=((2.0)*r00);
IkReal x1464=(r00*sj13);
IkReal x1465=((0.358)*pz);
IkReal x1466=(cj12*cj13);
IkReal x1467=((0.166464)*cj17);
IkReal x1468=(cj12*r01);
IkReal x1469=(r00*sj12);
IkReal x1470=(cj13*r00);
IkReal x1471=((1.0)*cj13);
IkReal x1472=(px*r00);
IkReal x1473=((1.0)*r01);
IkReal x1474=(cj13*pz);
IkReal x1475=((0.053)*r02);
IkReal x1476=((0.408)*x1439);
IkReal x1477=((1.0)*x1443);
IkReal x1478=((0.408)*x1440);
evalcond[0]=(x1450+(((-1.0)*cj17*x1440))+((r00*x1449))+((r01*x1447)));
evalcond[1]=((-0.179)+x1476+x1474+((py*x1447))+((px*x1449)));
evalcond[2]=((((-1.0)*x1445*x1470))+x1454+(((-1.0)*x1458*x1471))+((cj17*x1439)));
evalcond[3]=((0.0265)+((pz*sj13))+(((-1.0)*x1451*x1471))+x1478+(((-1.0)*x1444*x1445)));
evalcond[4]=((((-1.0)*r01*x1445*x1474))+((cj13*sj12*x1461))+((py*x1464))+((x1450*x1452))+((sj17*x1476))+(((-1.0)*px*sj13*x1473))+(((-1.0)*r02*sj12*x1444))+(((-0.179)*x1469))+(((0.179)*x1468)));
evalcond[5]=((((-1.0)*sj17*x1478))+(((0.0265)*x1468))+(((-1.0)*py*x1445*x1454))+(((-0.0265)*x1469))+((py*x1470))+((x1447*x1448))+(((-1.0)*x1447*x1461))+(((-1.0)*x1444*x1473))+((pz*r01*x1449)));
evalcond[6]=(((r01*x1441*x1447))+(((-1.0)*x1458*x1459))+(((-1.0)*cj12*r00*x1459))+(((0.358)*x1462))+(((-1.0)*x1448*x1457))+(((-1.0)*cj13*x1446*x1462))+((r00*x1443*x1449))+(((0.009487)*x1454))+(((-1.0)*r00*x1444*x1446))+(((-1.0)*x1441*x1445*x1464))+(((0.053)*pz*x1458))+(((-1.0)*x1451*x1475))+((r00*x1442*x1449))+(((-1.0)*x1450*x1477))+(((-0.03133875)*x1450))+(((-1.0)*x1440*x1467))+(((-1.0)*py*r02*x1446*x1447))+((r01*x1443*x1447))+(((-1.0)*x1442*x1447*x1473))+(((-1.0)*x1449*x1453*x1460))+(((0.358)*x1472))+(((-0.03133875)*r01*x1447))+((x1457*x1461))+(((-1.0)*x1446*x1448*x1449))+((r02*x1465))+(((-1.0)*x1449*x1456))+((x1441*x1450))+((x1442*x1450))+(((-1.0)*x1447*x1460*x1463)));
evalcond[7]=(((cj12*r02*x1444*x1446))+(((0.03133875)*x1454))+((x1446*x1450*x1451))+(((-0.053)*x1462))+(((-1.0)*x1448*x1455))+(((0.009487)*x1450))+(((-1.0)*x1456*x1466))+((cj13*x1442*x1458))+(((-1.0)*sj13*x1446*x1462))+((x1455*x1461))+(((-1.0)*px*x1446*x1464))+((x1444*x1451*x1463))+((x1458*x1465))+(((-1.0)*x1443*x1458*x1471))+((x1439*x1467))+(((0.009487)*r00*x1449))+(((-1.0)*pz*x1475))+(((-1.0)*x1443*x1445*x1470))+(((-0.358)*r02*x1451))+(((-1.0)*x1441*x1458*x1471))+(((0.009487)*r01*x1447))+(((-0.053)*x1472))+((x1444*x1452*x1453))+((x1441*x1454))+(((-0.03133875)*cj13*x1458))+(((-1.0)*x1454*x1477))+(((-1.0)*x1442*x1445*x1470))+((r00*x1441*x1466))+((x1442*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1479=((6.41025641025641)*sj13);
IkReal x1480=((6.41025641025641)*cj13);
IkReal x1481=(py*sj12);
IkReal x1482=(cj12*px);
if( IKabs(((1.1474358974359)+(((-1.0)*x1479*x1481))+(((-1.0)*x1479*x1482))+(((-1.0)*pz*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.169871794871795)+((x1480*x1482))+((x1480*x1481))+(((-1.0)*pz*x1479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.1474358974359)+(((-1.0)*x1479*x1481))+(((-1.0)*x1479*x1482))+(((-1.0)*pz*x1480))))+IKsqr(((-0.169871794871795)+((x1480*x1482))+((x1480*x1481))+(((-1.0)*pz*x1479))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((1.1474358974359)+(((-1.0)*x1479*x1481))+(((-1.0)*x1479*x1482))+(((-1.0)*pz*x1480))), ((-0.169871794871795)+((x1480*x1482))+((x1480*x1481))+(((-1.0)*pz*x1479))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1483=IKsin(j14);
IkReal x1484=IKcos(j14);
IkReal x1485=px*px;
IkReal x1486=py*py;
IkReal x1487=pz*pz;
IkReal x1488=(cj13*px);
IkReal x1489=((1.0)*cj12);
IkReal x1490=((2.0)*pz);
IkReal x1491=(sj12*sj13);
IkReal x1492=(px*r02);
IkReal x1493=(cj12*sj13);
IkReal x1494=(cj13*r02);
IkReal x1495=(py*sj12);
IkReal x1496=(cj12*py);
IkReal x1497=((2.0)*r01);
IkReal x1498=(r02*sj13);
IkReal x1499=((0.358)*cj12);
IkReal x1500=((0.03133875)*r00);
IkReal x1501=((0.053)*cj12);
IkReal x1502=(r01*sj12);
IkReal x1503=((0.009487)*cj13);
IkReal x1504=(px*py);
IkReal x1505=(pz*r00);
IkReal x1506=(py*r01);
IkReal x1507=((2.0)*r00);
IkReal x1508=(r00*sj13);
IkReal x1509=((0.358)*pz);
IkReal x1510=(cj12*cj13);
IkReal x1511=(cj12*r01);
IkReal x1512=(r00*sj12);
IkReal x1513=(cj13*r00);
IkReal x1514=((0.053)*r02);
IkReal x1515=((1.0)*cj13);
IkReal x1516=(px*r00);
IkReal x1517=((1.0)*r01);
IkReal x1518=(cj13*pz);
IkReal x1519=((0.156)*x1483);
IkReal x1520=((1.0)*x1487);
IkReal x1521=((0.156)*x1484);
IkReal x1522=(cj17*x1483);
IkReal x1523=(cj17*x1484);
evalcond[0]=(((r00*x1493))+((r01*x1491))+x1523+x1494);
evalcond[1]=((-0.179)+((py*x1491))+x1519+x1518+((px*x1493)));
evalcond[2]=(x1498+(((-1.0)*x1489*x1513))+(((-1.0)*x1502*x1515))+(((-1.0)*x1522)));
evalcond[3]=((0.0265)+((pz*sj13))+x1521+(((-1.0)*x1488*x1489))+(((-1.0)*x1495*x1515)));
evalcond[4]=((((-1.0)*r01*x1489*x1518))+((x1494*x1496))+(((0.179)*x1511))+(((-1.0)*px*sj13*x1517))+(((-0.179)*x1512))+(((-1.0)*r02*sj12*x1488))+((py*x1508))+((cj13*sj12*x1505))+((sj17*x1519)));
evalcond[5]=((((0.0265)*x1511))+(((-1.0)*x1488*x1517))+((pz*r01*x1493))+((x1491*x1492))+(((-1.0)*x1491*x1505))+((py*x1513))+(((-1.0)*py*x1489*x1498))+(((-1.0)*sj17*x1521))+(((-0.0265)*x1512)));
evalcond[6]=((((-0.03133875)*r01*x1491))+(((-1.0)*x1486*x1491*x1517))+(((-1.0)*cj13*x1490*x1506))+(((-1.0)*x1485*x1489*x1508))+(((-1.0)*x1493*x1497*x1504))+((r00*x1487*x1493))+(((-1.0)*cj12*r00*x1503))+((r01*x1485*x1491))+((x1501*x1505))+((x1486*x1494))+((r00*x1486*x1493))+(((-0.03133875)*x1494))+(((0.009487)*x1498))+(((-1.0)*x1491*x1504*x1507))+(((-1.0)*x1494*x1520))+((x1485*x1494))+(((-1.0)*x1490*x1492*x1493))+((r01*x1487*x1491))+(((0.024336)*x1523))+((r02*x1509))+(((0.053)*pz*x1502))+(((0.358)*x1516))+(((-1.0)*r00*x1488*x1490))+(((-1.0)*x1502*x1503))+(((0.358)*x1506))+(((-1.0)*x1495*x1514))+(((-1.0)*x1493*x1500))+(((-1.0)*x1492*x1501))+(((-1.0)*py*r02*x1490*x1491)));
evalcond[7]=((((-1.0)*x1487*x1489*x1513))+((x1499*x1505))+(((-1.0)*px*x1490*x1508))+(((0.009487)*r00*x1493))+(((0.009487)*r01*x1491))+(((-1.0)*x1498*x1520))+(((-1.0)*x1485*x1502*x1515))+(((-1.0)*x1487*x1502*x1515))+(((-0.358)*r02*x1495))+(((-0.024336)*x1522))+(((-1.0)*x1492*x1499))+((cj13*x1486*x1502))+((x1486*x1498))+((cj12*r02*x1488*x1490))+(((0.009487)*x1494))+((x1485*x1498))+((r00*x1485*x1510))+((x1490*x1494*x1495))+(((-0.03133875)*cj13*x1502))+(((-1.0)*x1500*x1510))+(((-1.0)*sj13*x1490*x1506))+(((-0.053)*x1506))+(((0.03133875)*x1498))+(((-1.0)*pz*x1514))+((x1502*x1509))+(((-0.053)*x1516))+(((-1.0)*x1486*x1489*x1513))+((x1488*x1496*x1497))+((x1488*x1495*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((0.446808510638298)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1524=((3.54609928841723)*sj13);
IkReal x1525=((1.77104279821767)*sj13);
IkReal x1526=(cj12*px);
IkReal x1527=(py*sj12);
IkReal x1528=((1.77104279821767)*cj13);
IkReal x1529=((3.54609928841723)*cj13);
if( IKabs(((0.681684406779452)+(((-1.0)*x1524*x1527))+(((-1.0)*x1524*x1526))+(((-1.0)*x1526*x1528))+((pz*x1525))+(((-1.0)*x1527*x1528))+(((-1.0)*pz*x1529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.223045029737906)+(((-1.0)*x1525*x1527))+(((-1.0)*x1525*x1526))+((x1526*x1529))+((x1527*x1529))+(((-1.0)*pz*x1528))+(((-1.0)*pz*x1524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.681684406779452)+(((-1.0)*x1524*x1527))+(((-1.0)*x1524*x1526))+(((-1.0)*x1526*x1528))+((pz*x1525))+(((-1.0)*x1527*x1528))+(((-1.0)*pz*x1529))))+IKsqr(((0.223045029737906)+(((-1.0)*x1525*x1527))+(((-1.0)*x1525*x1526))+((x1526*x1529))+((x1527*x1529))+(((-1.0)*pz*x1528))+(((-1.0)*pz*x1524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.681684406779452)+(((-1.0)*x1524*x1527))+(((-1.0)*x1524*x1526))+(((-1.0)*x1526*x1528))+((pz*x1525))+(((-1.0)*x1527*x1528))+(((-1.0)*pz*x1529))), ((0.223045029737906)+(((-1.0)*x1525*x1527))+(((-1.0)*x1525*x1526))+((x1526*x1529))+((x1527*x1529))+(((-1.0)*pz*x1528))+(((-1.0)*pz*x1524))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1530=IKsin(j14);
IkReal x1531=IKcos(j14);
IkReal x1532=px*px;
IkReal x1533=py*py;
IkReal x1534=pz*pz;
IkReal x1535=(cj13*px);
IkReal x1536=((1.0)*cj12);
IkReal x1537=((2.0)*pz);
IkReal x1538=(sj12*sj13);
IkReal x1539=(px*r02);
IkReal x1540=(cj12*sj13);
IkReal x1541=(cj13*r02);
IkReal x1542=(py*sj12);
IkReal x1543=(cj12*py);
IkReal x1544=((2.0)*r01);
IkReal x1545=(r02*sj13);
IkReal x1546=((0.358)*cj12);
IkReal x1547=((0.03133875)*r00);
IkReal x1548=((0.053)*cj12);
IkReal x1549=(r01*sj12);
IkReal x1550=((0.009487)*cj13);
IkReal x1551=(px*py);
IkReal x1552=(pz*r00);
IkReal x1553=(py*r01);
IkReal x1554=((2.0)*r00);
IkReal x1555=(r00*sj13);
IkReal x1556=((0.358)*pz);
IkReal x1557=(cj12*cj13);
IkReal x1558=(cj12*r01);
IkReal x1559=(r00*sj12);
IkReal x1560=(cj13*r00);
IkReal x1561=((1.0)*cj13);
IkReal x1562=(px*r00);
IkReal x1563=((1.0)*r01);
IkReal x1564=(cj13*pz);
IkReal x1565=((0.053)*r02);
IkReal x1566=(cj17*x1530);
IkReal x1567=((0.11272333212)*x1530);
IkReal x1568=(cj17*x1531);
IkReal x1569=((1.0)*x1534);
IkReal x1570=(sj17*x1531);
IkReal x1571=((0.225702127707488)*x1530);
evalcond[0]=((-0.179)+(((0.11272333212)*x1531))+x1564+x1571+((px*x1540))+((py*x1538)));
evalcond[1]=(((r01*x1538))+(((0.446808510258035)*x1568))+x1541+(((0.89462962)*x1566))+((r00*x1540)));
evalcond[2]=((0.0265)+(((0.225702127707488)*x1531))+((pz*sj13))+(((-1.0)*x1535*x1536))+(((-1.0)*x1542*x1561))+(((-1.0)*x1567)));
evalcond[3]=((((-0.446808510258035)*x1566))+(((-1.0)*x1549*x1561))+(((-1.0)*x1536*x1560))+x1545+(((0.89462962)*x1568)));
evalcond[4]=(((sj17*x1571))+(((-1.0)*px*sj13*x1563))+(((-1.0)*r02*sj12*x1535))+((x1541*x1543))+(((0.11272333212)*x1570))+(((0.179)*x1558))+((cj13*sj12*x1552))+((py*x1555))+(((-1.0)*r01*x1536*x1564))+(((-0.179)*x1559)));
evalcond[5]=((((0.0265)*x1558))+((x1538*x1539))+((pz*r01*x1540))+(((-1.0)*x1535*x1563))+((sj17*x1567))+(((-0.225702127707488)*x1570))+(((-0.0265)*x1559))+(((-1.0)*py*x1536*x1545))+((py*x1560))+(((-1.0)*x1538*x1552)));
evalcond[6]=((((-1.0)*x1532*x1536*x1555))+(((-1.0)*py*r02*x1537*x1538))+(((0.009487)*x1545))+(((-1.0)*x1537*x1539*x1540))+((x1532*x1541))+(((0.358)*x1553))+(((-1.0)*x1540*x1544*x1551))+(((-1.0)*x1549*x1550))+(((-1.0)*x1540*x1547))+(((-0.03133875)*r01*x1538))+(((0.358)*x1562))+((x1533*x1541))+(((-0.03133875)*x1541))+((r01*x1534*x1538))+(((-1.0)*x1538*x1551*x1554))+(((-1.0)*cj13*x1537*x1553))+((r00*x1533*x1540))+((r02*x1556))+((r00*x1534*x1540))+(((-1.0)*x1533*x1538*x1563))+(((-1.0)*x1539*x1548))+(((0.053)*pz*x1549))+((x1548*x1552))+(((-1.0)*x1541*x1569))+(((-0.05694138605376)*x1566))+(((-1.0)*x1542*x1565))+(((-1.0)*r00*x1535*x1537))+(((-0.0284384681213834)*x1568))+(((-1.0)*cj12*r00*x1550))+((r01*x1532*x1538)));
evalcond[7]=((((-1.0)*x1533*x1536*x1560))+((x1535*x1543*x1544))+(((-0.358)*r02*x1542))+(((-1.0)*x1532*x1549*x1561))+(((0.009487)*x1541))+((x1532*x1545))+(((0.009487)*r00*x1540))+(((-1.0)*sj13*x1537*x1553))+((cj13*x1533*x1549))+(((-1.0)*pz*x1565))+((x1535*x1542*x1554))+((x1533*x1545))+(((0.03133875)*x1545))+((cj12*r02*x1535*x1537))+((x1537*x1541*x1542))+(((-1.0)*x1534*x1549*x1561))+((x1549*x1556))+(((-1.0)*px*x1537*x1555))+(((0.0284384681213834)*x1566))+(((-1.0)*x1539*x1546))+(((-1.0)*x1534*x1536*x1560))+((r00*x1532*x1557))+((x1546*x1552))+(((0.009487)*r01*x1538))+(((-0.05694138605376)*x1568))+(((-1.0)*x1547*x1557))+(((-1.0)*x1545*x1569))+(((-0.03133875)*cj13*x1549))+(((-0.053)*x1553))+(((-0.053)*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.446808510638298)+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1572=((3.54609928841723)*sj13);
IkReal x1573=((1.77104279821767)*sj13);
IkReal x1574=(cj12*px);
IkReal x1575=(py*sj12);
IkReal x1576=((1.77104279821767)*cj13);
IkReal x1577=((3.54609928841723)*cj13);
if( IKabs(((0.587819138473915)+(((-1.0)*x1572*x1575))+(((-1.0)*x1572*x1574))+((x1575*x1576))+(((-1.0)*pz*x1577))+(((-1.0)*pz*x1573))+((x1574*x1576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.410988292024019)+((x1573*x1575))+((x1573*x1574))+((x1575*x1577))+(((-1.0)*pz*x1572))+((pz*x1576))+((x1574*x1577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.587819138473915)+(((-1.0)*x1572*x1575))+(((-1.0)*x1572*x1574))+((x1575*x1576))+(((-1.0)*pz*x1577))+(((-1.0)*pz*x1573))+((x1574*x1576))))+IKsqr(((-0.410988292024019)+((x1573*x1575))+((x1573*x1574))+((x1575*x1577))+(((-1.0)*pz*x1572))+((pz*x1576))+((x1574*x1577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((0.587819138473915)+(((-1.0)*x1572*x1575))+(((-1.0)*x1572*x1574))+((x1575*x1576))+(((-1.0)*pz*x1577))+(((-1.0)*pz*x1573))+((x1574*x1576))), ((-0.410988292024019)+((x1573*x1575))+((x1573*x1574))+((x1575*x1577))+(((-1.0)*pz*x1572))+((pz*x1576))+((x1574*x1577))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1578=IKcos(j14);
IkReal x1579=IKsin(j14);
IkReal x1580=px*px;
IkReal x1581=py*py;
IkReal x1582=pz*pz;
IkReal x1583=(cj13*px);
IkReal x1584=((1.0)*cj12);
IkReal x1585=((2.0)*pz);
IkReal x1586=(sj12*sj13);
IkReal x1587=(px*r02);
IkReal x1588=(cj12*sj13);
IkReal x1589=(cj13*r02);
IkReal x1590=(py*sj12);
IkReal x1591=(cj12*py);
IkReal x1592=((2.0)*r01);
IkReal x1593=(r02*sj13);
IkReal x1594=((0.358)*cj12);
IkReal x1595=((0.03133875)*r00);
IkReal x1596=((0.053)*cj12);
IkReal x1597=(r01*sj12);
IkReal x1598=((0.009487)*cj13);
IkReal x1599=(px*py);
IkReal x1600=(pz*r00);
IkReal x1601=(py*r01);
IkReal x1602=((2.0)*r00);
IkReal x1603=(r00*sj13);
IkReal x1604=((0.358)*pz);
IkReal x1605=(cj12*cj13);
IkReal x1606=(cj12*r01);
IkReal x1607=(r00*sj12);
IkReal x1608=(cj13*r00);
IkReal x1609=((1.0)*cj13);
IkReal x1610=(px*r00);
IkReal x1611=((1.0)*r01);
IkReal x1612=(cj13*pz);
IkReal x1613=((0.053)*r02);
IkReal x1614=(cj17*x1579);
IkReal x1615=((0.11272333212)*x1579);
IkReal x1616=(cj17*x1578);
IkReal x1617=((1.0)*x1582);
IkReal x1618=(sj17*x1578);
IkReal x1619=((0.225702127707488)*x1579);
evalcond[0]=((-0.179)+(((-0.11272333212)*x1578))+x1619+x1612+((py*x1586))+((px*x1588)));
evalcond[1]=(((r01*x1586))+x1589+(((0.446808510258035)*x1616))+(((-0.89462962)*x1614))+((r00*x1588)));
evalcond[2]=((0.0265)+x1615+((pz*sj13))+(((0.225702127707488)*x1578))+(((-1.0)*x1590*x1609))+(((-1.0)*x1583*x1584)));
evalcond[3]=((((-0.446808510258035)*x1614))+x1593+(((-1.0)*x1597*x1609))+(((-1.0)*x1584*x1608))+(((-0.89462962)*x1616)));
evalcond[4]=((((0.179)*x1606))+((py*x1603))+((sj17*x1619))+((x1589*x1591))+(((-0.11272333212)*x1618))+(((-0.179)*x1607))+(((-1.0)*r02*sj12*x1583))+((cj13*sj12*x1600))+(((-1.0)*px*sj13*x1611))+(((-1.0)*r01*x1584*x1612)));
evalcond[5]=(((x1586*x1587))+((py*x1608))+(((-1.0)*x1586*x1600))+(((-1.0)*py*x1584*x1593))+(((-1.0)*x1583*x1611))+(((-0.225702127707488)*x1618))+(((0.0265)*x1606))+(((-1.0)*sj17*x1615))+(((-0.0265)*x1607))+((pz*r01*x1588)));
evalcond[6]=((((0.009487)*x1593))+((r00*x1582*x1588))+(((-0.03133875)*r01*x1586))+(((-1.0)*x1586*x1599*x1602))+(((-1.0)*cj12*r00*x1598))+(((-0.03133875)*x1589))+((r01*x1580*x1586))+(((-1.0)*x1588*x1595))+(((-0.0284384681213834)*x1616))+(((-1.0)*x1588*x1592*x1599))+(((-1.0)*x1585*x1587*x1588))+(((-1.0)*cj13*x1585*x1601))+((x1580*x1589))+(((-1.0)*x1581*x1586*x1611))+(((-1.0)*py*r02*x1585*x1586))+(((-1.0)*x1580*x1584*x1603))+((r00*x1581*x1588))+(((0.358)*x1601))+(((-1.0)*x1590*x1613))+(((-1.0)*r00*x1583*x1585))+((x1596*x1600))+(((0.053)*pz*x1597))+(((-1.0)*x1589*x1617))+(((0.358)*x1610))+((r02*x1604))+(((0.05694138605376)*x1614))+((r01*x1582*x1586))+(((-1.0)*x1597*x1598))+((x1581*x1589))+(((-1.0)*x1587*x1596)));
evalcond[7]=((((0.009487)*x1589))+(((0.0284384681213834)*x1614))+(((-1.0)*x1593*x1617))+((x1583*x1591*x1592))+((x1585*x1589*x1590))+(((-0.03133875)*cj13*x1597))+((cj12*r02*x1583*x1585))+(((-1.0)*x1595*x1605))+(((0.03133875)*x1593))+(((-0.053)*x1601))+(((-1.0)*x1582*x1584*x1608))+(((-1.0)*x1581*x1584*x1608))+((x1583*x1590*x1602))+(((-1.0)*sj13*x1585*x1601))+((cj13*x1581*x1597))+(((-1.0)*pz*x1613))+((x1594*x1600))+(((-0.053)*x1610))+((x1580*x1593))+(((-1.0)*x1582*x1597*x1609))+(((-1.0)*px*x1585*x1603))+((r00*x1580*x1605))+(((0.05694138605376)*x1616))+(((0.009487)*r00*x1588))+(((-0.358)*r02*x1590))+(((-1.0)*x1580*x1597*x1609))+((x1581*x1593))+(((-1.0)*x1587*x1594))+(((0.009487)*r01*x1586))+((x1597*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(cj17,-1);
if(!x1631.valid){
continue;
}
IkReal x1620=x1631.value;
IkReal x1621=(cj12*px);
IkReal x1622=(r02*sj13);
IkReal x1623=((63.0)*cj15);
IkReal x1624=(py*sj12);
IkReal x1625=((89.5)*cj17);
IkReal x1626=((500.0)*cj17*sj13);
IkReal x1627=((-0.00709219858156028)*x1620);
IkReal x1628=(cj12*cj13*r00);
IkReal x1629=(cj13*r01*sj12);
IkReal x1630=((500.0)*cj13*cj17*pz);
CheckValue<IkReal> x1632=IKPowWithIntegerCheck(sj15,-1);
if(!x1632.valid){
continue;
}
if( IKabs((x1627*(((((63.0)*x1628))+(((63.0)*x1629))+x1630+(((-1.0)*x1625))+(((-63.0)*x1622))+((x1624*x1626))+((x1621*x1626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1627*(x1632.value)*(((((141.0)*x1622))+(((-141.0)*x1628))+(((-141.0)*x1629))+((x1622*x1623))+(((-1.0)*cj15*x1624*x1626))+(((-1.0)*cj15*x1630))+(((-1.0)*cj15*x1621*x1626))+(((-1.0)*x1623*x1628))+(((-1.0)*x1623*x1629))+((cj15*x1625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1627*(((((63.0)*x1628))+(((63.0)*x1629))+x1630+(((-1.0)*x1625))+(((-63.0)*x1622))+((x1624*x1626))+((x1621*x1626))))))+IKsqr((x1627*(x1632.value)*(((((141.0)*x1622))+(((-141.0)*x1628))+(((-141.0)*x1629))+((x1622*x1623))+(((-1.0)*cj15*x1624*x1626))+(((-1.0)*cj15*x1630))+(((-1.0)*cj15*x1621*x1626))+(((-1.0)*x1623*x1628))+(((-1.0)*x1623*x1629))+((cj15*x1625))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x1627*(((((63.0)*x1628))+(((63.0)*x1629))+x1630+(((-1.0)*x1625))+(((-63.0)*x1622))+((x1624*x1626))+((x1621*x1626))))), (x1627*(x1632.value)*(((((141.0)*x1622))+(((-141.0)*x1628))+(((-141.0)*x1629))+((x1622*x1623))+(((-1.0)*cj15*x1624*x1626))+(((-1.0)*cj15*x1630))+(((-1.0)*cj15*x1621*x1626))+(((-1.0)*x1623*x1628))+(((-1.0)*x1623*x1629))+((cj15*x1625))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1633=IKsin(j14);
IkReal x1634=IKcos(j14);
IkReal x1635=px*px;
IkReal x1636=py*py;
IkReal x1637=pz*pz;
IkReal x1638=(cj13*px);
IkReal x1639=((1.0)*cj12);
IkReal x1640=((2.0)*pz);
IkReal x1641=(sj12*sj13);
IkReal x1642=(px*r02);
IkReal x1643=(cj12*sj13);
IkReal x1644=(cj13*r02);
IkReal x1645=(py*sj12);
IkReal x1646=(cj12*py);
IkReal x1647=((2.0)*r01);
IkReal x1648=(r02*sj13);
IkReal x1649=((0.358)*cj12);
IkReal x1650=((0.03133875)*r00);
IkReal x1651=((0.063648)*sj15);
IkReal x1652=((0.053)*cj12);
IkReal x1653=(r01*sj12);
IkReal x1654=((0.009487)*cj13);
IkReal x1655=(px*py);
IkReal x1656=(pz*r00);
IkReal x1657=(py*r01);
IkReal x1658=((2.0)*r00);
IkReal x1659=(r00*sj13);
IkReal x1660=((0.358)*pz);
IkReal x1661=((1.0)*r01);
IkReal x1662=(cj15*sj17);
IkReal x1663=(cj12*r01);
IkReal x1664=(r00*sj12);
IkReal x1665=((0.0954)*cj15);
IkReal x1666=(cj13*r00);
IkReal x1667=((1.0)*cj13);
IkReal x1668=(sj15*sj17);
IkReal x1669=(cj13*pz);
IkReal x1670=((0.053)*r02);
IkReal x1671=(px*r00);
IkReal x1672=(cj17*x1634);
IkReal x1673=((0.126)*x1634);
IkReal x1674=((1.0)*x1637);
IkReal x1675=(cj17*x1633);
IkReal x1676=((0.126)*x1633);
IkReal x1677=((0.282)*x1633);
IkReal x1678=((0.282)*x1634);
evalcond[0]=(x1644+((r00*x1643))+((r01*x1641))+(((-1.0)*cj15*x1672))+((sj15*x1675)));
evalcond[1]=(x1648+(((-1.0)*x1653*x1667))+((cj15*x1675))+(((-1.0)*x1639*x1666))+((sj15*x1672)));
evalcond[2]=((-0.179)+x1669+x1677+((py*x1641))+((cj15*x1676))+((px*x1643))+((sj15*x1673)));
evalcond[3]=((0.0265)+x1678+((cj15*x1673))+(((-1.0)*x1638*x1639))+((pz*sj13))+(((-1.0)*x1645*x1667))+(((-1.0)*sj15*x1676)));
evalcond[4]=((((-0.179)*x1664))+(((-1.0)*r02*sj12*x1638))+(((-1.0)*px*sj13*x1661))+((x1668*x1673))+((py*x1659))+((x1644*x1646))+((x1662*x1676))+(((-1.0)*r01*x1639*x1669))+((sj17*x1677))+(((0.179)*x1663))+((cj13*sj12*x1656)));
evalcond[5]=((((0.0265)*x1663))+(((-1.0)*x1641*x1656))+((x1668*x1676))+((pz*r01*x1643))+((x1641*x1642))+((py*x1666))+(((-1.0)*x1638*x1661))+(((-1.0)*py*x1639*x1648))+(((-1.0)*x1662*x1673))+(((-0.0265)*x1664))+(((-1.0)*sj17*x1678)));
evalcond[6]=((((-0.053)*x1671))+(((0.071064)*x1675))+((x1636*x1648))+((x1665*x1675))+(((-1.0)*cj12*cj13*x1650))+(((-1.0)*x1637*x1653*x1667))+((x1640*x1644*x1645))+(((0.03133875)*x1648))+(((-0.053)*x1657))+(((-1.0)*x1635*x1653*x1667))+(((-1.0)*x1648*x1674))+(((-1.0)*x1637*x1639*x1666))+(((-0.03133875)*cj13*x1653))+(((-1.0)*x1642*x1649))+(((-0.358)*r02*x1645))+(((0.009487)*r00*x1643))+((x1638*x1646*x1647))+((cj13*x1636*x1653))+(((-1.0)*x1651*x1672))+(((-1.0)*px*x1640*x1659))+(((0.009487)*r01*x1641))+((x1649*x1656))+((x1638*x1645*x1658))+(((-1.0)*pz*x1670))+(((0.009487)*x1644))+(((-1.0)*sj13*x1640*x1657))+((cj12*r02*x1638*x1640))+((x1635*x1648))+((cj12*x1635*x1666))+(((-1.0)*x1636*x1639*x1666))+((x1653*x1660)));
evalcond[7]=((((-1.0)*r00*x1638*x1640))+((x1636*x1644))+((r00*x1636*x1643))+(((-1.0)*x1644*x1674))+(((-0.03133875)*r01*x1641))+(((-1.0)*x1640*x1642*x1643))+(((0.358)*x1671))+((r00*x1637*x1643))+((r02*x1660))+(((-1.0)*x1635*x1639*x1659))+(((-1.0)*x1643*x1650))+(((-0.03133875)*x1644))+(((-1.0)*x1641*x1655*x1658))+(((-1.0)*x1645*x1670))+(((-1.0)*x1653*x1654))+(((-1.0)*cj13*x1640*x1657))+((r01*x1637*x1641))+(((-1.0)*x1642*x1652))+(((-1.0)*x1636*x1641*x1661))+(((-1.0)*x1651*x1675))+(((0.358)*x1657))+(((0.009487)*x1648))+(((-1.0)*x1643*x1647*x1655))+(((0.053)*pz*x1653))+((x1635*x1644))+(((-1.0)*x1665*x1672))+(((-1.0)*cj12*r00*x1654))+(((-0.071064)*x1672))+((r01*x1635*x1641))+((x1652*x1656))+(((-1.0)*py*r02*x1640*x1641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1679=(sj12*sj13);
IkReal x1680=(cj15*cj17);
IkReal x1681=((500.0)*py);
IkReal x1682=((63.0)*sj15);
IkReal x1683=(cj13*r02);
IkReal x1684=((63.0)*cj15);
IkReal x1685=(cj17*sj15);
IkReal x1686=(cj12*r00*sj13);
IkReal x1687=((500.0)*cj13*pz);
IkReal x1688=((500.0)*cj12*px*sj13);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((141.0)*x1680))+(((63.0)*cj17)))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal(((((-1.0)*x1679*x1680*x1681))+(((-1.0)*r01*x1679*x1682))+(((-1.0)*x1682*x1683))+(((-1.0)*x1682*x1686))+(((89.5)*x1680))+(((-1.0)*x1680*x1687))+(((-1.0)*x1680*x1688)))),IkReal(((((141.0)*x1686))+(((141.0)*x1683))+(((-1.0)*x1679*x1681*x1685))+(((-1.0)*x1685*x1688))+(((-1.0)*x1685*x1687))+(((89.5)*x1685))+(((141.0)*r01*x1679))+((r01*x1679*x1684))+((x1684*x1686))+((x1683*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1691=IKsin(j14);
IkReal x1692=IKcos(j14);
IkReal x1693=px*px;
IkReal x1694=py*py;
IkReal x1695=pz*pz;
IkReal x1696=(cj13*px);
IkReal x1697=((1.0)*cj12);
IkReal x1698=((2.0)*pz);
IkReal x1699=(sj12*sj13);
IkReal x1700=(px*r02);
IkReal x1701=(cj12*sj13);
IkReal x1702=(cj13*r02);
IkReal x1703=(py*sj12);
IkReal x1704=(cj12*py);
IkReal x1705=((2.0)*r01);
IkReal x1706=(r02*sj13);
IkReal x1707=((0.358)*cj12);
IkReal x1708=((0.03133875)*r00);
IkReal x1709=((0.063648)*sj15);
IkReal x1710=((0.053)*cj12);
IkReal x1711=(r01*sj12);
IkReal x1712=((0.009487)*cj13);
IkReal x1713=(px*py);
IkReal x1714=(pz*r00);
IkReal x1715=(py*r01);
IkReal x1716=((2.0)*r00);
IkReal x1717=(r00*sj13);
IkReal x1718=((0.358)*pz);
IkReal x1719=((1.0)*r01);
IkReal x1720=(cj15*sj17);
IkReal x1721=(cj12*r01);
IkReal x1722=(r00*sj12);
IkReal x1723=((0.0954)*cj15);
IkReal x1724=(cj13*r00);
IkReal x1725=((1.0)*cj13);
IkReal x1726=(sj15*sj17);
IkReal x1727=(cj13*pz);
IkReal x1728=((0.053)*r02);
IkReal x1729=(px*r00);
IkReal x1730=(cj17*x1692);
IkReal x1731=((0.126)*x1692);
IkReal x1732=((1.0)*x1695);
IkReal x1733=(cj17*x1691);
IkReal x1734=((0.126)*x1691);
IkReal x1735=((0.282)*x1691);
IkReal x1736=((0.282)*x1692);
evalcond[0]=(((r01*x1699))+x1702+((sj15*x1733))+(((-1.0)*cj15*x1730))+((r00*x1701)));
evalcond[1]=(x1706+((sj15*x1730))+(((-1.0)*x1697*x1724))+((cj15*x1733))+(((-1.0)*x1711*x1725)));
evalcond[2]=((-0.179)+x1727+x1735+((sj15*x1731))+((px*x1701))+((cj15*x1734))+((py*x1699)));
evalcond[3]=((0.0265)+(((-1.0)*sj15*x1734))+(((-1.0)*x1696*x1697))+x1736+(((-1.0)*x1703*x1725))+((pz*sj13))+((cj15*x1731)));
evalcond[4]=((((-1.0)*r01*x1697*x1727))+(((-1.0)*px*sj13*x1719))+(((-1.0)*r02*sj12*x1696))+((sj17*x1735))+((x1726*x1731))+((x1720*x1734))+((x1702*x1704))+((py*x1717))+(((-0.179)*x1722))+((cj13*sj12*x1714))+(((0.179)*x1721)));
evalcond[5]=((((-1.0)*py*x1697*x1706))+(((-1.0)*x1699*x1714))+((pz*r01*x1701))+((py*x1724))+(((-0.0265)*x1722))+((x1726*x1734))+(((-1.0)*x1720*x1731))+(((-1.0)*sj17*x1736))+(((0.0265)*x1721))+(((-1.0)*x1696*x1719))+((x1699*x1700)));
evalcond[6]=((((-0.358)*r02*x1703))+((x1723*x1733))+((x1693*x1706))+((x1696*x1703*x1716))+(((-1.0)*x1695*x1711*x1725))+((cj13*x1694*x1711))+(((-0.03133875)*cj13*x1711))+(((-1.0)*x1706*x1732))+(((-0.053)*x1729))+((x1694*x1706))+(((-1.0)*sj13*x1698*x1715))+(((-1.0)*x1693*x1711*x1725))+(((-1.0)*pz*x1728))+(((0.03133875)*x1706))+((x1698*x1702*x1703))+(((-1.0)*x1694*x1697*x1724))+((cj12*x1693*x1724))+(((-1.0)*x1695*x1697*x1724))+(((-1.0)*cj12*cj13*x1708))+((x1711*x1718))+(((0.009487)*r01*x1699))+(((-1.0)*x1700*x1707))+(((0.009487)*x1702))+(((0.071064)*x1733))+((cj12*r02*x1696*x1698))+(((-0.053)*x1715))+(((0.009487)*r00*x1701))+(((-1.0)*x1709*x1730))+((x1707*x1714))+((x1696*x1704*x1705))+(((-1.0)*px*x1698*x1717)));
evalcond[7]=((((-0.03133875)*r01*x1699))+((x1710*x1714))+((r02*x1718))+((x1693*x1702))+(((-1.0)*x1698*x1700*x1701))+(((-1.0)*x1701*x1705*x1713))+((x1694*x1702))+(((-1.0)*x1702*x1732))+(((-1.0)*x1703*x1728))+((r00*x1695*x1701))+(((0.358)*x1715))+(((-0.071064)*x1730))+((r00*x1694*x1701))+(((-1.0)*x1723*x1730))+(((-1.0)*x1711*x1712))+(((0.053)*pz*x1711))+(((-1.0)*x1700*x1710))+((r01*x1693*x1699))+(((-1.0)*py*r02*x1698*x1699))+(((0.009487)*x1706))+(((-1.0)*x1693*x1697*x1717))+(((-1.0)*cj13*x1698*x1715))+(((-1.0)*x1694*x1699*x1719))+(((-1.0)*x1701*x1708))+(((-1.0)*x1709*x1733))+((r01*x1695*x1699))+(((-1.0)*cj12*r00*x1712))+(((-1.0)*x1699*x1713*x1716))+(((-1.0)*r00*x1696*x1698))+(((0.358)*x1729))+(((-0.03133875)*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1737=(cj15*sj13);
IkReal x1738=(cj12*r00);
IkReal x1739=(r01*sj12);
IkReal x1740=(cj13*cj15);
IkReal x1741=(cj13*sj15);
IkReal x1742=((1.0)*r02);
IkReal x1743=((1.0)*sj13*sj15);
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal(((((-1.0)*x1741*x1742))+((x1739*x1740))+(((-1.0)*x1738*x1743))+(((-1.0)*x1739*x1743))+(((-1.0)*x1737*x1742))+((x1738*x1740)))),IkReal((((x1739*x1741))+((x1737*x1739))+((x1737*x1738))+((r02*x1740))+(((-1.0)*sj13*sj15*x1742))+((x1738*x1741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(IKsign(cj17),-1);
if(!x1745.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1744.value)+(((1.5707963267949)*(x1745.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1746=IKsin(j14);
IkReal x1747=IKcos(j14);
IkReal x1748=px*px;
IkReal x1749=py*py;
IkReal x1750=pz*pz;
IkReal x1751=(cj13*px);
IkReal x1752=((1.0)*cj12);
IkReal x1753=((2.0)*pz);
IkReal x1754=(sj12*sj13);
IkReal x1755=(px*r02);
IkReal x1756=(cj12*sj13);
IkReal x1757=(cj13*r02);
IkReal x1758=(py*sj12);
IkReal x1759=(cj12*py);
IkReal x1760=((2.0)*r01);
IkReal x1761=(r02*sj13);
IkReal x1762=((0.358)*cj12);
IkReal x1763=((0.03133875)*r00);
IkReal x1764=((0.063648)*sj15);
IkReal x1765=((0.053)*cj12);
IkReal x1766=(r01*sj12);
IkReal x1767=((0.009487)*cj13);
IkReal x1768=(px*py);
IkReal x1769=(pz*r00);
IkReal x1770=(py*r01);
IkReal x1771=((2.0)*r00);
IkReal x1772=(r00*sj13);
IkReal x1773=((0.358)*pz);
IkReal x1774=((1.0)*r01);
IkReal x1775=(cj15*sj17);
IkReal x1776=(cj12*r01);
IkReal x1777=(r00*sj12);
IkReal x1778=((0.0954)*cj15);
IkReal x1779=(cj13*r00);
IkReal x1780=((1.0)*cj13);
IkReal x1781=(sj15*sj17);
IkReal x1782=(cj13*pz);
IkReal x1783=((0.053)*r02);
IkReal x1784=(px*r00);
IkReal x1785=(cj17*x1747);
IkReal x1786=((0.126)*x1747);
IkReal x1787=((1.0)*x1750);
IkReal x1788=(cj17*x1746);
IkReal x1789=((0.126)*x1746);
IkReal x1790=((0.282)*x1746);
IkReal x1791=((0.282)*x1747);
evalcond[0]=(x1757+((sj15*x1788))+(((-1.0)*cj15*x1785))+((r01*x1754))+((r00*x1756)));
evalcond[1]=((((-1.0)*x1766*x1780))+x1761+((sj15*x1785))+(((-1.0)*x1752*x1779))+((cj15*x1788)));
evalcond[2]=((-0.179)+x1782+x1790+((px*x1756))+((sj15*x1786))+((cj15*x1789))+((py*x1754)));
evalcond[3]=((0.0265)+x1791+((pz*sj13))+(((-1.0)*x1751*x1752))+(((-1.0)*x1758*x1780))+((cj15*x1786))+(((-1.0)*sj15*x1789)));
evalcond[4]=((((-1.0)*px*sj13*x1774))+((sj17*x1790))+((x1775*x1789))+(((-0.179)*x1777))+(((0.179)*x1776))+((cj13*sj12*x1769))+(((-1.0)*r02*sj12*x1751))+(((-1.0)*r01*x1752*x1782))+((x1781*x1786))+((py*x1772))+((x1757*x1759)));
evalcond[5]=(((x1754*x1755))+(((-1.0)*x1775*x1786))+(((-1.0)*x1754*x1769))+(((0.0265)*x1776))+(((-1.0)*py*x1752*x1761))+((pz*r01*x1756))+(((-1.0)*sj17*x1791))+(((-1.0)*x1751*x1774))+(((-0.0265)*x1777))+((x1781*x1789))+((py*x1779)));
evalcond[6]=(((x1753*x1757*x1758))+(((0.03133875)*x1761))+(((0.009487)*x1757))+((cj12*r02*x1751*x1753))+((x1748*x1761))+(((-1.0)*x1761*x1787))+(((-1.0)*x1764*x1785))+(((-0.358)*r02*x1758))+(((-0.03133875)*cj13*x1766))+(((-1.0)*sj13*x1753*x1770))+(((-0.053)*x1784))+(((-1.0)*x1755*x1762))+((cj12*x1748*x1779))+(((-1.0)*cj12*cj13*x1763))+(((-1.0)*px*x1753*x1772))+(((-1.0)*pz*x1783))+((x1778*x1788))+((x1766*x1773))+(((-1.0)*x1750*x1766*x1780))+(((-1.0)*x1750*x1752*x1779))+((x1751*x1758*x1771))+((x1751*x1759*x1760))+(((-1.0)*x1748*x1766*x1780))+(((0.009487)*r01*x1754))+((x1762*x1769))+((x1749*x1761))+(((0.009487)*r00*x1756))+((cj13*x1749*x1766))+(((-1.0)*x1749*x1752*x1779))+(((-0.053)*x1770))+(((0.071064)*x1788)));
evalcond[7]=(((r00*x1750*x1756))+(((-1.0)*x1753*x1755*x1756))+((r01*x1750*x1754))+(((0.358)*x1784))+(((-1.0)*x1764*x1788))+((x1749*x1757))+(((-1.0)*x1756*x1760*x1768))+((r00*x1749*x1756))+((r02*x1773))+(((-1.0)*x1748*x1752*x1772))+((x1765*x1769))+(((-0.071064)*x1785))+(((-0.03133875)*x1757))+(((-1.0)*x1755*x1765))+(((-1.0)*r00*x1751*x1753))+(((-1.0)*x1766*x1767))+(((-1.0)*x1756*x1763))+(((0.358)*x1770))+(((-1.0)*py*r02*x1753*x1754))+((x1748*x1757))+(((-1.0)*x1758*x1783))+(((-1.0)*x1754*x1768*x1771))+(((-1.0)*x1757*x1787))+(((-1.0)*cj13*x1753*x1770))+(((0.009487)*x1761))+((r01*x1748*x1754))+(((-0.03133875)*r01*x1754))+(((-1.0)*x1778*x1785))+(((0.053)*pz*x1766))+(((-1.0)*x1749*x1754*x1774))+(((-1.0)*cj12*r00*x1767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "24c3c0ef253dbb6f266f2d4852e551bd"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
